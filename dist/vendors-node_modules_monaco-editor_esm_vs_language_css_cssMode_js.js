(self["webpackChunkvega_fi"] = self["webpackChunkvega_fi"] || []).push([["vendors-node_modules_monaco-editor_esm_vs_language_css_cssMode_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/_deps/vscode-languageserver-types/main.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/_deps/vscode-languageserver-types/main.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Position": () => /* binding */ Position,
/* harmony export */   "Range": () => /* binding */ Range,
/* harmony export */   "Location": () => /* binding */ Location,
/* harmony export */   "LocationLink": () => /* binding */ LocationLink,
/* harmony export */   "Color": () => /* binding */ Color,
/* harmony export */   "ColorInformation": () => /* binding */ ColorInformation,
/* harmony export */   "ColorPresentation": () => /* binding */ ColorPresentation,
/* harmony export */   "FoldingRangeKind": () => /* binding */ FoldingRangeKind,
/* harmony export */   "FoldingRange": () => /* binding */ FoldingRange,
/* harmony export */   "DiagnosticRelatedInformation": () => /* binding */ DiagnosticRelatedInformation,
/* harmony export */   "DiagnosticSeverity": () => /* binding */ DiagnosticSeverity,
/* harmony export */   "DiagnosticTag": () => /* binding */ DiagnosticTag,
/* harmony export */   "DiagnosticCode": () => /* binding */ DiagnosticCode,
/* harmony export */   "Diagnostic": () => /* binding */ Diagnostic,
/* harmony export */   "Command": () => /* binding */ Command,
/* harmony export */   "TextEdit": () => /* binding */ TextEdit,
/* harmony export */   "TextDocumentEdit": () => /* binding */ TextDocumentEdit,
/* harmony export */   "CreateFile": () => /* binding */ CreateFile,
/* harmony export */   "RenameFile": () => /* binding */ RenameFile,
/* harmony export */   "DeleteFile": () => /* binding */ DeleteFile,
/* harmony export */   "WorkspaceEdit": () => /* binding */ WorkspaceEdit,
/* harmony export */   "WorkspaceChange": () => /* binding */ WorkspaceChange,
/* harmony export */   "TextDocumentIdentifier": () => /* binding */ TextDocumentIdentifier,
/* harmony export */   "VersionedTextDocumentIdentifier": () => /* binding */ VersionedTextDocumentIdentifier,
/* harmony export */   "TextDocumentItem": () => /* binding */ TextDocumentItem,
/* harmony export */   "MarkupKind": () => /* binding */ MarkupKind,
/* harmony export */   "MarkupContent": () => /* binding */ MarkupContent,
/* harmony export */   "CompletionItemKind": () => /* binding */ CompletionItemKind,
/* harmony export */   "InsertTextFormat": () => /* binding */ InsertTextFormat,
/* harmony export */   "CompletionItemTag": () => /* binding */ CompletionItemTag,
/* harmony export */   "InsertReplaceEdit": () => /* binding */ InsertReplaceEdit,
/* harmony export */   "CompletionItem": () => /* binding */ CompletionItem,
/* harmony export */   "CompletionList": () => /* binding */ CompletionList,
/* harmony export */   "MarkedString": () => /* binding */ MarkedString,
/* harmony export */   "Hover": () => /* binding */ Hover,
/* harmony export */   "ParameterInformation": () => /* binding */ ParameterInformation,
/* harmony export */   "SignatureInformation": () => /* binding */ SignatureInformation,
/* harmony export */   "DocumentHighlightKind": () => /* binding */ DocumentHighlightKind,
/* harmony export */   "DocumentHighlight": () => /* binding */ DocumentHighlight,
/* harmony export */   "SymbolKind": () => /* binding */ SymbolKind,
/* harmony export */   "SymbolTag": () => /* binding */ SymbolTag,
/* harmony export */   "SymbolInformation": () => /* binding */ SymbolInformation,
/* harmony export */   "DocumentSymbol": () => /* binding */ DocumentSymbol,
/* harmony export */   "CodeActionKind": () => /* binding */ CodeActionKind,
/* harmony export */   "CodeActionContext": () => /* binding */ CodeActionContext,
/* harmony export */   "CodeAction": () => /* binding */ CodeAction,
/* harmony export */   "CodeLens": () => /* binding */ CodeLens,
/* harmony export */   "FormattingOptions": () => /* binding */ FormattingOptions,
/* harmony export */   "DocumentLink": () => /* binding */ DocumentLink,
/* harmony export */   "SelectionRange": () => /* binding */ SelectionRange,
/* harmony export */   "EOL": () => /* binding */ EOL,
/* harmony export */   "TextDocument": () => /* binding */ TextDocument
/* harmony export */ });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

/**
 * The Position namespace provides helper functions to work with
 * [Position](#Position) literals.
 */
var Position;
(function (Position) {
    /**
     * Creates a new Position literal from the given line and character.
     * @param line The position's line.
     * @param character The position's character.
     */
    function create(line, character) {
        return { line: line, character: character };
    }
    Position.create = create;
    /**
     * Checks whether the given liternal conforms to the [Position](#Position) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.number(candidate.line) && Is.number(candidate.character);
    }
    Position.is = is;
})(Position || (Position = {}));
/**
 * The Range namespace provides helper functions to work with
 * [Range](#Range) literals.
 */
var Range;
(function (Range) {
    function create(one, two, three, four) {
        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {
            return { start: Position.create(one, two), end: Position.create(three, four) };
        }
        else if (Position.is(one) && Position.is(two)) {
            return { start: one, end: two };
        }
        else {
            throw new Error("Range#create called with invalid arguments[" + one + ", " + two + ", " + three + ", " + four + "]");
        }
    }
    Range.create = create;
    /**
     * Checks whether the given literal conforms to the [Range](#Range) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
    }
    Range.is = is;
})(Range || (Range = {}));
/**
 * The Location namespace provides helper functions to work with
 * [Location](#Location) literals.
 */
var Location;
(function (Location) {
    /**
     * Creates a Location literal.
     * @param uri The location's uri.
     * @param range The location's range.
     */
    function create(uri, range) {
        return { uri: uri, range: range };
    }
    Location.create = create;
    /**
     * Checks whether the given literal conforms to the [Location](#Location) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
    }
    Location.is = is;
})(Location || (Location = {}));
/**
 * The LocationLink namespace provides helper functions to work with
 * [LocationLink](#LocationLink) literals.
 */
var LocationLink;
(function (LocationLink) {
    /**
     * Creates a LocationLink literal.
     * @param targetUri The definition's uri.
     * @param targetRange The full range of the definition.
     * @param targetSelectionRange The span of the symbol definition at the target.
     * @param originSelectionRange The span of the symbol being defined in the originating source file.
     */
    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
        return { targetUri: targetUri, targetRange: targetRange, targetSelectionRange: targetSelectionRange, originSelectionRange: originSelectionRange };
    }
    LocationLink.create = create;
    /**
     * Checks whether the given literal conforms to the [LocationLink](#LocationLink) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)
            && (Range.is(candidate.targetSelectionRange) || Is.undefined(candidate.targetSelectionRange))
            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
    }
    LocationLink.is = is;
})(LocationLink || (LocationLink = {}));
/**
 * The Color namespace provides helper functions to work with
 * [Color](#Color) literals.
 */
var Color;
(function (Color) {
    /**
     * Creates a new Color literal.
     */
    function create(red, green, blue, alpha) {
        return {
            red: red,
            green: green,
            blue: blue,
            alpha: alpha,
        };
    }
    Color.create = create;
    /**
     * Checks whether the given literal conforms to the [Color](#Color) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.number(candidate.red)
            && Is.number(candidate.green)
            && Is.number(candidate.blue)
            && Is.number(candidate.alpha);
    }
    Color.is = is;
})(Color || (Color = {}));
/**
 * The ColorInformation namespace provides helper functions to work with
 * [ColorInformation](#ColorInformation) literals.
 */
var ColorInformation;
(function (ColorInformation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(range, color) {
        return {
            range: range,
            color: color,
        };
    }
    ColorInformation.create = create;
    /**
     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.
     */
    function is(value) {
        var candidate = value;
        return Range.is(candidate.range) && Color.is(candidate.color);
    }
    ColorInformation.is = is;
})(ColorInformation || (ColorInformation = {}));
/**
 * The Color namespace provides helper functions to work with
 * [ColorPresentation](#ColorPresentation) literals.
 */
var ColorPresentation;
(function (ColorPresentation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(label, textEdit, additionalTextEdits) {
        return {
            label: label,
            textEdit: textEdit,
            additionalTextEdits: additionalTextEdits,
        };
    }
    ColorPresentation.create = create;
    /**
     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.string(candidate.label)
            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))
            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
    }
    ColorPresentation.is = is;
})(ColorPresentation || (ColorPresentation = {}));
/**
 * Enum of known range kinds
 */
var FoldingRangeKind;
(function (FoldingRangeKind) {
    /**
     * Folding range for a comment
     */
    FoldingRangeKind["Comment"] = "comment";
    /**
     * Folding range for a imports or includes
     */
    FoldingRangeKind["Imports"] = "imports";
    /**
     * Folding range for a region (e.g. `#region`)
     */
    FoldingRangeKind["Region"] = "region";
})(FoldingRangeKind || (FoldingRangeKind = {}));
/**
 * The folding range namespace provides helper functions to work with
 * [FoldingRange](#FoldingRange) literals.
 */
var FoldingRange;
(function (FoldingRange) {
    /**
     * Creates a new FoldingRange literal.
     */
    function create(startLine, endLine, startCharacter, endCharacter, kind) {
        var result = {
            startLine: startLine,
            endLine: endLine
        };
        if (Is.defined(startCharacter)) {
            result.startCharacter = startCharacter;
        }
        if (Is.defined(endCharacter)) {
            result.endCharacter = endCharacter;
        }
        if (Is.defined(kind)) {
            result.kind = kind;
        }
        return result;
    }
    FoldingRange.create = create;
    /**
     * Checks whether the given literal conforms to the [FoldingRange](#FoldingRange) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.number(candidate.startLine) && Is.number(candidate.startLine)
            && (Is.undefined(candidate.startCharacter) || Is.number(candidate.startCharacter))
            && (Is.undefined(candidate.endCharacter) || Is.number(candidate.endCharacter))
            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
    }
    FoldingRange.is = is;
})(FoldingRange || (FoldingRange = {}));
/**
 * The DiagnosticRelatedInformation namespace provides helper functions to work with
 * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.
 */
var DiagnosticRelatedInformation;
(function (DiagnosticRelatedInformation) {
    /**
     * Creates a new DiagnosticRelatedInformation literal.
     */
    function create(location, message) {
        return {
            location: location,
            message: message
        };
    }
    DiagnosticRelatedInformation.create = create;
    /**
     * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
    }
    DiagnosticRelatedInformation.is = is;
})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
/**
 * The diagnostic's severity.
 */
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    /**
     * Reports an error.
     */
    DiagnosticSeverity.Error = 1;
    /**
     * Reports a warning.
     */
    DiagnosticSeverity.Warning = 2;
    /**
     * Reports an information.
     */
    DiagnosticSeverity.Information = 3;
    /**
     * Reports a hint.
     */
    DiagnosticSeverity.Hint = 4;
})(DiagnosticSeverity || (DiagnosticSeverity = {}));
/**
 * The diagnostic tags.
 *
 * @since 3.15.0
 */
var DiagnosticTag;
(function (DiagnosticTag) {
    /**
     * Unused or unnecessary code.
     *
     * Clients are allowed to render diagnostics with this tag faded out instead of having
     * an error squiggle.
     */
    DiagnosticTag.Unnecessary = 1;
    /**
     * Deprecated or obsolete code.
     *
     * Clients are allowed to rendered diagnostics with this tag strike through.
     */
    DiagnosticTag.Deprecated = 2;
})(DiagnosticTag || (DiagnosticTag = {}));
/**
 * The DiagnosticCode namespace provides functions to deal with complex diagnostic codes.
 *
 * @since 3.16.0 - Proposed state
 */
var DiagnosticCode;
(function (DiagnosticCode) {
    /**
     * Checks whether the given liternal conforms to the [DiagnosticCode](#DiagnosticCode) interface.
     */
    function is(value) {
        var candidate = value;
        return candidate !== undefined && candidate !== null && (Is.number(candidate.value) || Is.string(candidate.value)) && Is.string(candidate.target);
    }
    DiagnosticCode.is = is;
})(DiagnosticCode || (DiagnosticCode = {}));
/**
 * The Diagnostic namespace provides helper functions to work with
 * [Diagnostic](#Diagnostic) literals.
 */
var Diagnostic;
(function (Diagnostic) {
    /**
     * Creates a new Diagnostic literal.
     */
    function create(range, message, severity, code, source, relatedInformation) {
        var result = { range: range, message: message };
        if (Is.defined(severity)) {
            result.severity = severity;
        }
        if (Is.defined(code)) {
            result.code = code;
        }
        if (Is.defined(source)) {
            result.source = source;
        }
        if (Is.defined(relatedInformation)) {
            result.relatedInformation = relatedInformation;
        }
        return result;
    }
    Diagnostic.create = create;
    /**
     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate)
            && Range.is(candidate.range)
            && Is.string(candidate.message)
            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))
            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))
            && (Is.string(candidate.source) || Is.undefined(candidate.source))
            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
    }
    Diagnostic.is = is;
})(Diagnostic || (Diagnostic = {}));
/**
 * The Command namespace provides helper functions to work with
 * [Command](#Command) literals.
 */
var Command;
(function (Command) {
    /**
     * Creates a new Command literal.
     */
    function create(title, command) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var result = { title: title, command: command };
        if (Is.defined(args) && args.length > 0) {
            result.arguments = args;
        }
        return result;
    }
    Command.create = create;
    /**
     * Checks whether the given literal conforms to the [Command](#Command) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
    }
    Command.is = is;
})(Command || (Command = {}));
/**
 * The TextEdit namespace provides helper function to create replace,
 * insert and delete edits more easily.
 */
var TextEdit;
(function (TextEdit) {
    /**
     * Creates a replace text edit.
     * @param range The range of text to be replaced.
     * @param newText The new text.
     */
    function replace(range, newText) {
        return { range: range, newText: newText };
    }
    TextEdit.replace = replace;
    /**
     * Creates a insert text edit.
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     */
    function insert(position, newText) {
        return { range: { start: position, end: position }, newText: newText };
    }
    TextEdit.insert = insert;
    /**
     * Creates a delete text edit.
     * @param range The range of text to be deleted.
     */
    function del(range) {
        return { range: range, newText: '' };
    }
    TextEdit.del = del;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate)
            && Is.string(candidate.newText)
            && Range.is(candidate.range);
    }
    TextEdit.is = is;
})(TextEdit || (TextEdit = {}));
/**
 * The TextDocumentEdit namespace provides helper function to create
 * an edit that manipulates a text document.
 */
var TextDocumentEdit;
(function (TextDocumentEdit) {
    /**
     * Creates a new `TextDocumentEdit`
     */
    function create(textDocument, edits) {
        return { textDocument: textDocument, edits: edits };
    }
    TextDocumentEdit.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate)
            && VersionedTextDocumentIdentifier.is(candidate.textDocument)
            && Array.isArray(candidate.edits);
    }
    TextDocumentEdit.is = is;
})(TextDocumentEdit || (TextDocumentEdit = {}));
var CreateFile;
(function (CreateFile) {
    function create(uri, options) {
        var result = {
            kind: 'create',
            uri: uri
        };
        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
            result.options = options;
        }
        return result;
    }
    CreateFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) &&
            (candidate.options === void 0 ||
                ((candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))));
    }
    CreateFile.is = is;
})(CreateFile || (CreateFile = {}));
var RenameFile;
(function (RenameFile) {
    function create(oldUri, newUri, options) {
        var result = {
            kind: 'rename',
            oldUri: oldUri,
            newUri: newUri
        };
        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
            result.options = options;
        }
        return result;
    }
    RenameFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) &&
            (candidate.options === void 0 ||
                ((candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))));
    }
    RenameFile.is = is;
})(RenameFile || (RenameFile = {}));
var DeleteFile;
(function (DeleteFile) {
    function create(uri, options) {
        var result = {
            kind: 'delete',
            uri: uri
        };
        if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {
            result.options = options;
        }
        return result;
    }
    DeleteFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) &&
            (candidate.options === void 0 ||
                ((candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))));
    }
    DeleteFile.is = is;
})(DeleteFile || (DeleteFile = {}));
var WorkspaceEdit;
(function (WorkspaceEdit) {
    function is(value) {
        var candidate = value;
        return candidate &&
            (candidate.changes !== void 0 || candidate.documentChanges !== void 0) &&
            (candidate.documentChanges === void 0 || candidate.documentChanges.every(function (change) {
                if (Is.string(change.kind)) {
                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
                }
                else {
                    return TextDocumentEdit.is(change);
                }
            }));
    }
    WorkspaceEdit.is = is;
})(WorkspaceEdit || (WorkspaceEdit = {}));
var TextEditChangeImpl = /** @class */ (function () {
    function TextEditChangeImpl(edits) {
        this.edits = edits;
    }
    TextEditChangeImpl.prototype.insert = function (position, newText) {
        this.edits.push(TextEdit.insert(position, newText));
    };
    TextEditChangeImpl.prototype.replace = function (range, newText) {
        this.edits.push(TextEdit.replace(range, newText));
    };
    TextEditChangeImpl.prototype.delete = function (range) {
        this.edits.push(TextEdit.del(range));
    };
    TextEditChangeImpl.prototype.add = function (edit) {
        this.edits.push(edit);
    };
    TextEditChangeImpl.prototype.all = function () {
        return this.edits;
    };
    TextEditChangeImpl.prototype.clear = function () {
        this.edits.splice(0, this.edits.length);
    };
    return TextEditChangeImpl;
}());
/**
 * A workspace change helps constructing changes to a workspace.
 */
var WorkspaceChange = /** @class */ (function () {
    function WorkspaceChange(workspaceEdit) {
        var _this = this;
        this._textEditChanges = Object.create(null);
        if (workspaceEdit) {
            this._workspaceEdit = workspaceEdit;
            if (workspaceEdit.documentChanges) {
                workspaceEdit.documentChanges.forEach(function (change) {
                    if (TextDocumentEdit.is(change)) {
                        var textEditChange = new TextEditChangeImpl(change.edits);
                        _this._textEditChanges[change.textDocument.uri] = textEditChange;
                    }
                });
            }
            else if (workspaceEdit.changes) {
                Object.keys(workspaceEdit.changes).forEach(function (key) {
                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                    _this._textEditChanges[key] = textEditChange;
                });
            }
        }
    }
    Object.defineProperty(WorkspaceChange.prototype, "edit", {
        /**
         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal
         * use to be returned from a workspace edit operation like rename.
         */
        get: function () {
            if (this._workspaceEdit === undefined) {
                return { documentChanges: [] };
            }
            return this._workspaceEdit;
        },
        enumerable: true,
        configurable: true
    });
    WorkspaceChange.prototype.getTextEditChange = function (key) {
        if (VersionedTextDocumentIdentifier.is(key)) {
            if (!this._workspaceEdit) {
                this._workspaceEdit = {
                    documentChanges: []
                };
            }
            if (!this._workspaceEdit.documentChanges) {
                throw new Error('Workspace edit is not configured for document changes.');
            }
            var textDocument = key;
            var result = this._textEditChanges[textDocument.uri];
            if (!result) {
                var edits = [];
                var textDocumentEdit = {
                    textDocument: textDocument,
                    edits: edits
                };
                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[textDocument.uri] = result;
            }
            return result;
        }
        else {
            if (!this._workspaceEdit) {
                this._workspaceEdit = {
                    changes: Object.create(null)
                };
            }
            if (!this._workspaceEdit.changes) {
                throw new Error('Workspace edit is not configured for normal text edit changes.');
            }
            var result = this._textEditChanges[key];
            if (!result) {
                var edits = [];
                this._workspaceEdit.changes[key] = edits;
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[key] = result;
            }
            return result;
        }
    };
    WorkspaceChange.prototype.createFile = function (uri, options) {
        this.checkDocumentChanges();
        this._workspaceEdit.documentChanges.push(CreateFile.create(uri, options));
    };
    WorkspaceChange.prototype.renameFile = function (oldUri, newUri, options) {
        this.checkDocumentChanges();
        this._workspaceEdit.documentChanges.push(RenameFile.create(oldUri, newUri, options));
    };
    WorkspaceChange.prototype.deleteFile = function (uri, options) {
        this.checkDocumentChanges();
        this._workspaceEdit.documentChanges.push(DeleteFile.create(uri, options));
    };
    WorkspaceChange.prototype.checkDocumentChanges = function () {
        if (!this._workspaceEdit || !this._workspaceEdit.documentChanges) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
    };
    return WorkspaceChange;
}());

/**
 * The TextDocumentIdentifier namespace provides helper functions to work with
 * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.
 */
var TextDocumentIdentifier;
(function (TextDocumentIdentifier) {
    /**
     * Creates a new TextDocumentIdentifier literal.
     * @param uri The document's uri.
     */
    function create(uri) {
        return { uri: uri };
    }
    TextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri);
    }
    TextDocumentIdentifier.is = is;
})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
/**
 * The VersionedTextDocumentIdentifier namespace provides helper functions to work with
 * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.
 */
var VersionedTextDocumentIdentifier;
(function (VersionedTextDocumentIdentifier) {
    /**
     * Creates a new VersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param uri The document's text.
     */
    function create(uri, version) {
        return { uri: uri, version: version };
    }
    VersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.number(candidate.version));
    }
    VersionedTextDocumentIdentifier.is = is;
})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
/**
 * The TextDocumentItem namespace provides helper functions to work with
 * [TextDocumentItem](#TextDocumentItem) literals.
 */
var TextDocumentItem;
(function (TextDocumentItem) {
    /**
     * Creates a new TextDocumentItem literal.
     * @param uri The document's uri.
     * @param languageId The document's language identifier.
     * @param version The document's version number.
     * @param text The document's text.
     */
    function create(uri, languageId, version, text) {
        return { uri: uri, languageId: languageId, version: version, text: text };
    }
    TextDocumentItem.create = create;
    /**
     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);
    }
    TextDocumentItem.is = is;
})(TextDocumentItem || (TextDocumentItem = {}));
/**
 * Describes the content type that a client supports in various
 * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
 *
 * Please note that `MarkupKinds` must not start with a `$`. This kinds
 * are reserved for internal usage.
 */
var MarkupKind;
(function (MarkupKind) {
    /**
     * Plain text is supported as a content format
     */
    MarkupKind.PlainText = 'plaintext';
    /**
     * Markdown is supported as a content format
     */
    MarkupKind.Markdown = 'markdown';
})(MarkupKind || (MarkupKind = {}));
(function (MarkupKind) {
    /**
     * Checks whether the given value is a value of the [MarkupKind](#MarkupKind) type.
     */
    function is(value) {
        var candidate = value;
        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;
    }
    MarkupKind.is = is;
})(MarkupKind || (MarkupKind = {}));
var MarkupContent;
(function (MarkupContent) {
    /**
     * Checks whether the given value conforms to the [MarkupContent](#MarkupContent) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
    }
    MarkupContent.is = is;
})(MarkupContent || (MarkupContent = {}));
/**
 * The kind of a completion entry.
 */
var CompletionItemKind;
(function (CompletionItemKind) {
    CompletionItemKind.Text = 1;
    CompletionItemKind.Method = 2;
    CompletionItemKind.Function = 3;
    CompletionItemKind.Constructor = 4;
    CompletionItemKind.Field = 5;
    CompletionItemKind.Variable = 6;
    CompletionItemKind.Class = 7;
    CompletionItemKind.Interface = 8;
    CompletionItemKind.Module = 9;
    CompletionItemKind.Property = 10;
    CompletionItemKind.Unit = 11;
    CompletionItemKind.Value = 12;
    CompletionItemKind.Enum = 13;
    CompletionItemKind.Keyword = 14;
    CompletionItemKind.Snippet = 15;
    CompletionItemKind.Color = 16;
    CompletionItemKind.File = 17;
    CompletionItemKind.Reference = 18;
    CompletionItemKind.Folder = 19;
    CompletionItemKind.EnumMember = 20;
    CompletionItemKind.Constant = 21;
    CompletionItemKind.Struct = 22;
    CompletionItemKind.Event = 23;
    CompletionItemKind.Operator = 24;
    CompletionItemKind.TypeParameter = 25;
})(CompletionItemKind || (CompletionItemKind = {}));
/**
 * Defines whether the insert text in a completion item should be interpreted as
 * plain text or a snippet.
 */
var InsertTextFormat;
(function (InsertTextFormat) {
    /**
     * The primary text to be inserted is treated as a plain string.
     */
    InsertTextFormat.PlainText = 1;
    /**
     * The primary text to be inserted is treated as a snippet.
     *
     * A snippet can define tab stops and placeholders with `$1`, `$2`
     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
     * the end of the snippet. Placeholders with equal identifiers are linked,
     * that is typing in one will update others too.
     *
     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
     */
    InsertTextFormat.Snippet = 2;
})(InsertTextFormat || (InsertTextFormat = {}));
/**
 * Completion item tags are extra annotations that tweak the rendering of a completion
 * item.
 *
 * @since 3.15.0
 */
var CompletionItemTag;
(function (CompletionItemTag) {
    /**
     * Render a completion as obsolete, usually using a strike-out.
     */
    CompletionItemTag.Deprecated = 1;
})(CompletionItemTag || (CompletionItemTag = {}));
/**
 * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.
 *
 * @since 3.16.0 - Proposed state
 */
var InsertReplaceEdit;
(function (InsertReplaceEdit) {
    /**
     * Creates a new insert / replace edit
     */
    function create(newText, insert, replace) {
        return { newText: newText, insert: insert, replace: replace };
    }
    InsertReplaceEdit.create = create;
    /**
     * Checks whether the given liternal conforms to the [InsertReplaceEdit](#InsertReplaceEdit) interface.
     */
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
    }
    InsertReplaceEdit.is = is;
})(InsertReplaceEdit || (InsertReplaceEdit = {}));
/**
 * The CompletionItem namespace provides functions to deal with
 * completion items.
 */
var CompletionItem;
(function (CompletionItem) {
    /**
     * Create a completion item and seed it with a label.
     * @param label The completion item's label
     */
    function create(label) {
        return { label: label };
    }
    CompletionItem.create = create;
})(CompletionItem || (CompletionItem = {}));
/**
 * The CompletionList namespace provides functions to deal with
 * completion lists.
 */
var CompletionList;
(function (CompletionList) {
    /**
     * Creates a new completion list.
     *
     * @param items The completion items.
     * @param isIncomplete The list is not complete.
     */
    function create(items, isIncomplete) {
        return { items: items ? items : [], isIncomplete: !!isIncomplete };
    }
    CompletionList.create = create;
})(CompletionList || (CompletionList = {}));
var MarkedString;
(function (MarkedString) {
    /**
     * Creates a marked string from plain text.
     *
     * @param plainText The plain text.
     */
    function fromPlainText(plainText) {
        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    }
    MarkedString.fromPlainText = fromPlainText;
    /**
     * Checks whether the given value conforms to the [MarkedString](#MarkedString) type.
     */
    function is(value) {
        var candidate = value;
        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));
    }
    MarkedString.is = is;
})(MarkedString || (MarkedString = {}));
var Hover;
(function (Hover) {
    /**
     * Checks whether the given value conforms to the [Hover](#Hover) interface.
     */
    function is(value) {
        var candidate = value;
        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||
            MarkedString.is(candidate.contents) ||
            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));
    }
    Hover.is = is;
})(Hover || (Hover = {}));
/**
 * The ParameterInformation namespace provides helper functions to work with
 * [ParameterInformation](#ParameterInformation) literals.
 */
var ParameterInformation;
(function (ParameterInformation) {
    /**
     * Creates a new parameter information literal.
     *
     * @param label A label string.
     * @param documentation A doc string.
     */
    function create(label, documentation) {
        return documentation ? { label: label, documentation: documentation } : { label: label };
    }
    ParameterInformation.create = create;
})(ParameterInformation || (ParameterInformation = {}));
/**
 * The SignatureInformation namespace provides helper functions to work with
 * [SignatureInformation](#SignatureInformation) literals.
 */
var SignatureInformation;
(function (SignatureInformation) {
    function create(label, documentation) {
        var parameters = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            parameters[_i - 2] = arguments[_i];
        }
        var result = { label: label };
        if (Is.defined(documentation)) {
            result.documentation = documentation;
        }
        if (Is.defined(parameters)) {
            result.parameters = parameters;
        }
        else {
            result.parameters = [];
        }
        return result;
    }
    SignatureInformation.create = create;
})(SignatureInformation || (SignatureInformation = {}));
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind.Text = 1;
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind.Read = 2;
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind.Write = 3;
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
/**
 * DocumentHighlight namespace to provide helper functions to work with
 * [DocumentHighlight](#DocumentHighlight) literals.
 */
var DocumentHighlight;
(function (DocumentHighlight) {
    /**
     * Create a DocumentHighlight object.
     * @param range The range the highlight applies to.
     */
    function create(range, kind) {
        var result = { range: range };
        if (Is.number(kind)) {
            result.kind = kind;
        }
        return result;
    }
    DocumentHighlight.create = create;
})(DocumentHighlight || (DocumentHighlight = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind.File = 1;
    SymbolKind.Module = 2;
    SymbolKind.Namespace = 3;
    SymbolKind.Package = 4;
    SymbolKind.Class = 5;
    SymbolKind.Method = 6;
    SymbolKind.Property = 7;
    SymbolKind.Field = 8;
    SymbolKind.Constructor = 9;
    SymbolKind.Enum = 10;
    SymbolKind.Interface = 11;
    SymbolKind.Function = 12;
    SymbolKind.Variable = 13;
    SymbolKind.Constant = 14;
    SymbolKind.String = 15;
    SymbolKind.Number = 16;
    SymbolKind.Boolean = 17;
    SymbolKind.Array = 18;
    SymbolKind.Object = 19;
    SymbolKind.Key = 20;
    SymbolKind.Null = 21;
    SymbolKind.EnumMember = 22;
    SymbolKind.Struct = 23;
    SymbolKind.Event = 24;
    SymbolKind.Operator = 25;
    SymbolKind.TypeParameter = 26;
})(SymbolKind || (SymbolKind = {}));
/**
 * Symbol tags are extra annotations that tweak the rendering of a symbol.
 * @since 3.15
 */
var SymbolTag;
(function (SymbolTag) {
    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */
    SymbolTag.Deprecated = 1;
})(SymbolTag || (SymbolTag = {}));
var SymbolInformation;
(function (SymbolInformation) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the location of the symbol.
     * @param uri The resource of the location of symbol, defaults to the current document.
     * @param containerName The name of the symbol containing the symbol.
     */
    function create(name, kind, range, uri, containerName) {
        var result = {
            name: name,
            kind: kind,
            location: { uri: uri, range: range }
        };
        if (containerName) {
            result.containerName = containerName;
        }
        return result;
    }
    SymbolInformation.create = create;
})(SymbolInformation || (SymbolInformation = {}));
var DocumentSymbol;
(function (DocumentSymbol) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param detail The detail of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the symbol.
     * @param selectionRange The selectionRange of the symbol.
     * @param children Children of the symbol.
     */
    function create(name, detail, kind, range, selectionRange, children) {
        var result = {
            name: name,
            detail: detail,
            kind: kind,
            range: range,
            selectionRange: selectionRange
        };
        if (children !== void 0) {
            result.children = children;
        }
        return result;
    }
    DocumentSymbol.create = create;
    /**
     * Checks whether the given literal conforms to the [DocumentSymbol](#DocumentSymbol) interface.
     */
    function is(value) {
        var candidate = value;
        return candidate &&
            Is.string(candidate.name) && Is.number(candidate.kind) &&
            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&
            (candidate.detail === void 0 || Is.string(candidate.detail)) &&
            (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) &&
            (candidate.children === void 0 || Array.isArray(candidate.children)) &&
            (candidate.tags === void 0 || Array.isArray(candidate.tags));
    }
    DocumentSymbol.is = is;
})(DocumentSymbol || (DocumentSymbol = {}));
/**
 * A set of predefined code action kinds
 */
var CodeActionKind;
(function (CodeActionKind) {
    /**
     * Empty kind.
     */
    CodeActionKind.Empty = '';
    /**
     * Base kind for quickfix actions: 'quickfix'
     */
    CodeActionKind.QuickFix = 'quickfix';
    /**
     * Base kind for refactoring actions: 'refactor'
     */
    CodeActionKind.Refactor = 'refactor';
    /**
     * Base kind for refactoring extraction actions: 'refactor.extract'
     *
     * Example extract actions:
     *
     * - Extract method
     * - Extract function
     * - Extract variable
     * - Extract interface from class
     * - ...
     */
    CodeActionKind.RefactorExtract = 'refactor.extract';
    /**
     * Base kind for refactoring inline actions: 'refactor.inline'
     *
     * Example inline actions:
     *
     * - Inline function
     * - Inline variable
     * - Inline constant
     * - ...
     */
    CodeActionKind.RefactorInline = 'refactor.inline';
    /**
     * Base kind for refactoring rewrite actions: 'refactor.rewrite'
     *
     * Example rewrite actions:
     *
     * - Convert JavaScript function to class
     * - Add or remove parameter
     * - Encapsulate field
     * - Make method static
     * - Move method to base class
     * - ...
     */
    CodeActionKind.RefactorRewrite = 'refactor.rewrite';
    /**
     * Base kind for source actions: `source`
     *
     * Source code actions apply to the entire file.
     */
    CodeActionKind.Source = 'source';
    /**
     * Base kind for an organize imports source action: `source.organizeImports`
     */
    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';
    /**
     * Base kind for auto-fix source actions: `source.fixAll`.
     *
     * Fix all actions automatically fix errors that have a clear fix that do not require user input.
     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.
     *
     * @since 3.15.0
     */
    CodeActionKind.SourceFixAll = 'source.fixAll';
})(CodeActionKind || (CodeActionKind = {}));
/**
 * The CodeActionContext namespace provides helper functions to work with
 * [CodeActionContext](#CodeActionContext) literals.
 */
var CodeActionContext;
(function (CodeActionContext) {
    /**
     * Creates a new CodeActionContext literal.
     */
    function create(diagnostics, only) {
        var result = { diagnostics: diagnostics };
        if (only !== void 0 && only !== null) {
            result.only = only;
        }
        return result;
    }
    CodeActionContext.create = create;
    /**
     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string));
    }
    CodeActionContext.is = is;
})(CodeActionContext || (CodeActionContext = {}));
var CodeAction;
(function (CodeAction) {
    function create(title, commandOrEdit, kind) {
        var result = { title: title };
        if (Command.is(commandOrEdit)) {
            result.command = commandOrEdit;
        }
        else {
            result.edit = commandOrEdit;
        }
        if (kind !== void 0) {
            result.kind = kind;
        }
        return result;
    }
    CodeAction.create = create;
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.title) &&
            (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&
            (candidate.kind === void 0 || Is.string(candidate.kind)) &&
            (candidate.edit !== void 0 || candidate.command !== void 0) &&
            (candidate.command === void 0 || Command.is(candidate.command)) &&
            (candidate.isPreferred === void 0 || Is.boolean(candidate.isPreferred)) &&
            (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));
    }
    CodeAction.is = is;
})(CodeAction || (CodeAction = {}));
/**
 * The CodeLens namespace provides helper functions to work with
 * [CodeLens](#CodeLens) literals.
 */
var CodeLens;
(function (CodeLens) {
    /**
     * Creates a new CodeLens literal.
     */
    function create(range, data) {
        var result = { range: range };
        if (Is.defined(data)) {
            result.data = data;
        }
        return result;
    }
    CodeLens.create = create;
    /**
     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
    }
    CodeLens.is = is;
})(CodeLens || (CodeLens = {}));
/**
 * The FormattingOptions namespace provides helper functions to work with
 * [FormattingOptions](#FormattingOptions) literals.
 */
var FormattingOptions;
(function (FormattingOptions) {
    /**
     * Creates a new FormattingOptions literal.
     */
    function create(tabSize, insertSpaces) {
        return { tabSize: tabSize, insertSpaces: insertSpaces };
    }
    FormattingOptions.create = create;
    /**
     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
    }
    FormattingOptions.is = is;
})(FormattingOptions || (FormattingOptions = {}));
/**
 * The DocumentLink namespace provides helper functions to work with
 * [DocumentLink](#DocumentLink) literals.
 */
var DocumentLink;
(function (DocumentLink) {
    /**
     * Creates a new DocumentLink literal.
     */
    function create(range, target, data) {
        return { range: range, target: target, data: data };
    }
    DocumentLink.create = create;
    /**
     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
    }
    DocumentLink.is = is;
})(DocumentLink || (DocumentLink = {}));
/**
 * The SelectionRange namespace provides helper function to work with
 * SelectionRange literals.
 */
var SelectionRange;
(function (SelectionRange) {
    /**
     * Creates a new SelectionRange
     * @param range the range.
     * @param parent an optional parent.
     */
    function create(range, parent) {
        return { range: range, parent: parent };
    }
    SelectionRange.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));
    }
    SelectionRange.is = is;
})(SelectionRange || (SelectionRange = {}));
var EOL = ['\n', '\r\n', '\r'];
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new ITextDocument literal from the given uri and content.
     * @param uri The document's uri.
     * @param languageId  The document's language Id.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)
            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
    }
    TextDocument.is = is;
    function applyEdits(document, edits) {
        var text = document.getText();
        var sortedEdits = mergeSort(edits, function (a, b) {
            var diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        var lastModifiedOffset = text.length;
        for (var i = sortedEdits.length - 1; i >= 0; i--) {
            var e = sortedEdits[i];
            var startOffset = document.offsetAt(e.range.start);
            var endOffset = document.offsetAt(e.range.end);
            if (endOffset <= lastModifiedOffset) {
                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
            }
            else {
                throw new Error('Overlapping edit');
            }
            lastModifiedOffset = startOffset;
        }
        return text;
    }
    TextDocument.applyEdits = applyEdits;
    function mergeSort(data, compare) {
        if (data.length <= 1) {
            // sorted
            return data;
        }
        var p = (data.length / 2) | 0;
        var left = data.slice(0, p);
        var right = data.slice(p);
        mergeSort(left, compare);
        mergeSort(right, compare);
        var leftIdx = 0;
        var rightIdx = 0;
        var i = 0;
        while (leftIdx < left.length && rightIdx < right.length) {
            var ret = compare(left[leftIdx], right[rightIdx]);
            if (ret <= 0) {
                // smaller_equal -> take left to preserve order
                data[i++] = left[leftIdx++];
            }
            else {
                // greater -> take right
                data[i++] = right[rightIdx++];
            }
        }
        while (leftIdx < left.length) {
            data[i++] = left[leftIdx++];
        }
        while (rightIdx < right.length) {
            data[i++] = right[rightIdx++];
        }
        return data;
    }
})(TextDocument || (TextDocument = {}));
var FullTextDocument = /** @class */ (function () {
    function FullTextDocument(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    Object.defineProperty(FullTextDocument.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "languageId", {
        get: function () {
            return this._languageId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: true,
        configurable: true
    });
    FullTextDocument.prototype.getText = function (range) {
        if (range) {
            var start = this.offsetAt(range.start);
            var end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    };
    FullTextDocument.prototype.update = function (event, version) {
        this._content = event.text;
        this._version = version;
        this._lineOffsets = undefined;
    };
    FullTextDocument.prototype.getLineOffsets = function () {
        if (this._lineOffsets === undefined) {
            var lineOffsets = [];
            var text = this._content;
            var isLineStart = true;
            for (var i = 0; i < text.length; i++) {
                if (isLineStart) {
                    lineOffsets.push(i);
                    isLineStart = false;
                }
                var ch = text.charAt(i);
                isLineStart = (ch === '\r' || ch === '\n');
                if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
                    i++;
                }
            }
            if (isLineStart && text.length > 0) {
                lineOffsets.push(text.length);
            }
            this._lineOffsets = lineOffsets;
        }
        return this._lineOffsets;
    };
    FullTextDocument.prototype.positionAt = function (offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0, high = lineOffsets.length;
        if (high === 0) {
            return Position.create(0, offset);
        }
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        var line = low - 1;
        return Position.create(line, offset - lineOffsets[line]);
    };
    FullTextDocument.prototype.offsetAt = function (position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument.prototype, "lineCount", {
        get: function () {
            return this.getLineOffsets().length;
        },
        enumerable: true,
        configurable: true
    });
    return FullTextDocument;
}());
var Is;
(function (Is) {
    var toString = Object.prototype.toString;
    function defined(value) {
        return typeof value !== 'undefined';
    }
    Is.defined = defined;
    function undefined(value) {
        return typeof value === 'undefined';
    }
    Is.undefined = undefined;
    function boolean(value) {
        return value === true || value === false;
    }
    Is.boolean = boolean;
    function string(value) {
        return toString.call(value) === '[object String]';
    }
    Is.string = string;
    function number(value) {
        return toString.call(value) === '[object Number]';
    }
    Is.number = number;
    function func(value) {
        return toString.call(value) === '[object Function]';
    }
    Is.func = func;
    function objectLiteral(value) {
        // Strictly speaking class instances pass this check as well. Since the LSP
        // doesn't use classes we ignore this for now. If we do we need to add something
        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
        return value !== null && typeof value === 'object';
    }
    Is.objectLiteral = objectLiteral;
    function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
    }
    Is.typedArray = typedArray;
})(Is || (Is = {}));


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageService.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageService.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClientCapabilities": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.ClientCapabilities,
/* harmony export */   "CodeAction": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.CodeAction,
/* harmony export */   "CodeActionContext": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.CodeActionContext,
/* harmony export */   "CodeActionKind": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.CodeActionKind,
/* harmony export */   "CodeLens": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.CodeLens,
/* harmony export */   "Color": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.Color,
/* harmony export */   "ColorInformation": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.ColorInformation,
/* harmony export */   "ColorPresentation": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.ColorPresentation,
/* harmony export */   "Command": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.Command,
/* harmony export */   "CompletionItem": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.CompletionItem,
/* harmony export */   "CompletionItemKind": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.CompletionItemKind,
/* harmony export */   "CompletionItemTag": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.CompletionItemTag,
/* harmony export */   "CompletionList": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.CompletionList,
/* harmony export */   "CreateFile": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.CreateFile,
/* harmony export */   "DeleteFile": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.DeleteFile,
/* harmony export */   "Diagnostic": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.Diagnostic,
/* harmony export */   "DiagnosticCode": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.DiagnosticCode,
/* harmony export */   "DiagnosticRelatedInformation": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.DiagnosticRelatedInformation,
/* harmony export */   "DiagnosticSeverity": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.DiagnosticSeverity,
/* harmony export */   "DiagnosticTag": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.DiagnosticTag,
/* harmony export */   "DocumentHighlight": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.DocumentHighlight,
/* harmony export */   "DocumentHighlightKind": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.DocumentHighlightKind,
/* harmony export */   "DocumentLink": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.DocumentLink,
/* harmony export */   "DocumentSymbol": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.DocumentSymbol,
/* harmony export */   "EOL": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.EOL,
/* harmony export */   "FileType": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.FileType,
/* harmony export */   "FoldingRange": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.FoldingRange,
/* harmony export */   "FoldingRangeKind": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.FoldingRangeKind,
/* harmony export */   "FormattingOptions": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.FormattingOptions,
/* harmony export */   "Hover": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.Hover,
/* harmony export */   "InsertReplaceEdit": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.InsertReplaceEdit,
/* harmony export */   "InsertTextFormat": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.InsertTextFormat,
/* harmony export */   "Location": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.Location,
/* harmony export */   "LocationLink": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.LocationLink,
/* harmony export */   "MarkedString": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.MarkedString,
/* harmony export */   "MarkupContent": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.MarkupContent,
/* harmony export */   "MarkupKind": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.MarkupKind,
/* harmony export */   "ParameterInformation": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.ParameterInformation,
/* harmony export */   "Position": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.Position,
/* harmony export */   "Range": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.Range,
/* harmony export */   "RenameFile": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.RenameFile,
/* harmony export */   "SelectionRange": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.SelectionRange,
/* harmony export */   "SignatureInformation": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.SignatureInformation,
/* harmony export */   "SymbolInformation": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.SymbolInformation,
/* harmony export */   "SymbolKind": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.SymbolKind,
/* harmony export */   "SymbolTag": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.SymbolTag,
/* harmony export */   "TextDocument": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.TextDocument,
/* harmony export */   "TextDocumentEdit": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.TextDocumentEdit,
/* harmony export */   "TextDocumentIdentifier": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.TextDocumentIdentifier,
/* harmony export */   "TextDocumentItem": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.TextDocumentItem,
/* harmony export */   "TextEdit": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.TextEdit,
/* harmony export */   "VersionedTextDocumentIdentifier": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.VersionedTextDocumentIdentifier,
/* harmony export */   "WorkspaceChange": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.WorkspaceChange,
/* harmony export */   "WorkspaceEdit": () => /* reexport safe */ _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__.WorkspaceEdit,
/* harmony export */   "getDefaultCSSDataProvider": () => /* binding */ getDefaultCSSDataProvider,
/* harmony export */   "newCSSDataProvider": () => /* binding */ newCSSDataProvider,
/* harmony export */   "getCSSLanguageService": () => /* binding */ getCSSLanguageService,
/* harmony export */   "getSCSSLanguageService": () => /* binding */ getSCSSLanguageService,
/* harmony export */   "getLESSLanguageService": () => /* binding */ getLESSLanguageService
/* harmony export */ });
/* harmony import */ var _parser_cssParser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser/cssParser.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssParser.js");
/* harmony import */ var _services_cssCompletion_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/cssCompletion.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssCompletion.js");
/* harmony import */ var _services_cssHover_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/cssHover.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssHover.js");
/* harmony import */ var _services_cssNavigation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/cssNavigation.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssNavigation.js");
/* harmony import */ var _services_cssCodeActions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/cssCodeActions.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssCodeActions.js");
/* harmony import */ var _services_cssValidation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/cssValidation.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssValidation.js");
/* harmony import */ var _parser_scssParser_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parser/scssParser.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/scssParser.js");
/* harmony import */ var _services_scssCompletion_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./services/scssCompletion.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/scssCompletion.js");
/* harmony import */ var _parser_lessParser_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parser/lessParser.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/lessParser.js");
/* harmony import */ var _services_lessCompletion_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./services/lessCompletion.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lessCompletion.js");
/* harmony import */ var _services_cssFolding_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./services/cssFolding.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssFolding.js");
/* harmony import */ var _languageFacts_dataManager_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./languageFacts/dataManager.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/dataManager.js");
/* harmony import */ var _languageFacts_dataProvider_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./languageFacts/dataProvider.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/dataProvider.js");
/* harmony import */ var _services_cssSelectionRange_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./services/cssSelectionRange.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssSelectionRange.js");
/* harmony import */ var _services_scssNavigation_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./services/scssNavigation.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/scssNavigation.js");
/* harmony import */ var _data_webCustomData_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./data/webCustomData.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/data/webCustomData.js");
/* harmony import */ var _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./cssLanguageTypes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageTypes.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


















function getDefaultCSSDataProvider() {
    return newCSSDataProvider(_data_webCustomData_js__WEBPACK_IMPORTED_MODULE_15__.cssData);
}
function newCSSDataProvider(data) {
    return new _languageFacts_dataProvider_js__WEBPACK_IMPORTED_MODULE_12__.CSSDataProvider(data);
}
function createFacade(parser, completion, hover, navigation, codeActions, validation, cssDataManager) {
    return {
        configure: function (settings) {
            validation.configure(settings);
            completion.configure(settings);
        },
        setDataProviders: cssDataManager.setDataProviders.bind(cssDataManager),
        doValidation: validation.doValidation.bind(validation),
        parseStylesheet: parser.parseStylesheet.bind(parser),
        doComplete: completion.doComplete.bind(completion),
        doComplete2: completion.doComplete2.bind(completion),
        setCompletionParticipants: completion.setCompletionParticipants.bind(completion),
        doHover: hover.doHover.bind(hover),
        findDefinition: navigation.findDefinition.bind(navigation),
        findReferences: navigation.findReferences.bind(navigation),
        findDocumentHighlights: navigation.findDocumentHighlights.bind(navigation),
        findDocumentLinks: navigation.findDocumentLinks.bind(navigation),
        findDocumentLinks2: navigation.findDocumentLinks2.bind(navigation),
        findDocumentSymbols: navigation.findDocumentSymbols.bind(navigation),
        doCodeActions: codeActions.doCodeActions.bind(codeActions),
        doCodeActions2: codeActions.doCodeActions2.bind(codeActions),
        findColorSymbols: function (d, s) { return navigation.findDocumentColors(d, s).map(function (s) { return s.range; }); },
        findDocumentColors: navigation.findDocumentColors.bind(navigation),
        getColorPresentations: navigation.getColorPresentations.bind(navigation),
        doRename: navigation.doRename.bind(navigation),
        getFoldingRanges: _services_cssFolding_js__WEBPACK_IMPORTED_MODULE_10__.getFoldingRanges,
        getSelectionRanges: _services_cssSelectionRange_js__WEBPACK_IMPORTED_MODULE_13__.getSelectionRanges
    };
}
var defaultLanguageServiceOptions = {};
function getCSSLanguageService(options) {
    if (options === void 0) { options = defaultLanguageServiceOptions; }
    var cssDataManager = new _languageFacts_dataManager_js__WEBPACK_IMPORTED_MODULE_11__.CSSDataManager(options);
    return createFacade(new _parser_cssParser_js__WEBPACK_IMPORTED_MODULE_0__.Parser(), new _services_cssCompletion_js__WEBPACK_IMPORTED_MODULE_1__.CSSCompletion(null, options, cssDataManager), new _services_cssHover_js__WEBPACK_IMPORTED_MODULE_2__.CSSHover(options && options.clientCapabilities, cssDataManager), new _services_cssNavigation_js__WEBPACK_IMPORTED_MODULE_3__.CSSNavigation(options && options.fileSystemProvider), new _services_cssCodeActions_js__WEBPACK_IMPORTED_MODULE_4__.CSSCodeActions(cssDataManager), new _services_cssValidation_js__WEBPACK_IMPORTED_MODULE_5__.CSSValidation(cssDataManager), cssDataManager);
}
function getSCSSLanguageService(options) {
    if (options === void 0) { options = defaultLanguageServiceOptions; }
    var cssDataManager = new _languageFacts_dataManager_js__WEBPACK_IMPORTED_MODULE_11__.CSSDataManager(options);
    return createFacade(new _parser_scssParser_js__WEBPACK_IMPORTED_MODULE_6__.SCSSParser(), new _services_scssCompletion_js__WEBPACK_IMPORTED_MODULE_7__.SCSSCompletion(options, cssDataManager), new _services_cssHover_js__WEBPACK_IMPORTED_MODULE_2__.CSSHover(options && options.clientCapabilities, cssDataManager), new _services_scssNavigation_js__WEBPACK_IMPORTED_MODULE_14__.SCSSNavigation(options && options.fileSystemProvider), new _services_cssCodeActions_js__WEBPACK_IMPORTED_MODULE_4__.CSSCodeActions(cssDataManager), new _services_cssValidation_js__WEBPACK_IMPORTED_MODULE_5__.CSSValidation(cssDataManager), cssDataManager);
}
function getLESSLanguageService(options) {
    if (options === void 0) { options = defaultLanguageServiceOptions; }
    var cssDataManager = new _languageFacts_dataManager_js__WEBPACK_IMPORTED_MODULE_11__.CSSDataManager(options);
    return createFacade(new _parser_lessParser_js__WEBPACK_IMPORTED_MODULE_8__.LESSParser(), new _services_lessCompletion_js__WEBPACK_IMPORTED_MODULE_9__.LESSCompletion(options, cssDataManager), new _services_cssHover_js__WEBPACK_IMPORTED_MODULE_2__.CSSHover(options && options.clientCapabilities, cssDataManager), new _services_cssNavigation_js__WEBPACK_IMPORTED_MODULE_3__.CSSNavigation(options && options.fileSystemProvider), new _services_cssCodeActions_js__WEBPACK_IMPORTED_MODULE_4__.CSSCodeActions(cssDataManager), new _services_cssValidation_js__WEBPACK_IMPORTED_MODULE_5__.CSSValidation(cssDataManager), cssDataManager);
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageTypes.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageTypes.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextDocument": () => /* reexport safe */ _vscode_languageserver_textdocument_lib_esm_main_js__WEBPACK_IMPORTED_MODULE_1__.TextDocument,
/* harmony export */   "CodeAction": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.CodeAction,
/* harmony export */   "CodeActionContext": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.CodeActionContext,
/* harmony export */   "CodeActionKind": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.CodeActionKind,
/* harmony export */   "CodeLens": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.CodeLens,
/* harmony export */   "Color": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.Color,
/* harmony export */   "ColorInformation": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.ColorInformation,
/* harmony export */   "ColorPresentation": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.ColorPresentation,
/* harmony export */   "Command": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.Command,
/* harmony export */   "CompletionItem": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItem,
/* harmony export */   "CompletionItemKind": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind,
/* harmony export */   "CompletionItemTag": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemTag,
/* harmony export */   "CompletionList": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.CompletionList,
/* harmony export */   "CreateFile": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.CreateFile,
/* harmony export */   "DeleteFile": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.DeleteFile,
/* harmony export */   "Diagnostic": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.Diagnostic,
/* harmony export */   "DiagnosticCode": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.DiagnosticCode,
/* harmony export */   "DiagnosticRelatedInformation": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.DiagnosticRelatedInformation,
/* harmony export */   "DiagnosticSeverity": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.DiagnosticSeverity,
/* harmony export */   "DiagnosticTag": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.DiagnosticTag,
/* harmony export */   "DocumentHighlight": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlight,
/* harmony export */   "DocumentHighlightKind": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind,
/* harmony export */   "DocumentLink": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.DocumentLink,
/* harmony export */   "DocumentSymbol": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.DocumentSymbol,
/* harmony export */   "EOL": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.EOL,
/* harmony export */   "FoldingRange": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.FoldingRange,
/* harmony export */   "FoldingRangeKind": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.FoldingRangeKind,
/* harmony export */   "FormattingOptions": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.FormattingOptions,
/* harmony export */   "Hover": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.Hover,
/* harmony export */   "InsertReplaceEdit": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.InsertReplaceEdit,
/* harmony export */   "InsertTextFormat": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat,
/* harmony export */   "Location": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.Location,
/* harmony export */   "LocationLink": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.LocationLink,
/* harmony export */   "MarkedString": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.MarkedString,
/* harmony export */   "MarkupContent": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.MarkupContent,
/* harmony export */   "MarkupKind": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.MarkupKind,
/* harmony export */   "ParameterInformation": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.ParameterInformation,
/* harmony export */   "Position": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.Position,
/* harmony export */   "Range": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.Range,
/* harmony export */   "RenameFile": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.RenameFile,
/* harmony export */   "SelectionRange": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.SelectionRange,
/* harmony export */   "SignatureInformation": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.SignatureInformation,
/* harmony export */   "SymbolInformation": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.SymbolInformation,
/* harmony export */   "SymbolKind": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind,
/* harmony export */   "SymbolTag": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.SymbolTag,
/* harmony export */   "TextDocumentEdit": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.TextDocumentEdit,
/* harmony export */   "TextDocumentIdentifier": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.TextDocumentIdentifier,
/* harmony export */   "TextDocumentItem": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.TextDocumentItem,
/* harmony export */   "TextEdit": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.TextEdit,
/* harmony export */   "VersionedTextDocumentIdentifier": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.VersionedTextDocumentIdentifier,
/* harmony export */   "WorkspaceChange": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.WorkspaceChange,
/* harmony export */   "WorkspaceEdit": () => /* reexport safe */ _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.WorkspaceEdit,
/* harmony export */   "ClientCapabilities": () => /* binding */ ClientCapabilities,
/* harmony export */   "FileType": () => /* binding */ FileType
/* harmony export */ });
/* harmony import */ var _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_deps/vscode-languageserver-types/main.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/_deps/vscode-languageserver-types/main.js");
/* harmony import */ var _vscode_languageserver_textdocument_lib_esm_main_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vscode-languageserver-textdocument/lib/esm/main.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-languageserver-textdocument/lib/esm/main.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/




var ClientCapabilities;
(function (ClientCapabilities) {
    ClientCapabilities.LATEST = {
        textDocument: {
            completion: {
                completionItem: {
                    documentationFormat: [_deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown, _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.PlainText]
                }
            },
            hover: {
                contentFormat: [_deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown, _deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.PlainText]
            }
        }
    };
})(ClientCapabilities || (ClientCapabilities = {}));
var FileType;
(function (FileType) {
    /**
     * The file type is unknown.
     */
    FileType[FileType["Unknown"] = 0] = "Unknown";
    /**
     * A regular file.
     */
    FileType[FileType["File"] = 1] = "File";
    /**
     * A directory.
     */
    FileType[FileType["Directory"] = 2] = "Directory";
    /**
     * A symbolic link to a file.
     */
    FileType[FileType["SymbolicLink"] = 64] = "SymbolicLink";
})(FileType || (FileType = {}));


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/data/webCustomData.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/data/webCustomData.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cssData": () => /* binding */ cssData
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// file generated from vscode-web-custom-data NPM package
var cssData = {
    "version": 1.1,
    "properties": [
        {
            "name": "additive-symbols",
            "browsers": [
                "FF33"
            ],
            "syntax": "[ <integer> && <symbol> ]#",
            "relevance": 50,
            "description": "@counter-style descriptor. Specifies the symbols used by the marker-construction algorithm specified by the system descriptor. Needs to be specified if the counter system is 'additive'.",
            "restrictions": [
                "integer",
                "string",
                "image",
                "identifier"
            ]
        },
        {
            "name": "align-content",
            "values": [
                {
                    "name": "center",
                    "description": "Lines are packed toward the center of the flex container."
                },
                {
                    "name": "flex-end",
                    "description": "Lines are packed toward the end of the flex container."
                },
                {
                    "name": "flex-start",
                    "description": "Lines are packed toward the start of the flex container."
                },
                {
                    "name": "space-around",
                    "description": "Lines are evenly distributed in the flex container, with half-size spaces on either end."
                },
                {
                    "name": "space-between",
                    "description": "Lines are evenly distributed in the flex container."
                },
                {
                    "name": "stretch",
                    "description": "Lines stretch to take up the remaining space."
                }
            ],
            "syntax": "normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>",
            "relevance": 59,
            "description": "Aligns a flex container’s lines within the flex container when there is extra space in the cross-axis, similar to how 'justify-content' aligns individual items within the main-axis.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "align-items",
            "values": [
                {
                    "name": "baseline",
                    "description": "If the flex item’s inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."
                },
                {
                    "name": "center",
                    "description": "The flex item’s margin box is centered in the cross axis within the line."
                },
                {
                    "name": "flex-end",
                    "description": "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."
                },
                {
                    "name": "flex-start",
                    "description": "The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line."
                },
                {
                    "name": "stretch",
                    "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
                }
            ],
            "syntax": "normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]",
            "relevance": 81,
            "description": "Aligns flex items along the cross axis of the current line of the flex container.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "justify-items",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "normal"
                },
                {
                    "name": "end"
                },
                {
                    "name": "start"
                },
                {
                    "name": "flex-end",
                    "description": "\"Flex items are packed toward the end of the line.\""
                },
                {
                    "name": "flex-start",
                    "description": "\"Flex items are packed toward the start of the line.\""
                },
                {
                    "name": "self-end",
                    "description": "The item is packed flush to the edge of the alignment container of the end side of the item, in the appropriate axis."
                },
                {
                    "name": "self-start",
                    "description": "The item is packed flush to the edge of the alignment container of the start side of the item, in the appropriate axis.."
                },
                {
                    "name": "center",
                    "description": "The items are packed flush to each other toward the center of the of the alignment container."
                },
                {
                    "name": "left"
                },
                {
                    "name": "right"
                },
                {
                    "name": "baseline"
                },
                {
                    "name": "first baseline"
                },
                {
                    "name": "last baseline"
                },
                {
                    "name": "stretch",
                    "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
                },
                {
                    "name": "save"
                },
                {
                    "name": "unsave"
                },
                {
                    "name": "legacy"
                }
            ],
            "syntax": "normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]",
            "relevance": 50,
            "description": "Defines the default justify-self for all items of the box, giving them the default way of justifying each box along the appropriate axis",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "justify-self",
            "browsers": [
                "E16",
                "FF45",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "normal"
                },
                {
                    "name": "end"
                },
                {
                    "name": "start"
                },
                {
                    "name": "flex-end",
                    "description": "\"Flex items are packed toward the end of the line.\""
                },
                {
                    "name": "flex-start",
                    "description": "\"Flex items are packed toward the start of the line.\""
                },
                {
                    "name": "self-end",
                    "description": "The item is packed flush to the edge of the alignment container of the end side of the item, in the appropriate axis."
                },
                {
                    "name": "self-start",
                    "description": "The item is packed flush to the edge of the alignment container of the start side of the item, in the appropriate axis.."
                },
                {
                    "name": "center",
                    "description": "The items are packed flush to each other toward the center of the of the alignment container."
                },
                {
                    "name": "left"
                },
                {
                    "name": "right"
                },
                {
                    "name": "baseline"
                },
                {
                    "name": "first baseline"
                },
                {
                    "name": "last baseline"
                },
                {
                    "name": "stretch",
                    "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
                },
                {
                    "name": "save"
                },
                {
                    "name": "unsave"
                }
            ],
            "syntax": "auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]",
            "relevance": 52,
            "description": "Defines the way of justifying a box inside its container along the appropriate axis.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "align-self",
            "values": [
                {
                    "name": "auto",
                    "description": "Computes to the value of 'align-items' on the element’s parent, or 'stretch' if the element has no parent. On absolutely positioned elements, it computes to itself."
                },
                {
                    "name": "baseline",
                    "description": "If the flex item’s inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."
                },
                {
                    "name": "center",
                    "description": "The flex item’s margin box is centered in the cross axis within the line."
                },
                {
                    "name": "flex-end",
                    "description": "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."
                },
                {
                    "name": "flex-start",
                    "description": "The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line."
                },
                {
                    "name": "stretch",
                    "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
                }
            ],
            "syntax": "auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>",
            "relevance": 69,
            "description": "Allows the default alignment along the cross axis to be overridden for individual flex items.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "all",
            "browsers": [
                "E79",
                "FF27",
                "S9.1",
                "C37",
                "O24"
            ],
            "values": [],
            "syntax": "initial | inherit | unset | revert",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/all"
                }
            ],
            "description": "Shorthand that resets all properties except 'direction' and 'unicode-bidi'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "alt",
            "browsers": [
                "S9"
            ],
            "values": [],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/alt"
                }
            ],
            "description": "Provides alternative text for assistive technology to replace the generated content of a ::before or ::after element.",
            "restrictions": [
                "string",
                "enum"
            ]
        },
        {
            "name": "animation",
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "backwards",
                    "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
                },
                {
                    "name": "both",
                    "description": "Both forwards and backwards fill modes are applied."
                },
                {
                    "name": "forwards",
                    "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
                },
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                },
                {
                    "name": "none",
                    "description": "No animation is performed"
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "syntax": "<single-animation>#",
            "relevance": 79,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation"
                }
            ],
            "description": "Shorthand property combines six of the animation properties into a single property.",
            "restrictions": [
                "time",
                "timing-function",
                "enum",
                "identifier",
                "number"
            ]
        },
        {
            "name": "animation-delay",
            "syntax": "<time>#",
            "relevance": 62,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-delay"
                }
            ],
            "description": "Defines when the animation will start.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "animation-direction",
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "syntax": "<single-animation-direction>#",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-direction"
                }
            ],
            "description": "Defines whether or not the animation should play in reverse on alternate cycles.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "animation-duration",
            "syntax": "<time>#",
            "relevance": 64,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-duration"
                }
            ],
            "description": "Defines the length of time that an animation takes to complete one cycle.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "animation-fill-mode",
            "values": [
                {
                    "name": "backwards",
                    "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
                },
                {
                    "name": "both",
                    "description": "Both forwards and backwards fill modes are applied."
                },
                {
                    "name": "forwards",
                    "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
                },
                {
                    "name": "none",
                    "description": "There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes."
                }
            ],
            "syntax": "<single-animation-fill-mode>#",
            "relevance": 61,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode"
                }
            ],
            "description": "Defines what values are applied by the animation outside the time it is executing.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "animation-iteration-count",
            "values": [
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                }
            ],
            "syntax": "<single-animation-iteration-count>#",
            "relevance": 59,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count"
                }
            ],
            "description": "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
            "restrictions": [
                "number",
                "enum"
            ]
        },
        {
            "name": "animation-name",
            "values": [
                {
                    "name": "none",
                    "description": "No animation is performed"
                }
            ],
            "syntax": "[ none | <keyframes-name> ]#",
            "relevance": 64,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-name"
                }
            ],
            "description": "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
            "restrictions": [
                "identifier",
                "enum"
            ]
        },
        {
            "name": "animation-play-state",
            "values": [
                {
                    "name": "paused",
                    "description": "A running animation will be paused."
                },
                {
                    "name": "running",
                    "description": "Resume playback of a paused animation."
                }
            ],
            "syntax": "<single-animation-play-state>#",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-play-state"
                }
            ],
            "description": "Defines whether the animation is running or paused.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "animation-timing-function",
            "syntax": "<timing-function>#",
            "relevance": 68,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-timing-function"
                }
            ],
            "description": "Describes how the animation will progress over one cycle of its duration.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "backface-visibility",
            "values": [
                {
                    "name": "hidden",
                    "description": "Back side is hidden."
                },
                {
                    "name": "visible",
                    "description": "Back side is visible."
                }
            ],
            "syntax": "visible | hidden",
            "relevance": 59,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/backface-visibility"
                }
            ],
            "description": "Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "background",
            "values": [
                {
                    "name": "fixed",
                    "description": "The background is fixed with regard to the viewport. In paged media where there is no viewport, a 'fixed' background is fixed with respect to the page box and therefore replicated on every page."
                },
                {
                    "name": "local",
                    "description": "The background is fixed with regard to the element's contents: if the element has a scrolling mechanism, the background scrolls with the element's contents."
                },
                {
                    "name": "none",
                    "description": "A value of 'none' counts as an image layer but draws nothing."
                },
                {
                    "name": "scroll",
                    "description": "The background is fixed with regard to the element itself and does not scroll with its contents. (It is effectively attached to the element's border.)"
                }
            ],
            "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
            "relevance": 93,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background"
                }
            ],
            "description": "Shorthand property for setting most background properties at the same place in the style sheet.",
            "restrictions": [
                "enum",
                "image",
                "color",
                "position",
                "length",
                "repeat",
                "percentage",
                "box"
            ]
        },
        {
            "name": "background-attachment",
            "values": [
                {
                    "name": "fixed",
                    "description": "The background is fixed with regard to the viewport. In paged media where there is no viewport, a 'fixed' background is fixed with respect to the page box and therefore replicated on every page."
                },
                {
                    "name": "local",
                    "description": "The background is fixed with regard to the element’s contents: if the element has a scrolling mechanism, the background scrolls with the element’s contents."
                },
                {
                    "name": "scroll",
                    "description": "The background is fixed with regard to the element itself and does not scroll with its contents. (It is effectively attached to the element’s border.)"
                }
            ],
            "syntax": "<attachment>#",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-attachment"
                }
            ],
            "description": "Specifies whether the background images are fixed with regard to the viewport ('fixed') or scroll along with the element ('scroll') or its contents ('local').",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "background-blend-mode",
            "browsers": [
                "E79",
                "FF30",
                "S8",
                "C35",
                "O22"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "Default attribute which specifies no blending"
                },
                {
                    "name": "multiply",
                    "description": "The source color is multiplied by the destination color and replaces the destination."
                },
                {
                    "name": "screen",
                    "description": "Multiplies the complements of the backdrop and source color values, then complements the result."
                },
                {
                    "name": "overlay",
                    "description": "Multiplies or screens the colors, depending on the backdrop color value."
                },
                {
                    "name": "darken",
                    "description": "Selects the darker of the backdrop and source colors."
                },
                {
                    "name": "lighten",
                    "description": "Selects the lighter of the backdrop and source colors."
                },
                {
                    "name": "color-dodge",
                    "description": "Brightens the backdrop color to reflect the source color."
                },
                {
                    "name": "color-burn",
                    "description": "Darkens the backdrop color to reflect the source color."
                },
                {
                    "name": "hard-light",
                    "description": "Multiplies or screens the colors, depending on the source color value."
                },
                {
                    "name": "soft-light",
                    "description": "Darkens or lightens the colors, depending on the source color value."
                },
                {
                    "name": "difference",
                    "description": "Subtracts the darker of the two constituent colors from the lighter color.."
                },
                {
                    "name": "exclusion",
                    "description": "Produces an effect similar to that of the Difference mode but lower in contrast."
                },
                {
                    "name": "hue",
                    "browsers": [
                        "E79",
                        "FF30",
                        "S8",
                        "C35",
                        "O22"
                    ],
                    "description": "Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color."
                },
                {
                    "name": "saturation",
                    "browsers": [
                        "E79",
                        "FF30",
                        "S8",
                        "C35",
                        "O22"
                    ],
                    "description": "Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color."
                },
                {
                    "name": "color",
                    "browsers": [
                        "E79",
                        "FF30",
                        "S8",
                        "C35",
                        "O22"
                    ],
                    "description": "Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color."
                },
                {
                    "name": "luminosity",
                    "browsers": [
                        "E79",
                        "FF30",
                        "S8",
                        "C35",
                        "O22"
                    ],
                    "description": "Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color."
                }
            ],
            "syntax": "<blend-mode>#",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-blend-mode"
                }
            ],
            "description": "Defines the blending mode of each background layer.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "background-clip",
            "syntax": "<box>#",
            "relevance": 67,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-clip"
                }
            ],
            "description": "Determines the background painting area.",
            "restrictions": [
                "box"
            ]
        },
        {
            "name": "background-color",
            "syntax": "<color>",
            "relevance": 94,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-color"
                }
            ],
            "description": "Sets the background color of an element.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "background-image",
            "values": [
                {
                    "name": "none",
                    "description": "Counts as an image layer but draws nothing."
                }
            ],
            "syntax": "<bg-image>#",
            "relevance": 88,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-image"
                }
            ],
            "description": "Sets the background image(s) of an element.",
            "restrictions": [
                "image",
                "enum"
            ]
        },
        {
            "name": "background-origin",
            "syntax": "<box>#",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-origin"
                }
            ],
            "description": "For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",
            "restrictions": [
                "box"
            ]
        },
        {
            "name": "background-position",
            "syntax": "<bg-position>#",
            "relevance": 87,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-position"
                }
            ],
            "description": "Specifies the initial position of the background image(s) (after any resizing) within their corresponding background positioning area.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "background-position-x",
            "values": [
                {
                    "name": "center",
                    "description": "Equivalent to '50%' ('left 50%') for the horizontal position if the horizontal position is not otherwise specified, or '50%' ('top 50%') for the vertical position if it is."
                },
                {
                    "name": "left",
                    "description": "Equivalent to '0%' for the horizontal position if one or two values are given, otherwise specifies the left edge as the origin for the next offset."
                },
                {
                    "name": "right",
                    "description": "Equivalent to '100%' for the horizontal position if one or two values are given, otherwise specifies the right edge as the origin for the next offset."
                }
            ],
            "status": "experimental",
            "syntax": "[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-position-x"
                }
            ],
            "description": "If background images have been specified, this property specifies their initial position (after any resizing) within their corresponding background positioning area.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "background-position-y",
            "values": [
                {
                    "name": "bottom",
                    "description": "Equivalent to '100%' for the vertical position if one or two values are given, otherwise specifies the bottom edge as the origin for the next offset."
                },
                {
                    "name": "center",
                    "description": "Equivalent to '50%' ('left 50%') for the horizontal position if the horizontal position is not otherwise specified, or '50%' ('top 50%') for the vertical position if it is."
                },
                {
                    "name": "top",
                    "description": "Equivalent to '0%' for the vertical position if one or two values are given, otherwise specifies the top edge as the origin for the next offset."
                }
            ],
            "status": "experimental",
            "syntax": "[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-position-y"
                }
            ],
            "description": "If background images have been specified, this property specifies their initial position (after any resizing) within their corresponding background positioning area.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "background-repeat",
            "values": [],
            "syntax": "<repeat-style>#",
            "relevance": 85,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-repeat"
                }
            ],
            "description": "Specifies how background images are tiled after they have been sized and positioned.",
            "restrictions": [
                "repeat"
            ]
        },
        {
            "name": "background-size",
            "values": [
                {
                    "name": "auto",
                    "description": "Resolved by using the image’s intrinsic ratio and the size of the other dimension, or failing that, using the image’s intrinsic size, or failing that, treating it as 100%."
                },
                {
                    "name": "contain",
                    "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area."
                },
                {
                    "name": "cover",
                    "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area."
                }
            ],
            "syntax": "<bg-size>#",
            "relevance": 85,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-size"
                }
            ],
            "description": "Specifies the size of the background images.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "behavior",
            "browsers": [
                "IE6"
            ],
            "relevance": 50,
            "description": "IE only. Used to extend behaviors of the browser.",
            "restrictions": [
                "url"
            ]
        },
        {
            "name": "block-size",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Depends on the values of other properties."
                }
            ],
            "syntax": "<'width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/block-size"
                }
            ],
            "description": "Logical 'width'. Mapping depends on the element’s 'writing-mode'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "border",
            "syntax": "<line-width> || <line-style> || <color>",
            "relevance": 95,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border"
                }
            ],
            "description": "Shorthand property for setting border width, style, and color.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-block-end",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'> || <'border-top-style'> || <'color'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-end"
                }
            ],
            "description": "Logical 'border-bottom'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-block-start",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'> || <'border-top-style'> || <'color'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-start"
                }
            ],
            "description": "Logical 'border-top'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-block-end-color",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-color'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-end-color"
                }
            ],
            "description": "Logical 'border-bottom-color'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-block-start-color",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-color'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-start-color"
                }
            ],
            "description": "Logical 'border-top-color'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-block-end-style",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-style'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-end-style"
                }
            ],
            "description": "Logical 'border-bottom-style'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-block-start-style",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-style'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-start-style"
                }
            ],
            "description": "Logical 'border-top-style'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-block-end-width",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-end-width"
                }
            ],
            "description": "Logical 'border-bottom-width'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-block-start-width",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-start-width"
                }
            ],
            "description": "Logical 'border-top-width'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-bottom",
            "syntax": "<line-width> || <line-style> || <color>",
            "relevance": 88,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom"
                }
            ],
            "description": "Shorthand property for setting border width, style and color.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-bottom-color",
            "syntax": "<'border-top-color'>",
            "relevance": 71,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-color"
                }
            ],
            "description": "Sets the color of the bottom border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-bottom-left-radius",
            "syntax": "<length-percentage>{1,2}",
            "relevance": 74,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius"
                }
            ],
            "description": "Defines the radii of the bottom left outer border edge.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "border-bottom-right-radius",
            "syntax": "<length-percentage>{1,2}",
            "relevance": 73,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius"
                }
            ],
            "description": "Defines the radii of the bottom right outer border edge.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "border-bottom-style",
            "syntax": "<line-style>",
            "relevance": 57,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-style"
                }
            ],
            "description": "Sets the style of the bottom border.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-bottom-width",
            "syntax": "<line-width>",
            "relevance": 62,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-width"
                }
            ],
            "description": "Sets the thickness of the bottom border.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-collapse",
            "values": [
                {
                    "name": "collapse",
                    "description": "Selects the collapsing borders model."
                },
                {
                    "name": "separate",
                    "description": "Selects the separated borders border model."
                }
            ],
            "syntax": "collapse | separate",
            "relevance": 75,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-collapse"
                }
            ],
            "description": "Selects a table's border model.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "border-color",
            "values": [],
            "syntax": "<color>{1,4}",
            "relevance": 86,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-color"
                }
            ],
            "description": "The color of the border around all four edges of an element.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-image",
            "values": [
                {
                    "name": "auto",
                    "description": "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
                },
                {
                    "name": "fill",
                    "description": "Causes the middle part of the border-image to be preserved."
                },
                {
                    "name": "none",
                    "description": "Use the border styles."
                },
                {
                    "name": "repeat",
                    "description": "The image is tiled (repeated) to fill the area."
                },
                {
                    "name": "round",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
                },
                {
                    "name": "space",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
                },
                {
                    "name": "stretch",
                    "description": "The image is stretched to fill the area."
                },
                {
                    "name": "url()"
                }
            ],
            "syntax": "<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-image"
                }
            ],
            "description": "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
            "restrictions": [
                "length",
                "percentage",
                "number",
                "url",
                "enum"
            ]
        },
        {
            "name": "border-image-outset",
            "syntax": "[ <length> | <number> ]{1,4}",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-outset"
                }
            ],
            "description": "The values specify the amount by which the border image area extends beyond the border box on the top, right, bottom, and left sides respectively. If the fourth value is absent, it is the same as the second. If the third one is also absent, it is the same as the first. If the second one is also absent, it is the same as the first. Numbers represent multiples of the corresponding border-width.",
            "restrictions": [
                "length",
                "number"
            ]
        },
        {
            "name": "border-image-repeat",
            "values": [
                {
                    "name": "repeat",
                    "description": "The image is tiled (repeated) to fill the area."
                },
                {
                    "name": "round",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
                },
                {
                    "name": "space",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
                },
                {
                    "name": "stretch",
                    "description": "The image is stretched to fill the area."
                }
            ],
            "syntax": "[ stretch | repeat | round | space ]{1,2}",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-repeat"
                }
            ],
            "description": "Specifies how the images for the sides and the middle part of the border image are scaled and tiled. If the second keyword is absent, it is assumed to be the same as the first.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "border-image-slice",
            "values": [
                {
                    "name": "fill",
                    "description": "Causes the middle part of the border-image to be preserved."
                }
            ],
            "syntax": "<number-percentage>{1,4} && fill?",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-slice"
                }
            ],
            "description": "Specifies inward offsets from the top, right, bottom, and left edges of the image, dividing it into nine regions: four corners, four edges and a middle.",
            "restrictions": [
                "number",
                "percentage"
            ]
        },
        {
            "name": "border-image-source",
            "values": [
                {
                    "name": "none",
                    "description": "Use the border styles."
                }
            ],
            "syntax": "none | <image>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-source"
                }
            ],
            "description": "Specifies an image to use instead of the border styles given by the 'border-style' properties and as an additional background layer for the element. If the value is 'none' or if the image cannot be displayed, the border styles will be used.",
            "restrictions": [
                "image"
            ]
        },
        {
            "name": "border-image-width",
            "values": [
                {
                    "name": "auto",
                    "description": "The border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
                }
            ],
            "syntax": "[ <length-percentage> | <number> | auto ]{1,4}",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-width"
                }
            ],
            "description": "The four values of 'border-image-width' specify offsets that are used to divide the border image area into nine parts. They represent inward distances from the top, right, bottom, and left sides of the area, respectively.",
            "restrictions": [
                "length",
                "percentage",
                "number"
            ]
        },
        {
            "name": "border-inline-end",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'> || <'border-top-style'> || <'color'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-end"
                }
            ],
            "description": "Logical 'border-right'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-inline-start",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'> || <'border-top-style'> || <'color'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-start"
                }
            ],
            "description": "Logical 'border-left'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-inline-end-color",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-color'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color"
                }
            ],
            "description": "Logical 'border-right-color'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-inline-start-color",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-color'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color"
                }
            ],
            "description": "Logical 'border-left-color'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-inline-end-style",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-style'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style"
                }
            ],
            "description": "Logical 'border-right-style'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-inline-start-style",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-style'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style"
                }
            ],
            "description": "Logical 'border-left-style'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-inline-end-width",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width"
                }
            ],
            "description": "Logical 'border-right-width'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-inline-start-width",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width"
                }
            ],
            "description": "Logical 'border-left-width'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-left",
            "syntax": "<line-width> || <line-style> || <color>",
            "relevance": 82,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-left"
                }
            ],
            "description": "Shorthand property for setting border width, style and color",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-left-color",
            "syntax": "<color>",
            "relevance": 65,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-left-color"
                }
            ],
            "description": "Sets the color of the left border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-left-style",
            "syntax": "<line-style>",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-left-style"
                }
            ],
            "description": "Sets the style of the left border.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-left-width",
            "syntax": "<line-width>",
            "relevance": 58,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-left-width"
                }
            ],
            "description": "Sets the thickness of the left border.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-radius",
            "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
            "relevance": 91,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-radius"
                }
            ],
            "description": "Defines the radii of the outer border edge.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "border-right",
            "syntax": "<line-width> || <line-style> || <color>",
            "relevance": 81,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-right"
                }
            ],
            "description": "Shorthand property for setting border width, style and color",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-right-color",
            "syntax": "<color>",
            "relevance": 64,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-right-color"
                }
            ],
            "description": "Sets the color of the right border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-right-style",
            "syntax": "<line-style>",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-right-style"
                }
            ],
            "description": "Sets the style of the right border.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-right-width",
            "syntax": "<line-width>",
            "relevance": 60,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-right-width"
                }
            ],
            "description": "Sets the thickness of the right border.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-spacing",
            "syntax": "<length> <length>?",
            "relevance": 68,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-spacing"
                }
            ],
            "description": "The lengths specify the distance that separates adjoining cell borders. If one length is specified, it gives both the horizontal and vertical spacing. If two are specified, the first gives the horizontal spacing and the second the vertical spacing. Lengths may not be negative.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "border-style",
            "values": [],
            "syntax": "<line-style>{1,4}",
            "relevance": 79,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-style"
                }
            ],
            "description": "The style of the border around edges of an element.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-top",
            "syntax": "<line-width> || <line-style> || <color>",
            "relevance": 87,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-top"
                }
            ],
            "description": "Shorthand property for setting border width, style and color",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-top-color",
            "syntax": "<color>",
            "relevance": 71,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-color"
                }
            ],
            "description": "Sets the color of the top border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-top-left-radius",
            "syntax": "<length-percentage>{1,2}",
            "relevance": 74,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius"
                }
            ],
            "description": "Defines the radii of the top left outer border edge.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "border-top-right-radius",
            "syntax": "<length-percentage>{1,2}",
            "relevance": 72,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius"
                }
            ],
            "description": "Defines the radii of the top right outer border edge.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "border-top-style",
            "syntax": "<line-style>",
            "relevance": 57,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-style"
                }
            ],
            "description": "Sets the style of the top border.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-top-width",
            "syntax": "<line-width>",
            "relevance": 61,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-width"
                }
            ],
            "description": "Sets the thickness of the top border.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-width",
            "values": [],
            "syntax": "<line-width>{1,4}",
            "relevance": 81,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-width"
                }
            ],
            "description": "Shorthand that sets the four 'border-*-width' properties. If it has four values, they set top, right, bottom and left in that order. If left is missing, it is the same as right; if bottom is missing, it is the same as top; if right is missing, it is the same as top.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "bottom",
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 89,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/bottom"
                }
            ],
            "description": "Specifies how far an absolutely positioned box's bottom margin edge is offset above the bottom edge of the box's 'containing block'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "box-decoration-break",
            "browsers": [
                "E79",
                "FF32",
                "S6.1",
                "C22",
                "O15"
            ],
            "values": [
                {
                    "name": "clone",
                    "description": "Each box is independently wrapped with the border and padding."
                },
                {
                    "name": "slice",
                    "description": "The effect is as though the element were rendered with no breaks present, and then sliced by the breaks afterward."
                }
            ],
            "syntax": "slice | clone",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-decoration-break"
                }
            ],
            "description": "Specifies whether individual boxes are treated as broken pieces of one continuous box, or whether each box is individually wrapped with the border and padding.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "box-shadow",
            "values": [
                {
                    "name": "inset",
                    "description": "Changes the drop shadow from an outer shadow (one that shadows the box onto the canvas, as if it were lifted above the canvas) to an inner shadow (one that shadows the canvas onto the box, as if the box were cut out of the canvas and shifted behind it)."
                },
                {
                    "name": "none",
                    "description": "No shadow."
                }
            ],
            "syntax": "none | <shadow>#",
            "relevance": 89,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-shadow"
                }
            ],
            "description": "Attaches one or more drop-shadows to the box. The property is a comma-separated list of shadows, each specified by 2-4 length values, an optional color, and an optional 'inset' keyword. Omitted lengths are 0; omitted colors are a user agent chosen color.",
            "restrictions": [
                "length",
                "color",
                "enum"
            ]
        },
        {
            "name": "box-sizing",
            "values": [
                {
                    "name": "border-box",
                    "description": "The specified width and height (and respective min/max properties) on this element determine the border box of the element."
                },
                {
                    "name": "content-box",
                    "description": "Behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element."
                }
            ],
            "syntax": "content-box | border-box",
            "relevance": 92,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-sizing"
                }
            ],
            "description": "Specifies the behavior of the 'width' and 'height' properties.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "break-after",
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break before/after the principal box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a break before/after the principal box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break before/after the principal box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break before/after the principal box."
                },
                {
                    "name": "column",
                    "description": "Always force a column break before/after the principal box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "page",
                    "description": "Always force a page break before/after the principal box."
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
                }
            ],
            "syntax": "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
            "relevance": 50,
            "description": "Describes the page/column/region break behavior after the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "break-before",
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break before/after the principal box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a break before/after the principal box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break before/after the principal box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break before/after the principal box."
                },
                {
                    "name": "column",
                    "description": "Always force a column break before/after the principal box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "page",
                    "description": "Always force a page break before/after the principal box."
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
                }
            ],
            "syntax": "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
            "relevance": 50,
            "description": "Describes the page/column/region break behavior before the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "break-inside",
            "values": [
                {
                    "name": "auto",
                    "description": "Impose no additional breaking constraints within the box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid breaks within the box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break within the box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break within the box."
                }
            ],
            "syntax": "auto | avoid | avoid-page | avoid-column | avoid-region",
            "relevance": 50,
            "description": "Describes the page/column/region break behavior inside the principal box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "caption-side",
            "values": [
                {
                    "name": "bottom",
                    "description": "Positions the caption box below the table box."
                },
                {
                    "name": "top",
                    "description": "Positions the caption box above the table box."
                }
            ],
            "syntax": "top | bottom | block-start | block-end | inline-start | inline-end",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/caption-side"
                }
            ],
            "description": "Specifies the position of the caption box with respect to the table box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "caret-color",
            "browsers": [
                "E79",
                "FF53",
                "S11.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The user agent selects an appropriate color for the caret. This is generally currentcolor, but the user agent may choose a different color to ensure good visibility and contrast with the surrounding content, taking into account the value of currentcolor, the background, shadows, and other factors."
                }
            ],
            "syntax": "auto | <color>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/caret-color"
                }
            ],
            "description": "Controls the color of the text insertion indicator.",
            "restrictions": [
                "color",
                "enum"
            ]
        },
        {
            "name": "clear",
            "values": [
                {
                    "name": "both",
                    "description": "The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any right-floating and left-floating boxes that resulted from elements earlier in the source document."
                },
                {
                    "name": "left",
                    "description": "The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any left-floating boxes that resulted from elements earlier in the source document."
                },
                {
                    "name": "none",
                    "description": "No constraint on the box's position with respect to floats."
                },
                {
                    "name": "right",
                    "description": "The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any right-floating boxes that resulted from elements earlier in the source document."
                }
            ],
            "syntax": "none | left | right | both | inline-start | inline-end",
            "relevance": 84,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/clear"
                }
            ],
            "description": "Indicates which sides of an element's box(es) may not be adjacent to an earlier floating box. The 'clear' property does not consider floats inside the element itself or in other block formatting contexts.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "clip",
            "values": [
                {
                    "name": "auto",
                    "description": "The element does not clip."
                },
                {
                    "name": "rect()",
                    "description": "Specifies offsets from the edges of the border box."
                }
            ],
            "syntax": "<shape> | auto",
            "relevance": 73,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/clip"
                }
            ],
            "description": "Deprecated. Use the 'clip-path' property when support allows. Defines the visible portion of an element’s box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "clip-path",
            "values": [
                {
                    "name": "none",
                    "description": "No clipping path gets created."
                },
                {
                    "name": "url()",
                    "description": "References a <clipPath> element to create a clipping path."
                }
            ],
            "syntax": "<clip-source> | [ <basic-shape> || <geometry-box> ] | none",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/clip-path"
                }
            ],
            "description": "Specifies a clipping path where everything inside the path is visible and everything outside is clipped out.",
            "restrictions": [
                "url",
                "shape",
                "geometry-box",
                "enum"
            ]
        },
        {
            "name": "clip-rule",
            "browsers": [
                "E",
                "C5",
                "FF3",
                "IE10",
                "O9",
                "S6"
            ],
            "values": [
                {
                    "name": "evenodd",
                    "description": "Determines the ‘insideness’ of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses."
                },
                {
                    "name": "nonzero",
                    "description": "Determines the ‘insideness’ of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray."
                }
            ],
            "relevance": 50,
            "description": "Indicates the algorithm which is to be used to determine what parts of the canvas are included inside the shape.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "color",
            "syntax": "<color>",
            "relevance": 94,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/color"
                }
            ],
            "description": "Sets the color of an element's text",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "color-interpolation-filters",
            "browsers": [
                "E",
                "C5",
                "FF3",
                "IE10",
                "O9",
                "S6"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Color operations are not required to occur in a particular color space."
                },
                {
                    "name": "linearRGB",
                    "description": "Color operations should occur in the linearized RGB color space."
                },
                {
                    "name": "sRGB",
                    "description": "Color operations should occur in the sRGB color space."
                }
            ],
            "relevance": 50,
            "description": "Specifies the color space for imaging operations performed via filter effects.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "column-count",
            "values": [
                {
                    "name": "auto",
                    "description": "Determines the number of columns by the 'column-width' property and the element width."
                }
            ],
            "syntax": "<integer> | auto",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-count"
                }
            ],
            "description": "Describes the optimal number of columns into which the content of the element will be flowed.",
            "restrictions": [
                "integer",
                "enum"
            ]
        },
        {
            "name": "column-fill",
            "values": [
                {
                    "name": "auto",
                    "description": "Fills columns sequentially."
                },
                {
                    "name": "balance",
                    "description": "Balance content equally between columns, if possible."
                }
            ],
            "syntax": "auto | balance | balance-all",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-fill"
                }
            ],
            "description": "In continuous media, this property will only be consulted if the length of columns has been constrained. Otherwise, columns will automatically be balanced.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "column-gap",
            "values": [
                {
                    "name": "normal",
                    "description": "User agent specific and typically equivalent to 1em."
                }
            ],
            "syntax": "normal | <length-percentage>",
            "relevance": 52,
            "description": "Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",
            "restrictions": [
                "length",
                "enum"
            ]
        },
        {
            "name": "column-rule",
            "syntax": "<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-rule"
                }
            ],
            "description": "Shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "column-rule-color",
            "syntax": "<color>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-rule-color"
                }
            ],
            "description": "Sets the color of the column rule",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "column-rule-style",
            "syntax": "<'border-style'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-rule-style"
                }
            ],
            "description": "Sets the style of the rule between columns of an element.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "column-rule-width",
            "syntax": "<'border-width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-rule-width"
                }
            ],
            "description": "Sets the width of the rule between columns. Negative values are not allowed.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "columns",
            "values": [
                {
                    "name": "auto",
                    "description": "The width depends on the values of other properties."
                }
            ],
            "syntax": "<'column-width'> || <'column-count'>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/columns"
                }
            ],
            "description": "A shorthand property which sets both 'column-width' and 'column-count'.",
            "restrictions": [
                "length",
                "integer",
                "enum"
            ]
        },
        {
            "name": "column-span",
            "values": [
                {
                    "name": "all",
                    "description": "The element spans across all columns. Content in the normal flow that appears before the element is automatically balanced across all columns before the element appear."
                },
                {
                    "name": "none",
                    "description": "The element does not span multiple columns."
                }
            ],
            "syntax": "none | all",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-span"
                }
            ],
            "description": "Describes the page/column break behavior after the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "column-width",
            "values": [
                {
                    "name": "auto",
                    "description": "The width depends on the values of other properties."
                }
            ],
            "syntax": "<length> | auto",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-width"
                }
            ],
            "description": "Describes the width of columns in multicol elements.",
            "restrictions": [
                "length",
                "enum"
            ]
        },
        {
            "name": "contain",
            "browsers": [
                "E79",
                "FF69",
                "C52",
                "O40"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Indicates that the property has no effect."
                },
                {
                    "name": "strict",
                    "description": "Turns on all forms of containment for the element."
                },
                {
                    "name": "content",
                    "description": "All containment rules except size are applied to the element."
                },
                {
                    "name": "size",
                    "description": "For properties that can have effects on more than just an element and its descendants, those effects don't escape the containing element."
                },
                {
                    "name": "layout",
                    "description": "Turns on layout containment for the element."
                },
                {
                    "name": "style",
                    "description": "Turns on style containment for the element."
                },
                {
                    "name": "paint",
                    "description": "Turns on paint containment for the element."
                }
            ],
            "syntax": "none | strict | content | [ size || layout || style || paint ]",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/contain"
                }
            ],
            "description": "Indicates that an element and its contents are, as much as possible, independent of the rest of the document tree.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "content",
            "values": [
                {
                    "name": "attr()",
                    "description": "The attr(n) function returns as a string the value of attribute n for the subject of the selector."
                },
                {
                    "name": "counter(name)",
                    "description": "Counters are denoted by identifiers (see the 'counter-increment' and 'counter-reset' properties)."
                },
                {
                    "name": "icon",
                    "description": "The (pseudo-)element is replaced in its entirety by the resource referenced by its 'icon' property, and treated as a replaced element."
                },
                {
                    "name": "none",
                    "description": "On elements, this inhibits the children of the element from being rendered as children of this element, as if the element was empty. On pseudo-elements it causes the pseudo-element to have no content."
                },
                {
                    "name": "normal",
                    "description": "See http://www.w3.org/TR/css3-content/#content for computation rules."
                },
                {
                    "name": "url()"
                }
            ],
            "syntax": "normal | none | [ <content-replacement> | <content-list> ] [/ <string> ]?",
            "relevance": 89,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/content"
                }
            ],
            "description": "Determines which page-based occurrence of a given element is applied to a counter or string value.",
            "restrictions": [
                "string",
                "url"
            ]
        },
        {
            "name": "counter-increment",
            "values": [
                {
                    "name": "none",
                    "description": "This element does not alter the value of any counters."
                }
            ],
            "syntax": "[ <custom-ident> <integer>? ]+ | none",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/counter-increment"
                }
            ],
            "description": "Manipulate the value of existing counters.",
            "restrictions": [
                "identifier",
                "integer"
            ]
        },
        {
            "name": "counter-reset",
            "values": [
                {
                    "name": "none",
                    "description": "The counter is not modified."
                }
            ],
            "syntax": "[ <custom-ident> <integer>? ]+ | none",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/counter-reset"
                }
            ],
            "description": "Property accepts one or more names of counters (identifiers), each one optionally followed by an integer. The integer gives the value that the counter is set to on each occurrence of the element.",
            "restrictions": [
                "identifier",
                "integer"
            ]
        },
        {
            "name": "cursor",
            "values": [
                {
                    "name": "alias",
                    "description": "Indicates an alias of/shortcut to something is to be created. Often rendered as an arrow with a small curved arrow next to it."
                },
                {
                    "name": "all-scroll",
                    "description": "Indicates that the something can be scrolled in any direction. Often rendered as arrows pointing up, down, left, and right with a dot in the middle."
                },
                {
                    "name": "auto",
                    "description": "The UA determines the cursor to display based on the current context."
                },
                {
                    "name": "cell",
                    "description": "Indicates that a cell or set of cells may be selected. Often rendered as a thick plus-sign with a dot in the middle."
                },
                {
                    "name": "col-resize",
                    "description": "Indicates that the item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them."
                },
                {
                    "name": "context-menu",
                    "description": "A context menu is available for the object under the cursor. Often rendered as an arrow with a small menu-like graphic next to it."
                },
                {
                    "name": "copy",
                    "description": "Indicates something is to be copied. Often rendered as an arrow with a small plus sign next to it."
                },
                {
                    "name": "crosshair",
                    "description": "A simple crosshair (e.g., short line segments resembling a '+' sign). Often used to indicate a two dimensional bitmap selection mode."
                },
                {
                    "name": "default",
                    "description": "The platform-dependent default cursor. Often rendered as an arrow."
                },
                {
                    "name": "e-resize",
                    "description": "Indicates that east edge is to be moved."
                },
                {
                    "name": "ew-resize",
                    "description": "Indicates a bidirectional east-west resize cursor."
                },
                {
                    "name": "grab",
                    "description": "Indicates that something can be grabbed."
                },
                {
                    "name": "grabbing",
                    "description": "Indicates that something is being grabbed."
                },
                {
                    "name": "help",
                    "description": "Help is available for the object under the cursor. Often rendered as a question mark or a balloon."
                },
                {
                    "name": "move",
                    "description": "Indicates something is to be moved."
                },
                {
                    "name": "-moz-grab",
                    "description": "Indicates that something can be grabbed."
                },
                {
                    "name": "-moz-grabbing",
                    "description": "Indicates that something is being grabbed."
                },
                {
                    "name": "-moz-zoom-in",
                    "description": "Indicates that something can be zoomed (magnified) in."
                },
                {
                    "name": "-moz-zoom-out",
                    "description": "Indicates that something can be zoomed (magnified) out."
                },
                {
                    "name": "ne-resize",
                    "description": "Indicates that movement starts from north-east corner."
                },
                {
                    "name": "nesw-resize",
                    "description": "Indicates a bidirectional north-east/south-west cursor."
                },
                {
                    "name": "no-drop",
                    "description": "Indicates that the dragged item cannot be dropped at the current cursor location. Often rendered as a hand or pointer with a small circle with a line through it."
                },
                {
                    "name": "none",
                    "description": "No cursor is rendered for the element."
                },
                {
                    "name": "not-allowed",
                    "description": "Indicates that the requested action will not be carried out. Often rendered as a circle with a line through it."
                },
                {
                    "name": "n-resize",
                    "description": "Indicates that north edge is to be moved."
                },
                {
                    "name": "ns-resize",
                    "description": "Indicates a bidirectional north-south cursor."
                },
                {
                    "name": "nw-resize",
                    "description": "Indicates that movement starts from north-west corner."
                },
                {
                    "name": "nwse-resize",
                    "description": "Indicates a bidirectional north-west/south-east cursor."
                },
                {
                    "name": "pointer",
                    "description": "The cursor is a pointer that indicates a link."
                },
                {
                    "name": "progress",
                    "description": "A progress indicator. The program is performing some processing, but is different from 'wait' in that the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass."
                },
                {
                    "name": "row-resize",
                    "description": "Indicates that the item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them."
                },
                {
                    "name": "se-resize",
                    "description": "Indicates that movement starts from south-east corner."
                },
                {
                    "name": "s-resize",
                    "description": "Indicates that south edge is to be moved."
                },
                {
                    "name": "sw-resize",
                    "description": "Indicates that movement starts from south-west corner."
                },
                {
                    "name": "text",
                    "description": "Indicates text that may be selected. Often rendered as a vertical I-beam."
                },
                {
                    "name": "vertical-text",
                    "description": "Indicates vertical-text that may be selected. Often rendered as a horizontal I-beam."
                },
                {
                    "name": "wait",
                    "description": "Indicates that the program is busy and the user should wait. Often rendered as a watch or hourglass."
                },
                {
                    "name": "-webkit-grab",
                    "description": "Indicates that something can be grabbed."
                },
                {
                    "name": "-webkit-grabbing",
                    "description": "Indicates that something is being grabbed."
                },
                {
                    "name": "-webkit-zoom-in",
                    "description": "Indicates that something can be zoomed (magnified) in."
                },
                {
                    "name": "-webkit-zoom-out",
                    "description": "Indicates that something can be zoomed (magnified) out."
                },
                {
                    "name": "w-resize",
                    "description": "Indicates that west edge is to be moved."
                },
                {
                    "name": "zoom-in",
                    "description": "Indicates that something can be zoomed (magnified) in."
                },
                {
                    "name": "zoom-out",
                    "description": "Indicates that something can be zoomed (magnified) out."
                }
            ],
            "syntax": "[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]",
            "relevance": 91,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/cursor"
                }
            ],
            "description": "Allows control over cursor appearance in an element",
            "restrictions": [
                "url",
                "number",
                "enum"
            ]
        },
        {
            "name": "direction",
            "values": [
                {
                    "name": "ltr",
                    "description": "Left-to-right direction."
                },
                {
                    "name": "rtl",
                    "description": "Right-to-left direction."
                }
            ],
            "syntax": "ltr | rtl",
            "relevance": 68,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/direction"
                }
            ],
            "description": "Specifies the inline base direction or directionality of any bidi paragraph, embedding, isolate, or override established by the box. Note: for HTML content use the 'dir' attribute and 'bdo' element rather than this property.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "display",
            "values": [
                {
                    "name": "block",
                    "description": "The element generates a block-level box"
                },
                {
                    "name": "contents",
                    "description": "The element itself does not generate any boxes, but its children and pseudo-elements still generate boxes as normal."
                },
                {
                    "name": "flex",
                    "description": "The element generates a principal flex container box and establishes a flex formatting context."
                },
                {
                    "name": "flexbox",
                    "description": "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'."
                },
                {
                    "name": "flow-root",
                    "description": "The element generates a block container box, and lays out its contents using flow layout."
                },
                {
                    "name": "grid",
                    "description": "The element generates a principal grid container box, and establishes a grid formatting context."
                },
                {
                    "name": "inline",
                    "description": "The element generates an inline-level box."
                },
                {
                    "name": "inline-block",
                    "description": "A block box, which itself is flowed as a single inline box, similar to a replaced element. The inside of an inline-block is formatted as a block box, and the box itself is formatted as an inline box."
                },
                {
                    "name": "inline-flex",
                    "description": "Inline-level flex container."
                },
                {
                    "name": "inline-flexbox",
                    "description": "Inline-level flex container. Standardized as 'inline-flex'"
                },
                {
                    "name": "inline-table",
                    "description": "Inline-level table wrapper box containing table box."
                },
                {
                    "name": "list-item",
                    "description": "One or more block boxes and one marker box."
                },
                {
                    "name": "-moz-box",
                    "description": "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'."
                },
                {
                    "name": "-moz-deck"
                },
                {
                    "name": "-moz-grid"
                },
                {
                    "name": "-moz-grid-group"
                },
                {
                    "name": "-moz-grid-line"
                },
                {
                    "name": "-moz-groupbox"
                },
                {
                    "name": "-moz-inline-box",
                    "description": "Inline-level flex container. Standardized as 'inline-flex'"
                },
                {
                    "name": "-moz-inline-grid"
                },
                {
                    "name": "-moz-inline-stack"
                },
                {
                    "name": "-moz-marker"
                },
                {
                    "name": "-moz-popup"
                },
                {
                    "name": "-moz-stack"
                },
                {
                    "name": "-ms-flexbox",
                    "description": "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'."
                },
                {
                    "name": "-ms-grid",
                    "description": "The element generates a principal grid container box, and establishes a grid formatting context."
                },
                {
                    "name": "-ms-inline-flexbox",
                    "description": "Inline-level flex container. Standardized as 'inline-flex'"
                },
                {
                    "name": "-ms-inline-grid",
                    "description": "Inline-level grid container."
                },
                {
                    "name": "none",
                    "description": "The element and its descendants generates no boxes."
                },
                {
                    "name": "ruby",
                    "description": "The element generates a principal ruby container box, and establishes a ruby formatting context."
                },
                {
                    "name": "ruby-base"
                },
                {
                    "name": "ruby-base-container"
                },
                {
                    "name": "ruby-text"
                },
                {
                    "name": "ruby-text-container"
                },
                {
                    "name": "run-in",
                    "description": "The element generates a run-in box. Run-in elements act like inlines or blocks, depending on the surrounding elements."
                },
                {
                    "name": "table",
                    "description": "The element generates a principal table wrapper box containing an additionally-generated table box, and establishes a table formatting context."
                },
                {
                    "name": "table-caption"
                },
                {
                    "name": "table-cell"
                },
                {
                    "name": "table-column"
                },
                {
                    "name": "table-column-group"
                },
                {
                    "name": "table-footer-group"
                },
                {
                    "name": "table-header-group"
                },
                {
                    "name": "table-row"
                },
                {
                    "name": "table-row-group"
                },
                {
                    "name": "-webkit-box",
                    "description": "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'."
                },
                {
                    "name": "-webkit-flex",
                    "description": "The element lays out its contents using flow layout (block-and-inline layout)."
                },
                {
                    "name": "-webkit-inline-box",
                    "description": "Inline-level flex container. Standardized as 'inline-flex'"
                },
                {
                    "name": "-webkit-inline-flex",
                    "description": "Inline-level flex container."
                }
            ],
            "syntax": "[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>",
            "relevance": 96,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/display"
                }
            ],
            "description": "In combination with 'float' and 'position', determines the type of box or boxes that are generated for an element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "empty-cells",
            "values": [
                {
                    "name": "hide",
                    "description": "No borders or backgrounds are drawn around/behind empty cells."
                },
                {
                    "name": "-moz-show-background"
                },
                {
                    "name": "show",
                    "description": "Borders and backgrounds are drawn around/behind empty cells (like normal cells)."
                }
            ],
            "syntax": "show | hide",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/empty-cells"
                }
            ],
            "description": "In the separated borders model, this property controls the rendering of borders and backgrounds around cells that have no visible content.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "enable-background",
            "values": [
                {
                    "name": "accumulate",
                    "description": "If the ancestor container element has a property of new, then all graphics elements within the current container are rendered both on the parent's background image and onto the target."
                },
                {
                    "name": "new",
                    "description": "Create a new background image canvas. All children of the current container element can access the background, and they will be rendered onto both the parent's background image canvas in addition to the target device."
                }
            ],
            "relevance": 50,
            "description": "Deprecated. Use 'isolation' property instead when support allows. Specifies how the accumulation of the background image is managed.",
            "restrictions": [
                "integer",
                "length",
                "percentage",
                "enum"
            ]
        },
        {
            "name": "fallback",
            "browsers": [
                "FF33"
            ],
            "syntax": "<counter-style-name>",
            "relevance": 50,
            "description": "@counter-style descriptor. Specifies a fallback counter style to be used when the current counter style can’t create a representation for a given counter value.",
            "restrictions": [
                "identifier"
            ]
        },
        {
            "name": "fill",
            "values": [
                {
                    "name": "url()",
                    "description": "A URL reference to a paint server element, which is an element that defines a paint server: ‘hatch’, ‘linearGradient’, ‘mesh’, ‘pattern’, ‘radialGradient’ and ‘solidcolor’."
                },
                {
                    "name": "none",
                    "description": "No paint is applied in this layer."
                }
            ],
            "relevance": 74,
            "description": "Paints the interior of the given graphical element.",
            "restrictions": [
                "color",
                "enum",
                "url"
            ]
        },
        {
            "name": "fill-opacity",
            "relevance": 52,
            "description": "Specifies the opacity of the painting operation used to paint the interior the current object.",
            "restrictions": [
                "number(0-1)"
            ]
        },
        {
            "name": "fill-rule",
            "values": [
                {
                    "name": "evenodd",
                    "description": "Determines the ‘insideness’ of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses."
                },
                {
                    "name": "nonzero",
                    "description": "Determines the ‘insideness’ of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray."
                }
            ],
            "relevance": 50,
            "description": "Indicates the algorithm (or winding rule) which is to be used to determine what parts of the canvas are included inside the shape.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "filter",
            "browsers": [
                "E12",
                "FF35",
                "S9.1",
                "C53",
                "O40"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No filter effects are applied."
                },
                {
                    "name": "blur()",
                    "description": "Applies a Gaussian blur to the input image."
                },
                {
                    "name": "brightness()",
                    "description": "Applies a linear multiplier to input image, making it appear more or less bright."
                },
                {
                    "name": "contrast()",
                    "description": "Adjusts the contrast of the input."
                },
                {
                    "name": "drop-shadow()",
                    "description": "Applies a drop shadow effect to the input image."
                },
                {
                    "name": "grayscale()",
                    "description": "Converts the input image to grayscale."
                },
                {
                    "name": "hue-rotate()",
                    "description": "Applies a hue rotation on the input image. "
                },
                {
                    "name": "invert()",
                    "description": "Inverts the samples in the input image."
                },
                {
                    "name": "opacity()",
                    "description": "Applies transparency to the samples in the input image."
                },
                {
                    "name": "saturate()",
                    "description": "Saturates the input image."
                },
                {
                    "name": "sepia()",
                    "description": "Converts the input image to sepia."
                },
                {
                    "name": "url()",
                    "browsers": [
                        "E12",
                        "FF35",
                        "S9.1",
                        "C53",
                        "O40"
                    ],
                    "description": "A filter reference to a <filter> element."
                }
            ],
            "syntax": "none | <filter-function-list>",
            "relevance": 64,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/filter"
                }
            ],
            "description": "Processes an element’s rendering before it is displayed in the document, by applying one or more filter effects.",
            "restrictions": [
                "enum",
                "url"
            ]
        },
        {
            "name": "flex",
            "values": [
                {
                    "name": "auto",
                    "description": "Retrieves the value of the main size property as the used 'flex-basis'."
                },
                {
                    "name": "content",
                    "description": "Indicates automatic sizing, based on the flex item’s content."
                },
                {
                    "name": "none",
                    "description": "Expands to '0 0 auto'."
                }
            ],
            "syntax": "none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]",
            "relevance": 77,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/flex"
                }
            ],
            "description": "Specifies the components of a flexible length: the flex grow factor and flex shrink factor, and the flex basis.",
            "restrictions": [
                "length",
                "number",
                "percentage"
            ]
        },
        {
            "name": "flex-basis",
            "values": [
                {
                    "name": "auto",
                    "description": "Retrieves the value of the main size property as the used 'flex-basis'."
                },
                {
                    "name": "content",
                    "description": "Indicates automatic sizing, based on the flex item’s content."
                }
            ],
            "syntax": "content | <'width'>",
            "relevance": 62,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/flex-basis"
                }
            ],
            "description": "Sets the flex basis.",
            "restrictions": [
                "length",
                "number",
                "percentage"
            ]
        },
        {
            "name": "flex-direction",
            "values": [
                {
                    "name": "column",
                    "description": "The flex container’s main axis has the same orientation as the block axis of the current writing mode."
                },
                {
                    "name": "column-reverse",
                    "description": "Same as 'column', except the main-start and main-end directions are swapped."
                },
                {
                    "name": "row",
                    "description": "The flex container’s main axis has the same orientation as the inline axis of the current writing mode."
                },
                {
                    "name": "row-reverse",
                    "description": "Same as 'row', except the main-start and main-end directions are swapped."
                }
            ],
            "syntax": "row | row-reverse | column | column-reverse",
            "relevance": 78,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/flex-direction"
                }
            ],
            "description": "Specifies how flex items are placed in the flex container, by setting the direction of the flex container’s main axis.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "flex-flow",
            "values": [
                {
                    "name": "column",
                    "description": "The flex container’s main axis has the same orientation as the block axis of the current writing mode."
                },
                {
                    "name": "column-reverse",
                    "description": "Same as 'column', except the main-start and main-end directions are swapped."
                },
                {
                    "name": "nowrap",
                    "description": "The flex container is single-line."
                },
                {
                    "name": "row",
                    "description": "The flex container’s main axis has the same orientation as the inline axis of the current writing mode."
                },
                {
                    "name": "row-reverse",
                    "description": "Same as 'row', except the main-start and main-end directions are swapped."
                },
                {
                    "name": "wrap",
                    "description": "The flexbox is multi-line."
                },
                {
                    "name": "wrap-reverse",
                    "description": "Same as 'wrap', except the cross-start and cross-end directions are swapped."
                }
            ],
            "syntax": "<'flex-direction'> || <'flex-wrap'>",
            "relevance": 58,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/flex-flow"
                }
            ],
            "description": "Specifies how flexbox items are placed in the flexbox.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "flex-grow",
            "syntax": "<number>",
            "relevance": 71,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/flex-grow"
                }
            ],
            "description": "Sets the flex grow factor. Negative numbers are invalid.",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "flex-shrink",
            "syntax": "<number>",
            "relevance": 69,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/flex-shrink"
                }
            ],
            "description": "Sets the flex shrink factor. Negative numbers are invalid.",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "flex-wrap",
            "values": [
                {
                    "name": "nowrap",
                    "description": "The flex container is single-line."
                },
                {
                    "name": "wrap",
                    "description": "The flexbox is multi-line."
                },
                {
                    "name": "wrap-reverse",
                    "description": "Same as 'wrap', except the cross-start and cross-end directions are swapped."
                }
            ],
            "syntax": "nowrap | wrap | wrap-reverse",
            "relevance": 74,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/flex-wrap"
                }
            ],
            "description": "Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "float",
            "values": [
                {
                    "name": "inline-end",
                    "description": "A keyword indicating that the element must float on the end side of its containing block. That is the right side with ltr scripts, and the left side with rtl scripts."
                },
                {
                    "name": "inline-start",
                    "description": "A keyword indicating that the element must float on the start side of its containing block. That is the left side with ltr scripts, and the right side with rtl scripts."
                },
                {
                    "name": "left",
                    "description": "The element generates a block box that is floated to the left. Content flows on the right side of the box, starting at the top (subject to the 'clear' property)."
                },
                {
                    "name": "none",
                    "description": "The box is not floated."
                },
                {
                    "name": "right",
                    "description": "Similar to 'left', except the box is floated to the right, and content flows on the left side of the box, starting at the top."
                }
            ],
            "syntax": "left | right | none | inline-start | inline-end",
            "relevance": 92,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/float"
                }
            ],
            "description": "Specifies how a box should be floated. It may be set for any element, but only applies to elements that generate boxes that are not absolutely positioned.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "flood-color",
            "browsers": [
                "E",
                "C5",
                "FF3",
                "IE10",
                "O9",
                "S6"
            ],
            "relevance": 50,
            "description": "Indicates what color to use to flood the current filter primitive subregion.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "flood-opacity",
            "browsers": [
                "E",
                "C5",
                "FF3",
                "IE10",
                "O9",
                "S6"
            ],
            "relevance": 50,
            "description": "Indicates what opacity to use to flood the current filter primitive subregion.",
            "restrictions": [
                "number(0-1)",
                "percentage"
            ]
        },
        {
            "name": "font",
            "values": [
                {
                    "name": "100",
                    "description": "Thin"
                },
                {
                    "name": "200",
                    "description": "Extra Light (Ultra Light)"
                },
                {
                    "name": "300",
                    "description": "Light"
                },
                {
                    "name": "400",
                    "description": "Normal"
                },
                {
                    "name": "500",
                    "description": "Medium"
                },
                {
                    "name": "600",
                    "description": "Semi Bold (Demi Bold)"
                },
                {
                    "name": "700",
                    "description": "Bold"
                },
                {
                    "name": "800",
                    "description": "Extra Bold (Ultra Bold)"
                },
                {
                    "name": "900",
                    "description": "Black (Heavy)"
                },
                {
                    "name": "bold",
                    "description": "Same as 700"
                },
                {
                    "name": "bolder",
                    "description": "Specifies the weight of the face bolder than the inherited value."
                },
                {
                    "name": "caption",
                    "description": "The font used for captioned controls (e.g., buttons, drop-downs, etc.)."
                },
                {
                    "name": "icon",
                    "description": "The font used to label icons."
                },
                {
                    "name": "italic",
                    "description": "Selects a font that is labeled 'italic', or, if that is not available, one labeled 'oblique'."
                },
                {
                    "name": "large"
                },
                {
                    "name": "larger"
                },
                {
                    "name": "lighter",
                    "description": "Specifies the weight of the face lighter than the inherited value."
                },
                {
                    "name": "medium"
                },
                {
                    "name": "menu",
                    "description": "The font used in menus (e.g., dropdown menus and menu lists)."
                },
                {
                    "name": "message-box",
                    "description": "The font used in dialog boxes."
                },
                {
                    "name": "normal",
                    "description": "Specifies a face that is not labeled as a small-caps font."
                },
                {
                    "name": "oblique",
                    "description": "Selects a font that is labeled 'oblique'."
                },
                {
                    "name": "small"
                },
                {
                    "name": "small-caps",
                    "description": "Specifies a font that is labeled as a small-caps font. If a genuine small-caps font is not available, user agents should simulate a small-caps font."
                },
                {
                    "name": "small-caption",
                    "description": "The font used for labeling small controls."
                },
                {
                    "name": "smaller"
                },
                {
                    "name": "status-bar",
                    "description": "The font used in window status bars."
                },
                {
                    "name": "x-large"
                },
                {
                    "name": "x-small"
                },
                {
                    "name": "xx-large"
                },
                {
                    "name": "xx-small"
                }
            ],
            "syntax": "[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar",
            "relevance": 82,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font"
                }
            ],
            "description": "Shorthand property for setting 'font-style', 'font-variant', 'font-weight', 'font-size', 'line-height', and 'font-family', at the same place in the style sheet. The syntax of this property is based on a traditional typographical shorthand notation to set multiple properties related to fonts.",
            "restrictions": [
                "font"
            ]
        },
        {
            "name": "font-family",
            "values": [
                {
                    "name": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif"
                },
                {
                    "name": "Arial, Helvetica, sans-serif"
                },
                {
                    "name": "Cambria, Cochin, Georgia, Times, 'Times New Roman', serif"
                },
                {
                    "name": "'Courier New', Courier, monospace"
                },
                {
                    "name": "cursive"
                },
                {
                    "name": "fantasy"
                },
                {
                    "name": "'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif"
                },
                {
                    "name": "Georgia, 'Times New Roman', Times, serif"
                },
                {
                    "name": "'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif"
                },
                {
                    "name": "Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif"
                },
                {
                    "name": "'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif"
                },
                {
                    "name": "monospace"
                },
                {
                    "name": "sans-serif"
                },
                {
                    "name": "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif"
                },
                {
                    "name": "serif"
                },
                {
                    "name": "'Times New Roman', Times, serif"
                },
                {
                    "name": "'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif"
                },
                {
                    "name": "Verdana, Geneva, Tahoma, sans-serif"
                }
            ],
            "syntax": "<family-name>",
            "relevance": 92,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-family"
                }
            ],
            "description": "Specifies a prioritized list of font family names or generic family names. A user agent iterates through the list of family names until it matches an available font that contains a glyph for the character to be rendered.",
            "restrictions": [
                "font"
            ]
        },
        {
            "name": "font-feature-settings",
            "values": [
                {
                    "name": "\"aalt\"",
                    "description": "Access All Alternates."
                },
                {
                    "name": "\"abvf\"",
                    "description": "Above-base Forms. Required in Khmer script."
                },
                {
                    "name": "\"abvm\"",
                    "description": "Above-base Mark Positioning. Required in Indic scripts."
                },
                {
                    "name": "\"abvs\"",
                    "description": "Above-base Substitutions. Required in Indic scripts."
                },
                {
                    "name": "\"afrc\"",
                    "description": "Alternative Fractions."
                },
                {
                    "name": "\"akhn\"",
                    "description": "Akhand. Required in most Indic scripts."
                },
                {
                    "name": "\"blwf\"",
                    "description": "Below-base Form. Required in a number of Indic scripts."
                },
                {
                    "name": "\"blwm\"",
                    "description": "Below-base Mark Positioning. Required in Indic scripts."
                },
                {
                    "name": "\"blws\"",
                    "description": "Below-base Substitutions. Required in Indic scripts."
                },
                {
                    "name": "\"calt\"",
                    "description": "Contextual Alternates."
                },
                {
                    "name": "\"case\"",
                    "description": "Case-Sensitive Forms. Applies only to European scripts; particularly prominent in Spanish-language setting."
                },
                {
                    "name": "\"ccmp\"",
                    "description": "Glyph Composition/Decomposition."
                },
                {
                    "name": "\"cfar\"",
                    "description": "Conjunct Form After Ro. Required in Khmer scripts."
                },
                {
                    "name": "\"cjct\"",
                    "description": "Conjunct Forms. Required in Indic scripts that show similarity to Devanagari."
                },
                {
                    "name": "\"clig\"",
                    "description": "Contextual Ligatures."
                },
                {
                    "name": "\"cpct\"",
                    "description": "Centered CJK Punctuation. Used primarily in Chinese fonts."
                },
                {
                    "name": "\"cpsp\"",
                    "description": "Capital Spacing. Should not be used in connecting scripts (e.g. most Arabic)."
                },
                {
                    "name": "\"cswh\"",
                    "description": "Contextual Swash."
                },
                {
                    "name": "\"curs\"",
                    "description": "Cursive Positioning. Can be used in any cursive script."
                },
                {
                    "name": "\"c2pc\"",
                    "description": "Petite Capitals From Capitals. Applies only to bicameral scripts."
                },
                {
                    "name": "\"c2sc\"",
                    "description": "Small Capitals From Capitals. Applies only to bicameral scripts."
                },
                {
                    "name": "\"dist\"",
                    "description": "Distances. Required in Indic scripts."
                },
                {
                    "name": "\"dlig\"",
                    "description": "Discretionary ligatures."
                },
                {
                    "name": "\"dnom\"",
                    "description": "Denominators."
                },
                {
                    "name": "\"dtls\"",
                    "description": "Dotless Forms. Applied to math formula layout."
                },
                {
                    "name": "\"expt\"",
                    "description": "Expert Forms. Applies only to Japanese."
                },
                {
                    "name": "\"falt\"",
                    "description": "Final Glyph on Line Alternates. Can be used in any cursive script."
                },
                {
                    "name": "\"fin2\"",
                    "description": "Terminal Form #2. Used only with the Syriac script."
                },
                {
                    "name": "\"fin3\"",
                    "description": "Terminal Form #3. Used only with the Syriac script."
                },
                {
                    "name": "\"fina\"",
                    "description": "Terminal Forms. Can be used in any alphabetic script."
                },
                {
                    "name": "\"flac\"",
                    "description": "Flattened ascent forms. Applied to math formula layout."
                },
                {
                    "name": "\"frac\"",
                    "description": "Fractions."
                },
                {
                    "name": "\"fwid\"",
                    "description": "Full Widths. Applies to any script which can use monospaced forms."
                },
                {
                    "name": "\"half\"",
                    "description": "Half Forms. Required in Indic scripts that show similarity to Devanagari."
                },
                {
                    "name": "\"haln\"",
                    "description": "Halant Forms. Required in Indic scripts."
                },
                {
                    "name": "\"halt\"",
                    "description": "Alternate Half Widths. Used only in CJKV fonts."
                },
                {
                    "name": "\"hist\"",
                    "description": "Historical Forms."
                },
                {
                    "name": "\"hkna\"",
                    "description": "Horizontal Kana Alternates. Applies only to fonts that support kana (hiragana and katakana)."
                },
                {
                    "name": "\"hlig\"",
                    "description": "Historical Ligatures."
                },
                {
                    "name": "\"hngl\"",
                    "description": "Hangul. Korean only."
                },
                {
                    "name": "\"hojo\"",
                    "description": "Hojo Kanji Forms (JIS X 0212-1990 Kanji Forms). Used only with Kanji script."
                },
                {
                    "name": "\"hwid\"",
                    "description": "Half Widths. Generally used only in CJKV fonts."
                },
                {
                    "name": "\"init\"",
                    "description": "Initial Forms. Can be used in any alphabetic script."
                },
                {
                    "name": "\"isol\"",
                    "description": "Isolated Forms. Can be used in any cursive script."
                },
                {
                    "name": "\"ital\"",
                    "description": "Italics. Applies mostly to Latin; note that many non-Latin fonts contain Latin as well."
                },
                {
                    "name": "\"jalt\"",
                    "description": "Justification Alternates. Can be used in any cursive script."
                },
                {
                    "name": "\"jp78\"",
                    "description": "JIS78 Forms. Applies only to Japanese."
                },
                {
                    "name": "\"jp83\"",
                    "description": "JIS83 Forms. Applies only to Japanese."
                },
                {
                    "name": "\"jp90\"",
                    "description": "JIS90 Forms. Applies only to Japanese."
                },
                {
                    "name": "\"jp04\"",
                    "description": "JIS2004 Forms. Applies only to Japanese."
                },
                {
                    "name": "\"kern\"",
                    "description": "Kerning."
                },
                {
                    "name": "\"lfbd\"",
                    "description": "Left Bounds."
                },
                {
                    "name": "\"liga\"",
                    "description": "Standard Ligatures."
                },
                {
                    "name": "\"ljmo\"",
                    "description": "Leading Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported."
                },
                {
                    "name": "\"lnum\"",
                    "description": "Lining Figures."
                },
                {
                    "name": "\"locl\"",
                    "description": "Localized Forms."
                },
                {
                    "name": "\"ltra\"",
                    "description": "Left-to-right glyph alternates."
                },
                {
                    "name": "\"ltrm\"",
                    "description": "Left-to-right mirrored forms."
                },
                {
                    "name": "\"mark\"",
                    "description": "Mark Positioning."
                },
                {
                    "name": "\"med2\"",
                    "description": "Medial Form #2. Used only with the Syriac script."
                },
                {
                    "name": "\"medi\"",
                    "description": "Medial Forms."
                },
                {
                    "name": "\"mgrk\"",
                    "description": "Mathematical Greek."
                },
                {
                    "name": "\"mkmk\"",
                    "description": "Mark to Mark Positioning."
                },
                {
                    "name": "\"nalt\"",
                    "description": "Alternate Annotation Forms."
                },
                {
                    "name": "\"nlck\"",
                    "description": "NLC Kanji Forms. Used only with Kanji script."
                },
                {
                    "name": "\"nukt\"",
                    "description": "Nukta Forms. Required in Indic scripts.."
                },
                {
                    "name": "\"numr\"",
                    "description": "Numerators."
                },
                {
                    "name": "\"onum\"",
                    "description": "Oldstyle Figures."
                },
                {
                    "name": "\"opbd\"",
                    "description": "Optical Bounds."
                },
                {
                    "name": "\"ordn\"",
                    "description": "Ordinals. Applies mostly to Latin script."
                },
                {
                    "name": "\"ornm\"",
                    "description": "Ornaments."
                },
                {
                    "name": "\"palt\"",
                    "description": "Proportional Alternate Widths. Used mostly in CJKV fonts."
                },
                {
                    "name": "\"pcap\"",
                    "description": "Petite Capitals."
                },
                {
                    "name": "\"pkna\"",
                    "description": "Proportional Kana. Generally used only in Japanese fonts."
                },
                {
                    "name": "\"pnum\"",
                    "description": "Proportional Figures."
                },
                {
                    "name": "\"pref\"",
                    "description": "Pre-base Forms. Required in Khmer and Myanmar (Burmese) scripts and southern Indic scripts that may display a pre-base form of Ra."
                },
                {
                    "name": "\"pres\"",
                    "description": "Pre-base Substitutions. Required in Indic scripts."
                },
                {
                    "name": "\"pstf\"",
                    "description": "Post-base Forms. Required in scripts of south and southeast Asia that have post-base forms for consonants eg: Gurmukhi, Malayalam, Khmer."
                },
                {
                    "name": "\"psts\"",
                    "description": "Post-base Substitutions."
                },
                {
                    "name": "\"pwid\"",
                    "description": "Proportional Widths."
                },
                {
                    "name": "\"qwid\"",
                    "description": "Quarter Widths. Generally used only in CJKV fonts."
                },
                {
                    "name": "\"rand\"",
                    "description": "Randomize."
                },
                {
                    "name": "\"rclt\"",
                    "description": "Required Contextual Alternates. May apply to any script, but is especially important for many styles of Arabic."
                },
                {
                    "name": "\"rlig\"",
                    "description": "Required Ligatures. Applies to Arabic and Syriac. May apply to some other scripts."
                },
                {
                    "name": "\"rkrf\"",
                    "description": "Rakar Forms. Required in Devanagari and Gujarati scripts."
                },
                {
                    "name": "\"rphf\"",
                    "description": "Reph Form. Required in Indic scripts. E.g. Devanagari, Kannada."
                },
                {
                    "name": "\"rtbd\"",
                    "description": "Right Bounds."
                },
                {
                    "name": "\"rtla\"",
                    "description": "Right-to-left alternates."
                },
                {
                    "name": "\"rtlm\"",
                    "description": "Right-to-left mirrored forms."
                },
                {
                    "name": "\"ruby\"",
                    "description": "Ruby Notation Forms. Applies only to Japanese."
                },
                {
                    "name": "\"salt\"",
                    "description": "Stylistic Alternates."
                },
                {
                    "name": "\"sinf\"",
                    "description": "Scientific Inferiors."
                },
                {
                    "name": "\"size\"",
                    "description": "Optical size."
                },
                {
                    "name": "\"smcp\"",
                    "description": "Small Capitals. Applies only to bicameral scripts."
                },
                {
                    "name": "\"smpl\"",
                    "description": "Simplified Forms. Applies only to Chinese and Japanese."
                },
                {
                    "name": "\"ssty\"",
                    "description": "Math script style alternates."
                },
                {
                    "name": "\"stch\"",
                    "description": "Stretching Glyph Decomposition."
                },
                {
                    "name": "\"subs\"",
                    "description": "Subscript."
                },
                {
                    "name": "\"sups\"",
                    "description": "Superscript."
                },
                {
                    "name": "\"swsh\"",
                    "description": "Swash. Does not apply to ideographic scripts."
                },
                {
                    "name": "\"titl\"",
                    "description": "Titling."
                },
                {
                    "name": "\"tjmo\"",
                    "description": "Trailing Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported."
                },
                {
                    "name": "\"tnam\"",
                    "description": "Traditional Name Forms. Applies only to Japanese."
                },
                {
                    "name": "\"tnum\"",
                    "description": "Tabular Figures."
                },
                {
                    "name": "\"trad\"",
                    "description": "Traditional Forms. Applies only to Chinese and Japanese."
                },
                {
                    "name": "\"twid\"",
                    "description": "Third Widths. Generally used only in CJKV fonts."
                },
                {
                    "name": "\"unic\"",
                    "description": "Unicase."
                },
                {
                    "name": "\"valt\"",
                    "description": "Alternate Vertical Metrics. Applies only to scripts with vertical writing modes."
                },
                {
                    "name": "\"vatu\"",
                    "description": "Vattu Variants. Used for Indic scripts. E.g. Devanagari."
                },
                {
                    "name": "\"vert\"",
                    "description": "Vertical Alternates. Applies only to scripts with vertical writing modes."
                },
                {
                    "name": "\"vhal\"",
                    "description": "Alternate Vertical Half Metrics. Used only in CJKV fonts."
                },
                {
                    "name": "\"vjmo\"",
                    "description": "Vowel Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported."
                },
                {
                    "name": "\"vkna\"",
                    "description": "Vertical Kana Alternates. Applies only to fonts that support kana (hiragana and katakana)."
                },
                {
                    "name": "\"vkrn\"",
                    "description": "Vertical Kerning."
                },
                {
                    "name": "\"vpal\"",
                    "description": "Proportional Alternate Vertical Metrics. Used mostly in CJKV fonts."
                },
                {
                    "name": "\"vrt2\"",
                    "description": "Vertical Alternates and Rotation. Applies only to scripts with vertical writing modes."
                },
                {
                    "name": "\"zero\"",
                    "description": "Slashed Zero."
                },
                {
                    "name": "normal",
                    "description": "No change in glyph substitution or positioning occurs."
                },
                {
                    "name": "off",
                    "description": "Disable feature."
                },
                {
                    "name": "on",
                    "description": "Enable feature."
                }
            ],
            "syntax": "normal | <feature-tag-value>#",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-feature-settings"
                }
            ],
            "description": "Provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",
            "restrictions": [
                "string",
                "integer"
            ]
        },
        {
            "name": "font-kerning",
            "browsers": [
                "E79",
                "FF32",
                "S9",
                "C33",
                "O20"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Specifies that kerning is applied at the discretion of the user agent."
                },
                {
                    "name": "none",
                    "description": "Specifies that kerning is not applied."
                },
                {
                    "name": "normal",
                    "description": "Specifies that kerning is applied."
                }
            ],
            "syntax": "auto | normal | none",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-kerning"
                }
            ],
            "description": "Kerning is the contextual adjustment of inter-glyph spacing. This property controls metric kerning, kerning that utilizes adjustment data contained in the font.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-language-override",
            "browsers": [
                "FF34"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "Implies that when rendering with OpenType fonts the language of the document is used to infer the OpenType language system, used to select language specific features when rendering."
                }
            ],
            "syntax": "normal | <string>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-language-override"
                }
            ],
            "description": "The value of 'normal' implies that when rendering with OpenType fonts the language of the document is used to infer the OpenType language system, used to select language specific features when rendering.",
            "restrictions": [
                "string"
            ]
        },
        {
            "name": "font-size",
            "values": [
                {
                    "name": "large"
                },
                {
                    "name": "larger"
                },
                {
                    "name": "medium"
                },
                {
                    "name": "small"
                },
                {
                    "name": "smaller"
                },
                {
                    "name": "x-large"
                },
                {
                    "name": "x-small"
                },
                {
                    "name": "xx-large"
                },
                {
                    "name": "xx-small"
                }
            ],
            "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
            "relevance": 94,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-size"
                }
            ],
            "description": "Indicates the desired height of glyphs from the font. For scalable fonts, the font-size is a scale factor applied to the EM unit of the font. (Note that certain glyphs may bleed outside their EM box.) For non-scalable fonts, the font-size is converted into absolute units and matched against the declared font-size of the font, using the same absolute coordinate space for both of the matched values.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "font-size-adjust",
            "browsers": [
                "E79",
                "FF40",
                "C43",
                "O30"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Do not preserve the font’s x-height."
                }
            ],
            "syntax": "none | <number>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-size-adjust"
                }
            ],
            "description": "Preserves the readability of text when font fallback occurs by adjusting the font-size so that the x-height is the same regardless of the font used.",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "font-stretch",
            "values": [
                {
                    "name": "condensed"
                },
                {
                    "name": "expanded"
                },
                {
                    "name": "extra-condensed"
                },
                {
                    "name": "extra-expanded"
                },
                {
                    "name": "narrower",
                    "description": "Indicates a narrower value relative to the width of the parent element."
                },
                {
                    "name": "normal"
                },
                {
                    "name": "semi-condensed"
                },
                {
                    "name": "semi-expanded"
                },
                {
                    "name": "ultra-condensed"
                },
                {
                    "name": "ultra-expanded"
                },
                {
                    "name": "wider",
                    "description": "Indicates a wider value relative to the width of the parent element."
                }
            ],
            "syntax": "<font-stretch-absolute>{1,2}",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-stretch"
                }
            ],
            "description": "Selects a normal, condensed, or expanded face from a font family.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-style",
            "values": [
                {
                    "name": "italic",
                    "description": "Selects a font that is labeled as an 'italic' face, or an 'oblique' face if one is not"
                },
                {
                    "name": "normal",
                    "description": "Selects a face that is classified as 'normal'."
                },
                {
                    "name": "oblique",
                    "description": "Selects a font that is labeled as an 'oblique' face, or an 'italic' face if one is not."
                }
            ],
            "syntax": "normal | italic | oblique <angle>{0,2}",
            "relevance": 83,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-style"
                }
            ],
            "description": "Allows italic or oblique faces to be selected. Italic forms are generally cursive in nature while oblique faces are typically sloped versions of the regular face.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-synthesis",
            "browsers": [
                "FF34",
                "S9"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Disallow all synthetic faces."
                },
                {
                    "name": "style",
                    "description": "Allow synthetic italic faces."
                },
                {
                    "name": "weight",
                    "description": "Allow synthetic bold faces."
                }
            ],
            "syntax": "none | [ weight || style ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-synthesis"
                }
            ],
            "description": "Controls whether user agents are allowed to synthesize bold or oblique font faces when a font family lacks bold or italic faces.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-variant",
            "values": [
                {
                    "name": "normal",
                    "description": "Specifies a face that is not labeled as a small-caps font."
                },
                {
                    "name": "small-caps",
                    "description": "Specifies a font that is labeled as a small-caps font. If a genuine small-caps font is not available, user agents should simulate a small-caps font."
                }
            ],
            "syntax": "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic(<feature-value-name>) || historical-forms || styleset(<feature-value-name>#) || character-variant(<feature-value-name>#) || swash(<feature-value-name>) || ornaments(<feature-value-name>) || annotation(<feature-value-name>) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
            "relevance": 63,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant"
                }
            ],
            "description": "Specifies variant representations of the font",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-variant-alternates",
            "browsers": [
                "FF34"
            ],
            "values": [
                {
                    "name": "annotation()",
                    "description": "Enables display of alternate annotation forms."
                },
                {
                    "name": "character-variant()",
                    "description": "Enables display of specific character variants."
                },
                {
                    "name": "historical-forms",
                    "description": "Enables display of historical forms."
                },
                {
                    "name": "normal",
                    "description": "None of the features are enabled."
                },
                {
                    "name": "ornaments()",
                    "description": "Enables replacement of default glyphs with ornaments, if provided in the font."
                },
                {
                    "name": "styleset()",
                    "description": "Enables display with stylistic sets."
                },
                {
                    "name": "stylistic()",
                    "description": "Enables display of stylistic alternates."
                },
                {
                    "name": "swash()",
                    "description": "Enables display of swash glyphs."
                }
            ],
            "syntax": "normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates"
                }
            ],
            "description": "For any given character, fonts can provide a variety of alternate glyphs in addition to the default glyph for that character. This property provides control over the selection of these alternate glyphs.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-variant-caps",
            "browsers": [
                "E79",
                "FF34",
                "C52",
                "O39"
            ],
            "values": [
                {
                    "name": "all-petite-caps",
                    "description": "Enables display of petite capitals for both upper and lowercase letters."
                },
                {
                    "name": "all-small-caps",
                    "description": "Enables display of small capitals for both upper and lowercase letters."
                },
                {
                    "name": "normal",
                    "description": "None of the features are enabled."
                },
                {
                    "name": "petite-caps",
                    "description": "Enables display of petite capitals."
                },
                {
                    "name": "small-caps",
                    "description": "Enables display of small capitals. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters."
                },
                {
                    "name": "titling-caps",
                    "description": "Enables display of titling capitals."
                },
                {
                    "name": "unicase",
                    "description": "Enables display of mixture of small capitals for uppercase letters with normal lowercase letters."
                }
            ],
            "syntax": "normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-caps"
                }
            ],
            "description": "Specifies control over capitalized forms.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-variant-east-asian",
            "browsers": [
                "E79",
                "FF34",
                "C63",
                "O50"
            ],
            "values": [
                {
                    "name": "full-width",
                    "description": "Enables rendering of full-width variants."
                },
                {
                    "name": "jis04",
                    "description": "Enables rendering of JIS04 forms."
                },
                {
                    "name": "jis78",
                    "description": "Enables rendering of JIS78 forms."
                },
                {
                    "name": "jis83",
                    "description": "Enables rendering of JIS83 forms."
                },
                {
                    "name": "jis90",
                    "description": "Enables rendering of JIS90 forms."
                },
                {
                    "name": "normal",
                    "description": "None of the features are enabled."
                },
                {
                    "name": "proportional-width",
                    "description": "Enables rendering of proportionally-spaced variants."
                },
                {
                    "name": "ruby",
                    "description": "Enables display of ruby variant glyphs."
                },
                {
                    "name": "simplified",
                    "description": "Enables rendering of simplified forms."
                },
                {
                    "name": "traditional",
                    "description": "Enables rendering of traditional forms."
                }
            ],
            "syntax": "normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian"
                }
            ],
            "description": "Allows control of glyph substitute and positioning in East Asian text.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-variant-ligatures",
            "browsers": [
                "E79",
                "FF34",
                "S9.1",
                "C34",
                "O21"
            ],
            "values": [
                {
                    "name": "additional-ligatures",
                    "description": "Enables display of additional ligatures."
                },
                {
                    "name": "common-ligatures",
                    "description": "Enables display of common ligatures."
                },
                {
                    "name": "contextual",
                    "browsers": [
                        "E79",
                        "FF34",
                        "S9.1",
                        "C34",
                        "O21"
                    ],
                    "description": "Enables display of contextual alternates."
                },
                {
                    "name": "discretionary-ligatures",
                    "description": "Enables display of discretionary ligatures."
                },
                {
                    "name": "historical-ligatures",
                    "description": "Enables display of historical ligatures."
                },
                {
                    "name": "no-additional-ligatures",
                    "description": "Disables display of additional ligatures."
                },
                {
                    "name": "no-common-ligatures",
                    "description": "Disables display of common ligatures."
                },
                {
                    "name": "no-contextual",
                    "browsers": [
                        "E79",
                        "FF34",
                        "S9.1",
                        "C34",
                        "O21"
                    ],
                    "description": "Disables display of contextual alternates."
                },
                {
                    "name": "no-discretionary-ligatures",
                    "description": "Disables display of discretionary ligatures."
                },
                {
                    "name": "no-historical-ligatures",
                    "description": "Disables display of historical ligatures."
                },
                {
                    "name": "none",
                    "browsers": [
                        "E79",
                        "FF34",
                        "S9.1",
                        "C34",
                        "O21"
                    ],
                    "description": "Disables all ligatures."
                },
                {
                    "name": "normal",
                    "description": "Implies that the defaults set by the font are used."
                }
            ],
            "syntax": "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures"
                }
            ],
            "description": "Specifies control over which ligatures are enabled or disabled. A value of ‘normal’ implies that the defaults set by the font are used.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-variant-numeric",
            "browsers": [
                "E79",
                "FF34",
                "S9.1",
                "C52",
                "O39"
            ],
            "values": [
                {
                    "name": "diagonal-fractions",
                    "description": "Enables display of lining diagonal fractions."
                },
                {
                    "name": "lining-nums",
                    "description": "Enables display of lining numerals."
                },
                {
                    "name": "normal",
                    "description": "None of the features are enabled."
                },
                {
                    "name": "oldstyle-nums",
                    "description": "Enables display of old-style numerals."
                },
                {
                    "name": "ordinal",
                    "description": "Enables display of letter forms used with ordinal numbers."
                },
                {
                    "name": "proportional-nums",
                    "description": "Enables display of proportional numerals."
                },
                {
                    "name": "slashed-zero",
                    "description": "Enables display of slashed zeros."
                },
                {
                    "name": "stacked-fractions",
                    "description": "Enables display of lining stacked fractions."
                },
                {
                    "name": "tabular-nums",
                    "description": "Enables display of tabular numerals."
                }
            ],
            "syntax": "normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric"
                }
            ],
            "description": "Specifies control over numerical forms.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-variant-position",
            "browsers": [
                "FF34"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "None of the features are enabled."
                },
                {
                    "name": "sub",
                    "description": "Enables display of subscript variants (OpenType feature: subs)."
                },
                {
                    "name": "super",
                    "description": "Enables display of superscript variants (OpenType feature: sups)."
                }
            ],
            "syntax": "normal | sub | super",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-position"
                }
            ],
            "description": "Specifies the vertical position",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-weight",
            "values": [
                {
                    "name": "100",
                    "description": "Thin"
                },
                {
                    "name": "200",
                    "description": "Extra Light (Ultra Light)"
                },
                {
                    "name": "300",
                    "description": "Light"
                },
                {
                    "name": "400",
                    "description": "Normal"
                },
                {
                    "name": "500",
                    "description": "Medium"
                },
                {
                    "name": "600",
                    "description": "Semi Bold (Demi Bold)"
                },
                {
                    "name": "700",
                    "description": "Bold"
                },
                {
                    "name": "800",
                    "description": "Extra Bold (Ultra Bold)"
                },
                {
                    "name": "900",
                    "description": "Black (Heavy)"
                },
                {
                    "name": "bold",
                    "description": "Same as 700"
                },
                {
                    "name": "bolder",
                    "description": "Specifies the weight of the face bolder than the inherited value."
                },
                {
                    "name": "lighter",
                    "description": "Specifies the weight of the face lighter than the inherited value."
                },
                {
                    "name": "normal",
                    "description": "Same as 400"
                }
            ],
            "syntax": "<font-weight-absolute>{1,2}",
            "relevance": 93,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-weight"
                }
            ],
            "description": "Specifies weight of glyphs in the font, their degree of blackness or stroke thickness.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "glyph-orientation-horizontal",
            "relevance": 50,
            "description": "Controls glyph orientation when the inline-progression-direction is horizontal.",
            "restrictions": [
                "angle",
                "number"
            ]
        },
        {
            "name": "glyph-orientation-vertical",
            "values": [
                {
                    "name": "auto",
                    "description": "Sets the orientation based on the fullwidth or non-fullwidth characters and the most common orientation."
                }
            ],
            "relevance": 50,
            "description": "Controls glyph orientation when the inline-progression-direction is vertical.",
            "restrictions": [
                "angle",
                "number",
                "enum"
            ]
        },
        {
            "name": "grid-area",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The property contributes nothing to the grid item’s placement, indicating auto-placement, an automatic span, or a default span of one."
                },
                {
                    "name": "span",
                    "description": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge."
                }
            ],
            "syntax": "<grid-line> [ / <grid-line> ]{0,3}",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-area"
                }
            ],
            "description": "Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement. Shorthand for 'grid-row-start', 'grid-column-start', 'grid-row-end', and 'grid-column-end'.",
            "restrictions": [
                "identifier",
                "integer"
            ]
        },
        {
            "name": "grid",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "syntax": "<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid"
                }
            ],
            "description": "The grid CSS property is a shorthand property that sets all of the explicit grid properties ('grid-template-rows', 'grid-template-columns', and 'grid-template-areas'), and all the implicit grid properties ('grid-auto-rows', 'grid-auto-columns', and 'grid-auto-flow'), in a single declaration.",
            "restrictions": [
                "identifier",
                "length",
                "percentage",
                "string",
                "enum"
            ]
        },
        {
            "name": "grid-auto-columns",
            "values": [
                {
                    "name": "min-content",
                    "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "max-content",
                    "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "auto",
                    "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
                },
                {
                    "name": "minmax()",
                    "description": "Defines a size range greater than or equal to min and less than or equal to max."
                }
            ],
            "syntax": "<track-size>+",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns"
                }
            ],
            "description": "Specifies the size of implicitly created columns.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "grid-auto-flow",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "row",
                    "description": "The auto-placement algorithm places items by filling each row in turn, adding new rows as necessary."
                },
                {
                    "name": "column",
                    "description": "The auto-placement algorithm places items by filling each column in turn, adding new columns as necessary."
                },
                {
                    "name": "dense",
                    "description": "If specified, the auto-placement algorithm uses a “dense” packing algorithm, which attempts to fill in holes earlier in the grid if smaller items come up later."
                }
            ],
            "syntax": "[ row | column ] || dense",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow"
                }
            ],
            "description": "Controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "grid-auto-rows",
            "values": [
                {
                    "name": "min-content",
                    "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "max-content",
                    "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "auto",
                    "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
                },
                {
                    "name": "minmax()",
                    "description": "Defines a size range greater than or equal to min and less than or equal to max."
                }
            ],
            "syntax": "<track-size>+",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows"
                }
            ],
            "description": "Specifies the size of implicitly created rows.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "grid-column",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The property contributes nothing to the grid item’s placement, indicating auto-placement, an automatic span, or a default span of one."
                },
                {
                    "name": "span",
                    "description": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge."
                }
            ],
            "syntax": "<grid-line> [ / <grid-line> ]?",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-column"
                }
            ],
            "description": "Shorthand for 'grid-column-start' and 'grid-column-end'.",
            "restrictions": [
                "identifier",
                "integer",
                "enum"
            ]
        },
        {
            "name": "grid-column-end",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The property contributes nothing to the grid item’s placement, indicating auto-placement, an automatic span, or a default span of one."
                },
                {
                    "name": "span",
                    "description": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge."
                }
            ],
            "syntax": "<grid-line>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-column-end"
                }
            ],
            "description": "Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
            "restrictions": [
                "identifier",
                "integer",
                "enum"
            ]
        },
        {
            "name": "grid-column-gap",
            "browsers": [
                "FF52",
                "C57",
                "S10.1",
                "O44"
            ],
            "status": "obsolete",
            "syntax": "<length-percentage>",
            "relevance": 1,
            "description": "Specifies the gutters between grid columns. Replaced by 'column-gap' property.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "grid-column-start",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The property contributes nothing to the grid item’s placement, indicating auto-placement, an automatic span, or a default span of one."
                },
                {
                    "name": "span",
                    "description": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge."
                }
            ],
            "syntax": "<grid-line>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-column-start"
                }
            ],
            "description": "Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
            "restrictions": [
                "identifier",
                "integer",
                "enum"
            ]
        },
        {
            "name": "grid-gap",
            "browsers": [
                "FF52",
                "C57",
                "S10.1",
                "O44"
            ],
            "status": "obsolete",
            "syntax": "<'grid-row-gap'> <'grid-column-gap'>?",
            "relevance": 1,
            "description": "Shorthand that specifies the gutters between grid columns and grid rows in one declaration. Replaced by 'gap' property.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "grid-row",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The property contributes nothing to the grid item’s placement, indicating auto-placement, an automatic span, or a default span of one."
                },
                {
                    "name": "span",
                    "description": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge."
                }
            ],
            "syntax": "<grid-line> [ / <grid-line> ]?",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-row"
                }
            ],
            "description": "Shorthand for 'grid-row-start' and 'grid-row-end'.",
            "restrictions": [
                "identifier",
                "integer",
                "enum"
            ]
        },
        {
            "name": "grid-row-end",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The property contributes nothing to the grid item’s placement, indicating auto-placement, an automatic span, or a default span of one."
                },
                {
                    "name": "span",
                    "description": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge."
                }
            ],
            "syntax": "<grid-line>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-row-end"
                }
            ],
            "description": "Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
            "restrictions": [
                "identifier",
                "integer",
                "enum"
            ]
        },
        {
            "name": "grid-row-gap",
            "browsers": [
                "FF52",
                "C57",
                "S10.1",
                "O44"
            ],
            "status": "obsolete",
            "syntax": "<length-percentage>",
            "relevance": 1,
            "description": "Specifies the gutters between grid rows. Replaced by 'row-gap' property.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "grid-row-start",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The property contributes nothing to the grid item’s placement, indicating auto-placement, an automatic span, or a default span of one."
                },
                {
                    "name": "span",
                    "description": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge."
                }
            ],
            "syntax": "<grid-line>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-row-start"
                }
            ],
            "description": "Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
            "restrictions": [
                "identifier",
                "integer",
                "enum"
            ]
        },
        {
            "name": "grid-template",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Sets all three properties to their initial values."
                },
                {
                    "name": "min-content",
                    "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "max-content",
                    "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "auto",
                    "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
                },
                {
                    "name": "subgrid",
                    "description": "Sets 'grid-template-rows' and 'grid-template-columns' to 'subgrid', and 'grid-template-areas' to its initial value."
                },
                {
                    "name": "minmax()",
                    "description": "Defines a size range greater than or equal to min and less than or equal to max."
                },
                {
                    "name": "repeat()",
                    "description": "Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form."
                }
            ],
            "syntax": "none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-template"
                }
            ],
            "description": "Shorthand for setting grid-template-columns, grid-template-rows, and grid-template-areas in a single declaration.",
            "restrictions": [
                "identifier",
                "length",
                "percentage",
                "string",
                "enum"
            ]
        },
        {
            "name": "grid-template-areas",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The grid container doesn’t define any named grid areas."
                }
            ],
            "syntax": "none | <string>+",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-template-areas"
                }
            ],
            "description": "Specifies named grid areas, which are not associated with any particular grid item, but can be referenced from the grid-placement properties.",
            "restrictions": [
                "string"
            ]
        },
        {
            "name": "grid-template-columns",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "There is no explicit grid; any rows/columns will be implicitly generated."
                },
                {
                    "name": "min-content",
                    "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "max-content",
                    "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "auto",
                    "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
                },
                {
                    "name": "subgrid",
                    "description": "Indicates that the grid will align to its parent grid in that axis."
                },
                {
                    "name": "minmax()",
                    "description": "Defines a size range greater than or equal to min and less than or equal to max."
                },
                {
                    "name": "repeat()",
                    "description": "Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form."
                }
            ],
            "syntax": "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-template-columns"
                }
            ],
            "description": "specifies, as a space-separated track list, the line names and track sizing functions of the grid.",
            "restrictions": [
                "identifier",
                "length",
                "percentage",
                "enum"
            ]
        },
        {
            "name": "grid-template-rows",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "There is no explicit grid; any rows/columns will be implicitly generated."
                },
                {
                    "name": "min-content",
                    "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "max-content",
                    "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "auto",
                    "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
                },
                {
                    "name": "subgrid",
                    "description": "Indicates that the grid will align to its parent grid in that axis."
                },
                {
                    "name": "minmax()",
                    "description": "Defines a size range greater than or equal to min and less than or equal to max."
                },
                {
                    "name": "repeat()",
                    "description": "Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form."
                }
            ],
            "syntax": "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-template-rows"
                }
            ],
            "description": "specifies, as a space-separated track list, the line names and track sizing functions of the grid.",
            "restrictions": [
                "identifier",
                "length",
                "percentage",
                "string",
                "enum"
            ]
        },
        {
            "name": "height",
            "values": [
                {
                    "name": "auto",
                    "description": "The height depends on the values of other properties."
                },
                {
                    "name": "fit-content",
                    "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "max-content",
                    "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "min-content",
                    "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
                }
            ],
            "syntax": "<viewport-length>{1,2}",
            "relevance": 96,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/height"
                }
            ],
            "description": "Specifies the height of the content area, padding area or border area (depending on 'box-sizing') of certain boxes.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "hyphens",
            "values": [
                {
                    "name": "auto",
                    "description": "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."
                },
                {
                    "name": "manual",
                    "description": "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities"
                },
                {
                    "name": "none",
                    "description": "Words are not broken at line breaks, even if characters inside the word suggest line break points."
                }
            ],
            "syntax": "none | manual | auto",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/hyphens"
                }
            ],
            "description": "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "image-orientation",
            "browsers": [
                "E81",
                "FF26",
                "S13.1",
                "C81",
                "O67"
            ],
            "values": [
                {
                    "name": "flip",
                    "description": "After rotating by the precededing angle, the image is flipped horizontally. Defaults to 0deg if the angle is ommitted."
                },
                {
                    "name": "from-image",
                    "description": "If the image has an orientation specified in its metadata, such as EXIF, this value computes to the angle that the metadata specifies is necessary to correctly orient the image."
                }
            ],
            "syntax": "from-image | <angle> | [ <angle>? flip ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/image-orientation"
                }
            ],
            "description": "Specifies an orthogonal rotation to be applied to an image before it is laid out.",
            "restrictions": [
                "angle"
            ]
        },
        {
            "name": "image-rendering",
            "browsers": [
                "E79",
                "FF3.6",
                "S6",
                "C13",
                "O15"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The image should be scaled with an algorithm that maximizes the appearance of the image."
                },
                {
                    "name": "crisp-edges",
                    "description": "The image must be scaled with an algorithm that preserves contrast and edges in the image, and which does not smooth colors or introduce blur to the image in the process."
                },
                {
                    "name": "-moz-crisp-edges",
                    "browsers": [
                        "E79",
                        "FF3.6",
                        "S6",
                        "C13",
                        "O15"
                    ]
                },
                {
                    "name": "optimizeQuality",
                    "description": "Deprecated."
                },
                {
                    "name": "optimizeSpeed",
                    "description": "Deprecated."
                },
                {
                    "name": "pixelated",
                    "description": "When scaling the image up, the 'nearest neighbor' or similar algorithm must be used, so that the image appears to be simply composed of very large pixels."
                }
            ],
            "syntax": "auto | crisp-edges | pixelated",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/image-rendering"
                }
            ],
            "description": "Provides a hint to the user-agent about what aspects of an image are most important to preserve when the image is scaled, to aid the user-agent in the choice of an appropriate scaling algorithm.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "ime-mode",
            "browsers": [
                "E12",
                "FF3",
                "IE5"
            ],
            "values": [
                {
                    "name": "active",
                    "description": "The input method editor is initially active; text entry is performed using it unless the user specifically dismisses it."
                },
                {
                    "name": "auto",
                    "description": "No change is made to the current input method editor state. This is the default."
                },
                {
                    "name": "disabled",
                    "description": "The input method editor is disabled and may not be activated by the user."
                },
                {
                    "name": "inactive",
                    "description": "The input method editor is initially inactive, but the user may activate it if they wish."
                },
                {
                    "name": "normal",
                    "description": "The IME state should be normal; this value can be used in a user style sheet to override the page setting."
                }
            ],
            "status": "obsolete",
            "syntax": "auto | normal | active | inactive | disabled",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/ime-mode"
                }
            ],
            "description": "Controls the state of the input method editor for text fields.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "inline-size",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Depends on the values of other properties."
                }
            ],
            "syntax": "<'width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inline-size"
                }
            ],
            "description": "Logical 'height'. Mapping depends on the element’s 'writing-mode'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "isolation",
            "browsers": [
                "E79",
                "FF36",
                "S8",
                "C41",
                "O30"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Elements are not isolated unless an operation is applied that causes the creation of a stacking context."
                },
                {
                    "name": "isolate",
                    "description": "In CSS will turn the element into a stacking context."
                }
            ],
            "syntax": "auto | isolate",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/isolation"
                }
            ],
            "description": "In CSS setting to 'isolate' will turn the element into a stacking context. In SVG, it defines whether an element is isolated or not.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "justify-content",
            "values": [
                {
                    "name": "center",
                    "description": "Flex items are packed toward the center of the line."
                },
                {
                    "name": "start",
                    "description": "The items are packed flush to each other toward the start edge of the alignment container in the main axis."
                },
                {
                    "name": "end",
                    "description": "The items are packed flush to each other toward the end edge of the alignment container in the main axis."
                },
                {
                    "name": "left",
                    "description": "The items are packed flush to each other toward the left edge of the alignment container in the main axis."
                },
                {
                    "name": "right",
                    "description": "The items are packed flush to each other toward the right edge of the alignment container in the main axis."
                },
                {
                    "name": "safe",
                    "description": "If the size of the item overflows the alignment container, the item is instead aligned as if the alignment mode were start."
                },
                {
                    "name": "unsafe",
                    "description": "Regardless of the relative sizes of the item and alignment container, the given alignment value is honored."
                },
                {
                    "name": "stretch",
                    "description": "If the combined size of the alignment subjects is less than the size of the alignment container, any auto-sized alignment subjects have their size increased equally (not proportionally), while still respecting the constraints imposed by max-height/max-width (or equivalent functionality), so that the combined size exactly fills the alignment container."
                },
                {
                    "name": "space-evenly",
                    "description": "The items are evenly distributed within the alignment container along the main axis."
                },
                {
                    "name": "flex-end",
                    "description": "Flex items are packed toward the end of the line."
                },
                {
                    "name": "flex-start",
                    "description": "Flex items are packed toward the start of the line."
                },
                {
                    "name": "space-around",
                    "description": "Flex items are evenly distributed in the line, with half-size spaces on either end."
                },
                {
                    "name": "space-between",
                    "description": "Flex items are evenly distributed in the line."
                },
                {
                    "name": "baseline",
                    "description": "Specifies participation in first-baseline alignment."
                },
                {
                    "name": "first baseline",
                    "description": "Specifies participation in first-baseline alignment."
                },
                {
                    "name": "last baseline",
                    "description": "Specifies participation in last-baseline alignment."
                }
            ],
            "syntax": "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
            "relevance": 82,
            "description": "Aligns flex items along the main axis of the current line of the flex container.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "kerning",
            "values": [
                {
                    "name": "auto",
                    "description": "Indicates that the user agent should adjust inter-glyph spacing based on kerning tables that are included in the font that will be used."
                }
            ],
            "relevance": 50,
            "description": "Indicates whether the user agent should adjust inter-glyph spacing based on kerning tables that are included in the relevant font or instead disable auto-kerning and set inter-character spacing to a specific length.",
            "restrictions": [
                "length",
                "enum"
            ]
        },
        {
            "name": "left",
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 95,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/left"
                }
            ],
            "description": "Specifies how far an absolutely positioned box's left margin edge is offset to the right of the left edge of the box's 'containing block'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "letter-spacing",
            "values": [
                {
                    "name": "normal",
                    "description": "The spacing is the normal spacing for the current font. It is typically zero-length."
                }
            ],
            "syntax": "normal | <length>",
            "relevance": 79,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/letter-spacing"
                }
            ],
            "description": "Specifies the minimum, maximum, and optimal spacing between grapheme clusters.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "lighting-color",
            "browsers": [
                "E",
                "C5",
                "FF3",
                "IE10",
                "O9",
                "S6"
            ],
            "relevance": 50,
            "description": "Defines the color of the light source for filter primitives 'feDiffuseLighting' and 'feSpecularLighting'.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "line-break",
            "values": [
                {
                    "name": "auto",
                    "description": "The UA determines the set of line-breaking restrictions to use for CJK scripts, and it may vary the restrictions based on the length of the line; e.g., use a less restrictive set of line-break rules for short lines."
                },
                {
                    "name": "loose",
                    "description": "Breaks text using the least restrictive set of line-breaking rules. Typically used for short lines, such as in newspapers."
                },
                {
                    "name": "normal",
                    "description": "Breaks text using the most common set of line-breaking rules."
                },
                {
                    "name": "strict",
                    "description": "Breaks CJK scripts using a more restrictive set of line-breaking rules than 'normal'."
                }
            ],
            "syntax": "auto | loose | normal | strict | anywhere",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/line-break"
                }
            ],
            "description": "Specifies what set of line breaking restrictions are in effect within the element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "line-height",
            "values": [
                {
                    "name": "normal",
                    "description": "Tells user agents to set the computed value to a 'reasonable' value based on the font size of the element."
                }
            ],
            "syntax": "normal | <number> | <length> | <percentage>",
            "relevance": 92,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/line-height"
                }
            ],
            "description": "Determines the block-progression dimension of the text content area of an inline box.",
            "restrictions": [
                "number",
                "length",
                "percentage"
            ]
        },
        {
            "name": "list-style",
            "values": [
                {
                    "name": "armenian"
                },
                {
                    "name": "circle",
                    "description": "A hollow circle."
                },
                {
                    "name": "decimal"
                },
                {
                    "name": "decimal-leading-zero"
                },
                {
                    "name": "disc",
                    "description": "A filled circle."
                },
                {
                    "name": "georgian"
                },
                {
                    "name": "inside",
                    "description": "The marker box is outside the principal block box, as described in the section on the ::marker pseudo-element below."
                },
                {
                    "name": "lower-alpha"
                },
                {
                    "name": "lower-greek"
                },
                {
                    "name": "lower-latin"
                },
                {
                    "name": "lower-roman"
                },
                {
                    "name": "none"
                },
                {
                    "name": "outside",
                    "description": "The ::marker pseudo-element is an inline element placed immediately before all ::before pseudo-elements in the principal block box, after which the element's content flows."
                },
                {
                    "name": "square",
                    "description": "A filled square."
                },
                {
                    "name": "symbols()",
                    "description": "Allows a counter style to be defined inline."
                },
                {
                    "name": "upper-alpha"
                },
                {
                    "name": "upper-latin"
                },
                {
                    "name": "upper-roman"
                },
                {
                    "name": "url()"
                }
            ],
            "syntax": "<'list-style-type'> || <'list-style-position'> || <'list-style-image'>",
            "relevance": 84,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/list-style"
                }
            ],
            "description": "Shorthand for setting 'list-style-type', 'list-style-position' and 'list-style-image'",
            "restrictions": [
                "image",
                "enum",
                "url"
            ]
        },
        {
            "name": "list-style-image",
            "values": [
                {
                    "name": "none",
                    "description": "The default contents of the of the list item’s marker are given by 'list-style-type' instead."
                }
            ],
            "syntax": "<url> | none",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/list-style-image"
                }
            ],
            "description": "Sets the image that will be used as the list item marker. When the image is available, it will replace the marker set with the 'list-style-type' marker.",
            "restrictions": [
                "image"
            ]
        },
        {
            "name": "list-style-position",
            "values": [
                {
                    "name": "inside",
                    "description": "The marker box is outside the principal block box, as described in the section on the ::marker pseudo-element below."
                },
                {
                    "name": "outside",
                    "description": "The ::marker pseudo-element is an inline element placed immediately before all ::before pseudo-elements in the principal block box, after which the element's content flows."
                }
            ],
            "syntax": "inside | outside",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/list-style-position"
                }
            ],
            "description": "Specifies the position of the '::marker' pseudo-element's box in the list item.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "list-style-type",
            "values": [
                {
                    "name": "armenian",
                    "description": "Traditional uppercase Armenian numbering."
                },
                {
                    "name": "circle",
                    "description": "A hollow circle."
                },
                {
                    "name": "decimal",
                    "description": "Western decimal numbers."
                },
                {
                    "name": "decimal-leading-zero",
                    "description": "Decimal numbers padded by initial zeros."
                },
                {
                    "name": "disc",
                    "description": "A filled circle."
                },
                {
                    "name": "georgian",
                    "description": "Traditional Georgian numbering."
                },
                {
                    "name": "lower-alpha",
                    "description": "Lowercase ASCII letters."
                },
                {
                    "name": "lower-greek",
                    "description": "Lowercase classical Greek."
                },
                {
                    "name": "lower-latin",
                    "description": "Lowercase ASCII letters."
                },
                {
                    "name": "lower-roman",
                    "description": "Lowercase ASCII Roman numerals."
                },
                {
                    "name": "none",
                    "description": "No marker"
                },
                {
                    "name": "square",
                    "description": "A filled square."
                },
                {
                    "name": "symbols()",
                    "description": "Allows a counter style to be defined inline."
                },
                {
                    "name": "upper-alpha",
                    "description": "Uppercase ASCII letters."
                },
                {
                    "name": "upper-latin",
                    "description": "Uppercase ASCII letters."
                },
                {
                    "name": "upper-roman",
                    "description": "Uppercase ASCII Roman numerals."
                }
            ],
            "syntax": "<counter-style> | <string> | none",
            "relevance": 74,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/list-style-type"
                }
            ],
            "description": "Used to construct the default contents of a list item’s marker",
            "restrictions": [
                "enum",
                "string"
            ]
        },
        {
            "name": "margin",
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "[ <length> | <percentage> | auto ]{1,4}",
            "relevance": 95,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin"
                }
            ],
            "description": "Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-block-end",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<'margin-left'>",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-block-end"
                }
            ],
            "description": "Logical 'margin-bottom'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-block-start",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<'margin-left'>",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-block-start"
                }
            ],
            "description": "Logical 'margin-top'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-bottom",
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 91,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-bottom"
                }
            ],
            "description": "Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-inline-end",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<'margin-left'>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-inline-end"
                }
            ],
            "description": "Logical 'margin-right'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-inline-start",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<'margin-left'>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-inline-start"
                }
            ],
            "description": "Logical 'margin-left'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-left",
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 91,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-left"
                }
            ],
            "description": "Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-right",
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 90,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-right"
                }
            ],
            "description": "Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-top",
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 95,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-top"
                }
            ],
            "description": "Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "marker",
            "values": [
                {
                    "name": "none",
                    "description": "Indicates that no marker symbol will be drawn at the given vertex or vertices."
                },
                {
                    "name": "url()",
                    "description": "Indicates that the <marker> element referenced will be used."
                }
            ],
            "relevance": 50,
            "description": "Specifies the marker symbol that shall be used for all points on the sets the value for all vertices on the given ‘path’ element or basic shape.",
            "restrictions": [
                "url"
            ]
        },
        {
            "name": "marker-end",
            "values": [
                {
                    "name": "none",
                    "description": "Indicates that no marker symbol will be drawn at the given vertex or vertices."
                },
                {
                    "name": "url()",
                    "description": "Indicates that the <marker> element referenced will be used."
                }
            ],
            "relevance": 50,
            "description": "Specifies the marker that will be drawn at the last vertices of the given markable element.",
            "restrictions": [
                "url"
            ]
        },
        {
            "name": "marker-mid",
            "values": [
                {
                    "name": "none",
                    "description": "Indicates that no marker symbol will be drawn at the given vertex or vertices."
                },
                {
                    "name": "url()",
                    "description": "Indicates that the <marker> element referenced will be used."
                }
            ],
            "relevance": 50,
            "description": "Specifies the marker that will be drawn at all vertices except the first and last.",
            "restrictions": [
                "url"
            ]
        },
        {
            "name": "marker-start",
            "values": [
                {
                    "name": "none",
                    "description": "Indicates that no marker symbol will be drawn at the given vertex or vertices."
                },
                {
                    "name": "url()",
                    "description": "Indicates that the <marker> element referenced will be used."
                }
            ],
            "relevance": 50,
            "description": "Specifies the marker that will be drawn at the first vertices of the given markable element.",
            "restrictions": [
                "url"
            ]
        },
        {
            "name": "mask-image",
            "browsers": [
                "E16",
                "FF53",
                "S4",
                "C1",
                "O15"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Counts as a transparent black image layer."
                },
                {
                    "name": "url()",
                    "description": "Reference to a <mask element or to a CSS image."
                }
            ],
            "syntax": "<mask-reference>#",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-image"
                }
            ],
            "description": "Sets the mask layer image of an element.",
            "restrictions": [
                "url",
                "image",
                "enum"
            ]
        },
        {
            "name": "mask-mode",
            "browsers": [
                "FF53"
            ],
            "values": [
                {
                    "name": "alpha",
                    "description": "Alpha values of the mask layer image should be used as the mask values."
                },
                {
                    "name": "auto",
                    "description": "Use alpha values if 'mask-image' is an image, luminance if a <mask> element or a CSS image."
                },
                {
                    "name": "luminance",
                    "description": "Luminance values of the mask layer image should be used as the mask values."
                }
            ],
            "syntax": "<masking-mode>#",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-mode"
                }
            ],
            "description": "Indicates whether the mask layer image is treated as luminance mask or alpha mask.",
            "restrictions": [
                "url",
                "image",
                "enum"
            ]
        },
        {
            "name": "mask-origin",
            "browsers": [
                "E79",
                "FF53",
                "S4",
                "C1",
                "O15"
            ],
            "syntax": "<geometry-box>#",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-origin"
                }
            ],
            "description": "Specifies the mask positioning area.",
            "restrictions": [
                "geometry-box",
                "enum"
            ]
        },
        {
            "name": "mask-position",
            "browsers": [
                "E18",
                "FF53",
                "S3.2",
                "C1",
                "O15"
            ],
            "syntax": "<position>#",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-position"
                }
            ],
            "description": "Specifies how mask layer images are positioned.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "mask-repeat",
            "browsers": [
                "E18",
                "FF53",
                "S3.2",
                "C1",
                "O15"
            ],
            "syntax": "<repeat-style>#",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-repeat"
                }
            ],
            "description": "Specifies how mask layer images are tiled after they have been sized and positioned.",
            "restrictions": [
                "repeat"
            ]
        },
        {
            "name": "mask-size",
            "browsers": [
                "E18",
                "FF53",
                "S4",
                "C4",
                "O15"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Resolved by using the image’s intrinsic ratio and the size of the other dimension, or failing that, using the image’s intrinsic size, or failing that, treating it as 100%."
                },
                {
                    "name": "contain",
                    "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area."
                },
                {
                    "name": "cover",
                    "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area."
                }
            ],
            "syntax": "<bg-size>#",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-size"
                }
            ],
            "description": "Specifies the size of the mask layer images.",
            "restrictions": [
                "length",
                "percentage",
                "enum"
            ]
        },
        {
            "name": "mask-type",
            "browsers": [
                "E79",
                "FF35",
                "S6.1",
                "C24",
                "O15"
            ],
            "values": [
                {
                    "name": "alpha",
                    "description": "Indicates that the alpha values of the mask should be used."
                },
                {
                    "name": "luminance",
                    "description": "Indicates that the luminance values of the mask should be used."
                }
            ],
            "syntax": "luminance | alpha",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-type"
                }
            ],
            "description": "Defines whether the content of the <mask> element is treated as as luminance mask or alpha mask.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "max-block-size",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No limit on the width of the box."
                }
            ],
            "syntax": "<'max-width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/max-block-size"
                }
            ],
            "description": "Logical 'max-width'. Mapping depends on the element’s 'writing-mode'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "max-height",
            "values": [
                {
                    "name": "none",
                    "description": "No limit on the height of the box."
                },
                {
                    "name": "fit-content",
                    "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "max-content",
                    "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "min-content",
                    "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
                }
            ],
            "syntax": "<viewport-length>",
            "relevance": 84,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/max-height"
                }
            ],
            "description": "Allows authors to constrain content height to a certain range.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "max-inline-size",
            "browsers": [
                "E79",
                "FF41",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No limit on the height of the box."
                }
            ],
            "syntax": "<'max-width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/max-inline-size"
                }
            ],
            "description": "Logical 'max-height'. Mapping depends on the element’s 'writing-mode'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "max-width",
            "values": [
                {
                    "name": "none",
                    "description": "No limit on the width of the box."
                },
                {
                    "name": "fit-content",
                    "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "max-content",
                    "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "min-content",
                    "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
                }
            ],
            "syntax": "<viewport-length>",
            "relevance": 89,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/max-width"
                }
            ],
            "description": "Allows authors to constrain content width to a certain range.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "min-block-size",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C57",
                "O44"
            ],
            "syntax": "<'min-width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/min-block-size"
                }
            ],
            "description": "Logical 'min-width'. Mapping depends on the element’s 'writing-mode'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "min-height",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "fit-content",
                    "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "max-content",
                    "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "min-content",
                    "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
                }
            ],
            "syntax": "<viewport-length>",
            "relevance": 88,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/min-height"
                }
            ],
            "description": "Allows authors to constrain content height to a certain range.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "min-inline-size",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C57",
                "O44"
            ],
            "syntax": "<'min-width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/min-inline-size"
                }
            ],
            "description": "Logical 'min-height'. Mapping depends on the element’s 'writing-mode'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "min-width",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "fit-content",
                    "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "max-content",
                    "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "min-content",
                    "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
                }
            ],
            "syntax": "<viewport-length>",
            "relevance": 87,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/min-width"
                }
            ],
            "description": "Allows authors to constrain content width to a certain range.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "mix-blend-mode",
            "browsers": [
                "E79",
                "FF32",
                "S8",
                "C41",
                "O28"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "Default attribute which specifies no blending"
                },
                {
                    "name": "multiply",
                    "description": "The source color is multiplied by the destination color and replaces the destination."
                },
                {
                    "name": "screen",
                    "description": "Multiplies the complements of the backdrop and source color values, then complements the result."
                },
                {
                    "name": "overlay",
                    "description": "Multiplies or screens the colors, depending on the backdrop color value."
                },
                {
                    "name": "darken",
                    "description": "Selects the darker of the backdrop and source colors."
                },
                {
                    "name": "lighten",
                    "description": "Selects the lighter of the backdrop and source colors."
                },
                {
                    "name": "color-dodge",
                    "description": "Brightens the backdrop color to reflect the source color."
                },
                {
                    "name": "color-burn",
                    "description": "Darkens the backdrop color to reflect the source color."
                },
                {
                    "name": "hard-light",
                    "description": "Multiplies or screens the colors, depending on the source color value."
                },
                {
                    "name": "soft-light",
                    "description": "Darkens or lightens the colors, depending on the source color value."
                },
                {
                    "name": "difference",
                    "description": "Subtracts the darker of the two constituent colors from the lighter color.."
                },
                {
                    "name": "exclusion",
                    "description": "Produces an effect similar to that of the Difference mode but lower in contrast."
                },
                {
                    "name": "hue",
                    "browsers": [
                        "E79",
                        "FF32",
                        "S8",
                        "C41",
                        "O28"
                    ],
                    "description": "Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color."
                },
                {
                    "name": "saturation",
                    "browsers": [
                        "E79",
                        "FF32",
                        "S8",
                        "C41",
                        "O28"
                    ],
                    "description": "Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color."
                },
                {
                    "name": "color",
                    "browsers": [
                        "E79",
                        "FF32",
                        "S8",
                        "C41",
                        "O28"
                    ],
                    "description": "Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color."
                },
                {
                    "name": "luminosity",
                    "browsers": [
                        "E79",
                        "FF32",
                        "S8",
                        "C41",
                        "O28"
                    ],
                    "description": "Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color."
                }
            ],
            "syntax": "<blend-mode>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode"
                }
            ],
            "description": "Defines the formula that must be used to mix the colors with the backdrop.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "motion",
            "browsers": [
                "C46",
                "O33"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No motion path gets created."
                },
                {
                    "name": "path()",
                    "description": "Defines an SVG path as a string, with optional 'fill-rule' as the first argument."
                },
                {
                    "name": "auto",
                    "description": "Indicates that the object is rotated by the angle of the direction of the motion path."
                },
                {
                    "name": "reverse",
                    "description": "Indicates that the object is rotated by the angle of the direction of the motion path plus 180 degrees."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property for setting 'motion-path', 'motion-offset' and 'motion-rotation'.",
            "restrictions": [
                "url",
                "length",
                "percentage",
                "angle",
                "shape",
                "geometry-box",
                "enum"
            ]
        },
        {
            "name": "motion-offset",
            "browsers": [
                "C46",
                "O33"
            ],
            "relevance": 50,
            "description": "A distance that describes the position along the specified motion path.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "motion-path",
            "browsers": [
                "C46",
                "O33"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No motion path gets created."
                },
                {
                    "name": "path()",
                    "description": "Defines an SVG path as a string, with optional 'fill-rule' as the first argument."
                }
            ],
            "relevance": 50,
            "description": "Specifies the motion path the element gets positioned at.",
            "restrictions": [
                "url",
                "shape",
                "geometry-box",
                "enum"
            ]
        },
        {
            "name": "motion-rotation",
            "browsers": [
                "C46",
                "O33"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Indicates that the object is rotated by the angle of the direction of the motion path."
                },
                {
                    "name": "reverse",
                    "description": "Indicates that the object is rotated by the angle of the direction of the motion path plus 180 degrees."
                }
            ],
            "relevance": 50,
            "description": "Defines the direction of the element while positioning along the motion path.",
            "restrictions": [
                "angle"
            ]
        },
        {
            "name": "-moz-animation",
            "browsers": [
                "FF9"
            ],
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "backwards",
                    "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
                },
                {
                    "name": "both",
                    "description": "Both forwards and backwards fill modes are applied."
                },
                {
                    "name": "forwards",
                    "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
                },
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                },
                {
                    "name": "none",
                    "description": "No animation is performed"
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property combines six of the animation properties into a single property.",
            "restrictions": [
                "time",
                "enum",
                "timing-function",
                "identifier",
                "number"
            ]
        },
        {
            "name": "-moz-animation-delay",
            "browsers": [
                "FF9"
            ],
            "relevance": 50,
            "description": "Defines when the animation will start.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-moz-animation-direction",
            "browsers": [
                "FF9"
            ],
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "relevance": 50,
            "description": "Defines whether or not the animation should play in reverse on alternate cycles.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-animation-duration",
            "browsers": [
                "FF9"
            ],
            "relevance": 50,
            "description": "Defines the length of time that an animation takes to complete one cycle.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-moz-animation-iteration-count",
            "browsers": [
                "FF9"
            ],
            "values": [
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                }
            ],
            "relevance": 50,
            "description": "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
            "restrictions": [
                "number",
                "enum"
            ]
        },
        {
            "name": "-moz-animation-name",
            "browsers": [
                "FF9"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No animation is performed"
                }
            ],
            "relevance": 50,
            "description": "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
            "restrictions": [
                "identifier",
                "enum"
            ]
        },
        {
            "name": "-moz-animation-play-state",
            "browsers": [
                "FF9"
            ],
            "values": [
                {
                    "name": "paused",
                    "description": "A running animation will be paused."
                },
                {
                    "name": "running",
                    "description": "Resume playback of a paused animation."
                }
            ],
            "relevance": 50,
            "description": "Defines whether the animation is running or paused.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-animation-timing-function",
            "browsers": [
                "FF9"
            ],
            "relevance": 50,
            "description": "Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "-moz-appearance",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "button"
                },
                {
                    "name": "button-arrow-down"
                },
                {
                    "name": "button-arrow-next"
                },
                {
                    "name": "button-arrow-previous"
                },
                {
                    "name": "button-arrow-up"
                },
                {
                    "name": "button-bevel"
                },
                {
                    "name": "checkbox"
                },
                {
                    "name": "checkbox-container"
                },
                {
                    "name": "checkbox-label"
                },
                {
                    "name": "dialog"
                },
                {
                    "name": "groupbox"
                },
                {
                    "name": "listbox"
                },
                {
                    "name": "menuarrow"
                },
                {
                    "name": "menuimage"
                },
                {
                    "name": "menuitem"
                },
                {
                    "name": "menuitemtext"
                },
                {
                    "name": "menulist"
                },
                {
                    "name": "menulist-button"
                },
                {
                    "name": "menulist-text"
                },
                {
                    "name": "menulist-textfield"
                },
                {
                    "name": "menupopup"
                },
                {
                    "name": "menuradio"
                },
                {
                    "name": "menuseparator"
                },
                {
                    "name": "-moz-mac-unified-toolbar"
                },
                {
                    "name": "-moz-win-borderless-glass"
                },
                {
                    "name": "-moz-win-browsertabbar-toolbox"
                },
                {
                    "name": "-moz-win-communications-toolbox"
                },
                {
                    "name": "-moz-win-glass"
                },
                {
                    "name": "-moz-win-media-toolbox"
                },
                {
                    "name": "none"
                },
                {
                    "name": "progressbar"
                },
                {
                    "name": "progresschunk"
                },
                {
                    "name": "radio"
                },
                {
                    "name": "radio-container"
                },
                {
                    "name": "radio-label"
                },
                {
                    "name": "radiomenuitem"
                },
                {
                    "name": "resizer"
                },
                {
                    "name": "resizerpanel"
                },
                {
                    "name": "scrollbarbutton-down"
                },
                {
                    "name": "scrollbarbutton-left"
                },
                {
                    "name": "scrollbarbutton-right"
                },
                {
                    "name": "scrollbarbutton-up"
                },
                {
                    "name": "scrollbar-small"
                },
                {
                    "name": "scrollbartrack-horizontal"
                },
                {
                    "name": "scrollbartrack-vertical"
                },
                {
                    "name": "separator"
                },
                {
                    "name": "spinner"
                },
                {
                    "name": "spinner-downbutton"
                },
                {
                    "name": "spinner-textfield"
                },
                {
                    "name": "spinner-upbutton"
                },
                {
                    "name": "statusbar"
                },
                {
                    "name": "statusbarpanel"
                },
                {
                    "name": "tab"
                },
                {
                    "name": "tabpanels"
                },
                {
                    "name": "tab-scroll-arrow-back"
                },
                {
                    "name": "tab-scroll-arrow-forward"
                },
                {
                    "name": "textfield"
                },
                {
                    "name": "textfield-multiline"
                },
                {
                    "name": "toolbar"
                },
                {
                    "name": "toolbox"
                },
                {
                    "name": "tooltip"
                },
                {
                    "name": "treeheadercell"
                },
                {
                    "name": "treeheadersortarrow"
                },
                {
                    "name": "treeitem"
                },
                {
                    "name": "treetwistyopen"
                },
                {
                    "name": "treeview"
                },
                {
                    "name": "treewisty"
                },
                {
                    "name": "window"
                }
            ],
            "status": "nonstandard",
            "syntax": "none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized",
            "relevance": 0,
            "description": "Used in Gecko (Firefox) to display an element using a platform-native styling based on the operating system's theme.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-backface-visibility",
            "browsers": [
                "FF10"
            ],
            "values": [
                {
                    "name": "hidden"
                },
                {
                    "name": "visible"
                }
            ],
            "relevance": 50,
            "description": "Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-background-clip",
            "browsers": [
                "FF1-3.6"
            ],
            "values": [
                {
                    "name": "padding"
                }
            ],
            "relevance": 50,
            "description": "Determines the background painting area.",
            "restrictions": [
                "box",
                "enum"
            ]
        },
        {
            "name": "-moz-background-inline-policy",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "bounding-box"
                },
                {
                    "name": "continuous"
                },
                {
                    "name": "each-box"
                }
            ],
            "relevance": 50,
            "description": "In Gecko-based applications like Firefox, the -moz-background-inline-policy CSS property specifies how the background image of an inline element is determined when the content of the inline element wraps onto multiple lines. The choice of position has significant effects on repetition.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-background-origin",
            "browsers": [
                "FF1"
            ],
            "relevance": 50,
            "description": "For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",
            "restrictions": [
                "box"
            ]
        },
        {
            "name": "-moz-border-bottom-colors",
            "browsers": [
                "FF1"
            ],
            "status": "nonstandard",
            "syntax": "<color>+ | none",
            "relevance": 0,
            "description": "Sets a list of colors for the bottom border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-moz-border-image",
            "browsers": [
                "FF3.6"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
                },
                {
                    "name": "fill",
                    "description": "Causes the middle part of the border-image to be preserved."
                },
                {
                    "name": "none"
                },
                {
                    "name": "repeat",
                    "description": "The image is tiled (repeated) to fill the area."
                },
                {
                    "name": "round",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
                },
                {
                    "name": "space",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
                },
                {
                    "name": "stretch",
                    "description": "The image is stretched to fill the area."
                },
                {
                    "name": "url()"
                }
            ],
            "relevance": 50,
            "description": "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
            "restrictions": [
                "length",
                "percentage",
                "number",
                "url",
                "enum"
            ]
        },
        {
            "name": "-moz-border-left-colors",
            "browsers": [
                "FF1"
            ],
            "status": "nonstandard",
            "syntax": "<color>+ | none",
            "relevance": 0,
            "description": "Sets a list of colors for the bottom border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-moz-border-right-colors",
            "browsers": [
                "FF1"
            ],
            "status": "nonstandard",
            "syntax": "<color>+ | none",
            "relevance": 0,
            "description": "Sets a list of colors for the bottom border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-moz-border-top-colors",
            "browsers": [
                "FF1"
            ],
            "status": "nonstandard",
            "syntax": "<color>+ | none",
            "relevance": 0,
            "description": "Ske Firefox, -moz-border-bottom-colors sets a list of colors for the bottom border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-moz-box-align",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "baseline",
                    "description": "If this box orientation is inline-axis or horizontal, all children are placed with their baselines aligned, and extra space placed before or after as necessary. For block flows, the baseline of the first non-empty line box located within the element is used. For tables, the baseline of the first cell is used."
                },
                {
                    "name": "center",
                    "description": "Any extra space is divided evenly, with half placed above the child and the other half placed after the child."
                },
                {
                    "name": "end",
                    "description": "For normal direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element. For reverse direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element."
                },
                {
                    "name": "start",
                    "description": "For normal direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element. For reverse direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element."
                },
                {
                    "name": "stretch",
                    "description": "The height of each child is adjusted to that of the containing block."
                }
            ],
            "relevance": 50,
            "description": "Specifies how a XUL box aligns its contents across (perpendicular to) the direction of its layout. The effect of this is only visible if there is extra space in the box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-box-direction",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "A box with a computed value of horizontal for box-orient displays its children from left to right. A box with a computed value of vertical displays its children from top to bottom."
                },
                {
                    "name": "reverse",
                    "description": "A box with a computed value of horizontal for box-orient displays its children from right to left. A box with a computed value of vertical displays its children from bottom to top."
                }
            ],
            "relevance": 50,
            "description": "Specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-box-flex",
            "browsers": [
                "FF1"
            ],
            "relevance": 50,
            "description": "Specifies how a box grows to fill the box that contains it, in the direction of the containing box's layout.",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "-moz-box-flexgroup",
            "browsers": [
                "FF1"
            ],
            "relevance": 50,
            "description": "Flexible elements can be assigned to flex groups using the 'box-flex-group' property.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-moz-box-ordinal-group",
            "browsers": [
                "FF1"
            ],
            "relevance": 50,
            "description": "Indicates the ordinal group the element belongs to. Elements with a lower ordinal group are displayed before those with a higher ordinal group.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-moz-box-orient",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "block-axis",
                    "description": "Elements are oriented along the box's axis."
                },
                {
                    "name": "horizontal",
                    "description": "The box displays its children from left to right in a horizontal line."
                },
                {
                    "name": "inline-axis",
                    "description": "Elements are oriented vertically."
                },
                {
                    "name": "vertical",
                    "description": "The box displays its children from stacked from top to bottom vertically."
                }
            ],
            "relevance": 50,
            "description": "In Mozilla applications, -moz-box-orient specifies whether a box lays out its contents horizontally or vertically.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-box-pack",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "The extra space is divided evenly, with half placed before the first child and the other half placed after the last child."
                },
                {
                    "name": "end",
                    "description": "For normal direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child. For reverse direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child."
                },
                {
                    "name": "justify",
                    "description": "The space is divided evenly in-between each child, with none of the extra space placed before the first child or after the last child. If there is only one child, treat the pack value as if it were start."
                },
                {
                    "name": "start",
                    "description": "For normal direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child. For reverse direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child."
                }
            ],
            "relevance": 50,
            "description": "Specifies how a box packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-box-sizing",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "border-box",
                    "description": "The specified width and height (and respective min/max properties) on this element determine the border box of the element."
                },
                {
                    "name": "content-box",
                    "description": "Behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element."
                },
                {
                    "name": "padding-box",
                    "description": "The specified width and height (and respective min/max properties) on this element determine the padding box of the element."
                }
            ],
            "relevance": 50,
            "description": "Box Model addition in CSS3.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-column-count",
            "browsers": [
                "FF3.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Determines the number of columns by the 'column-width' property and the element width."
                }
            ],
            "relevance": 50,
            "description": "Describes the optimal number of columns into which the content of the element will be flowed.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-moz-column-gap",
            "browsers": [
                "FF3.5"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "User agent specific and typically equivalent to 1em."
                }
            ],
            "relevance": 50,
            "description": "Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-moz-column-rule",
            "browsers": [
                "FF3.5"
            ],
            "relevance": 50,
            "description": "Shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "-moz-column-rule-color",
            "browsers": [
                "FF3.5"
            ],
            "relevance": 50,
            "description": "Sets the color of the column rule",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-moz-column-rule-style",
            "browsers": [
                "FF3.5"
            ],
            "relevance": 50,
            "description": "Sets the style of the rule between columns of an element.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "-moz-column-rule-width",
            "browsers": [
                "FF3.5"
            ],
            "relevance": 50,
            "description": "Sets the width of the rule between columns. Negative values are not allowed.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "-moz-columns",
            "browsers": [
                "FF9"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The width depends on the values of other properties."
                }
            ],
            "relevance": 50,
            "description": "A shorthand property which sets both 'column-width' and 'column-count'.",
            "restrictions": [
                "length",
                "integer"
            ]
        },
        {
            "name": "-moz-column-width",
            "browsers": [
                "FF3.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The width depends on the values of other properties."
                }
            ],
            "relevance": 50,
            "description": "This property describes the width of columns in multicol elements.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-moz-font-feature-settings",
            "browsers": [
                "FF4"
            ],
            "values": [
                {
                    "name": "\"c2cs\""
                },
                {
                    "name": "\"dlig\""
                },
                {
                    "name": "\"kern\""
                },
                {
                    "name": "\"liga\""
                },
                {
                    "name": "\"lnum\""
                },
                {
                    "name": "\"onum\""
                },
                {
                    "name": "\"smcp\""
                },
                {
                    "name": "\"swsh\""
                },
                {
                    "name": "\"tnum\""
                },
                {
                    "name": "normal",
                    "description": "No change in glyph substitution or positioning occurs."
                },
                {
                    "name": "off",
                    "browsers": [
                        "FF4"
                    ]
                },
                {
                    "name": "on",
                    "browsers": [
                        "FF4"
                    ]
                }
            ],
            "relevance": 50,
            "description": "Provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",
            "restrictions": [
                "string",
                "integer"
            ]
        },
        {
            "name": "-moz-hyphens",
            "browsers": [
                "FF9"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."
                },
                {
                    "name": "manual",
                    "description": "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities"
                },
                {
                    "name": "none",
                    "description": "Words are not broken at line breaks, even if characters inside the word suggest line break points."
                }
            ],
            "relevance": 50,
            "description": "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-perspective",
            "browsers": [
                "FF10"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No perspective transform is applied."
                }
            ],
            "relevance": 50,
            "description": "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-moz-perspective-origin",
            "browsers": [
                "FF10"
            ],
            "relevance": 50,
            "description": "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
            "restrictions": [
                "position",
                "percentage",
                "length"
            ]
        },
        {
            "name": "-moz-text-align-last",
            "browsers": [
                "FF12"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "center",
                    "description": "The inline contents are centered within the line box."
                },
                {
                    "name": "justify",
                    "description": "The text is justified according to the method specified by the 'text-justify' property."
                },
                {
                    "name": "left",
                    "description": "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."
                },
                {
                    "name": "right",
                    "description": "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."
                }
            ],
            "relevance": 50,
            "description": "Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-text-decoration-color",
            "browsers": [
                "FF6"
            ],
            "relevance": 50,
            "description": "Specifies the color of text decoration (underlines overlines, and line-throughs) set on the element with text-decoration-line.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-moz-text-decoration-line",
            "browsers": [
                "FF6"
            ],
            "values": [
                {
                    "name": "line-through",
                    "description": "Each line of text has a line through the middle."
                },
                {
                    "name": "none",
                    "description": "Neither produces nor inhibits text decoration."
                },
                {
                    "name": "overline",
                    "description": "Each line of text has a line above it."
                },
                {
                    "name": "underline",
                    "description": "Each line of text is underlined."
                }
            ],
            "relevance": 50,
            "description": "Specifies what line decorations, if any, are added to the element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-text-decoration-style",
            "browsers": [
                "FF6"
            ],
            "values": [
                {
                    "name": "dashed",
                    "description": "Produces a dashed line style."
                },
                {
                    "name": "dotted",
                    "description": "Produces a dotted line."
                },
                {
                    "name": "double",
                    "description": "Produces a double line."
                },
                {
                    "name": "none",
                    "description": "Produces no line."
                },
                {
                    "name": "solid",
                    "description": "Produces a solid line."
                },
                {
                    "name": "wavy",
                    "description": "Produces a wavy line."
                }
            ],
            "relevance": 50,
            "description": "Specifies the line style for underline, line-through and overline text decoration.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-text-size-adjust",
            "browsers": [
                "FF"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Renderers must use the default size adjustment when displaying on a small device."
                },
                {
                    "name": "none",
                    "description": "Renderers must not do size adjustment when displaying on a small device."
                }
            ],
            "relevance": 50,
            "description": "Specifies a size adjustment for displaying text content in mobile browsers.",
            "restrictions": [
                "enum",
                "percentage"
            ]
        },
        {
            "name": "-moz-transform",
            "browsers": [
                "FF3.5"
            ],
            "values": [
                {
                    "name": "matrix()",
                    "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
                },
                {
                    "name": "matrix3d()",
                    "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
                },
                {
                    "name": "none"
                },
                {
                    "name": "perspective",
                    "description": "Specifies a perspective projection matrix."
                },
                {
                    "name": "rotate()",
                    "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
                },
                {
                    "name": "rotate3d()",
                    "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
                },
                {
                    "name": "rotateX('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the X axis."
                },
                {
                    "name": "rotateY('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Y axis."
                },
                {
                    "name": "rotateZ('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Z axis."
                },
                {
                    "name": "scale()",
                    "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
                },
                {
                    "name": "scale3d()",
                    "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
                },
                {
                    "name": "scaleX()",
                    "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
                },
                {
                    "name": "scaleY()",
                    "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
                },
                {
                    "name": "scaleZ()",
                    "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
                },
                {
                    "name": "skew()",
                    "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
                },
                {
                    "name": "skewX()",
                    "description": "Specifies a skew transformation along the X axis by the given angle."
                },
                {
                    "name": "skewY()",
                    "description": "Specifies a skew transformation along the Y axis by the given angle."
                },
                {
                    "name": "translate()",
                    "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
                },
                {
                    "name": "translate3d()",
                    "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
                },
                {
                    "name": "translateX()",
                    "description": "Specifies a translation by the given amount in the X direction."
                },
                {
                    "name": "translateY()",
                    "description": "Specifies a translation by the given amount in the Y direction."
                },
                {
                    "name": "translateZ()",
                    "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
                }
            ],
            "relevance": 50,
            "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-transform-origin",
            "browsers": [
                "FF3.5"
            ],
            "relevance": 50,
            "description": "Establishes the origin of transformation for an element.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "-moz-transition",
            "browsers": [
                "FF4"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property combines four of the transition properties into a single property.",
            "restrictions": [
                "time",
                "property",
                "timing-function",
                "enum"
            ]
        },
        {
            "name": "-moz-transition-delay",
            "browsers": [
                "FF4"
            ],
            "relevance": 50,
            "description": "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-moz-transition-duration",
            "browsers": [
                "FF4"
            ],
            "relevance": 50,
            "description": "Specifies how long the transition from the old value to the new value should take.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-moz-transition-property",
            "browsers": [
                "FF4"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "relevance": 50,
            "description": "Specifies the name of the CSS property to which the transition is applied.",
            "restrictions": [
                "property"
            ]
        },
        {
            "name": "-moz-transition-timing-function",
            "browsers": [
                "FF4"
            ],
            "relevance": 50,
            "description": "Describes how the intermediate values used during a transition will be calculated.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "-moz-user-focus",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "ignore"
                },
                {
                    "name": "normal"
                }
            ],
            "status": "nonstandard",
            "syntax": "ignore | normal | select-after | select-before | select-menu | select-same | select-all | none",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-user-focus"
                }
            ],
            "description": "Used to indicate whether the element can have focus."
        },
        {
            "name": "-moz-user-select",
            "browsers": [
                "FF1.5"
            ],
            "values": [
                {
                    "name": "all"
                },
                {
                    "name": "element"
                },
                {
                    "name": "elements"
                },
                {
                    "name": "-moz-all"
                },
                {
                    "name": "-moz-none"
                },
                {
                    "name": "none"
                },
                {
                    "name": "text"
                },
                {
                    "name": "toggle"
                }
            ],
            "relevance": 50,
            "description": "Controls the appearance of selection.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-accelerator",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "false",
                    "description": "The element does not contain an accelerator key sequence."
                },
                {
                    "name": "true",
                    "description": "The element contains an accelerator key sequence."
                }
            ],
            "status": "nonstandard",
            "syntax": "false | true",
            "relevance": 0,
            "description": "IE only. Has the ability to turn off its system underlines for accelerator keys until the ALT key is pressed",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-behavior",
            "browsers": [
                "IE8"
            ],
            "relevance": 50,
            "description": "IE only. Used to extend behaviors of the browser",
            "restrictions": [
                "url"
            ]
        },
        {
            "name": "-ms-block-progression",
            "browsers": [
                "IE8"
            ],
            "values": [
                {
                    "name": "bt",
                    "description": "Bottom-to-top block flow. Layout is horizontal."
                },
                {
                    "name": "lr",
                    "description": "Left-to-right direction. The flow orientation is vertical."
                },
                {
                    "name": "rl",
                    "description": "Right-to-left direction. The flow orientation is vertical."
                },
                {
                    "name": "tb",
                    "description": "Top-to-bottom direction. The flow orientation is horizontal."
                }
            ],
            "status": "nonstandard",
            "syntax": "tb | rl | bt | lr",
            "relevance": 0,
            "description": "Sets the block-progression value and the flow orientation",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-content-zoom-chaining",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "chained",
                    "description": "The nearest zoomable parent element begins zooming when the user hits a zoom limit during a manipulation. No bounce effect is shown."
                },
                {
                    "name": "none",
                    "description": "A bounce effect is shown when the user hits a zoom limit during a manipulation."
                }
            ],
            "status": "nonstandard",
            "syntax": "none | chained",
            "relevance": 0,
            "description": "Specifies the zoom behavior that occurs when a user hits the zoom limit during a manipulation."
        },
        {
            "name": "-ms-content-zooming",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The element is not zoomable."
                },
                {
                    "name": "zoom",
                    "description": "The element is zoomable."
                }
            ],
            "status": "nonstandard",
            "syntax": "none | zoom",
            "relevance": 0,
            "description": "Specifies whether zooming is enabled.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-content-zoom-limit",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>",
            "relevance": 0,
            "description": "Shorthand property for the -ms-content-zoom-limit-min and -ms-content-zoom-limit-max properties.",
            "restrictions": [
                "percentage"
            ]
        },
        {
            "name": "-ms-content-zoom-limit-max",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "<percentage>",
            "relevance": 0,
            "description": "Specifies the maximum zoom factor.",
            "restrictions": [
                "percentage"
            ]
        },
        {
            "name": "-ms-content-zoom-limit-min",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "<percentage>",
            "relevance": 0,
            "description": "Specifies the minimum zoom factor.",
            "restrictions": [
                "percentage"
            ]
        },
        {
            "name": "-ms-content-zoom-snap",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "mandatory",
                    "description": "Indicates that the motion of the content after the contact is picked up is always adjusted so that it lands on a snap-point."
                },
                {
                    "name": "none",
                    "description": "Indicates that zooming is unaffected by any defined snap-points."
                },
                {
                    "name": "proximity",
                    "description": "Indicates that the motion of the content after the contact is picked up may be adjusted if the content would normally stop \"close enough\" to a snap-point."
                },
                {
                    "name": "snapInterval(100%, 100%)",
                    "description": "Specifies where the snap-points will be placed."
                },
                {
                    "name": "snapList()",
                    "description": "Specifies the position of individual snap-points as a comma-separated list of zoom factors."
                }
            ],
            "status": "nonstandard",
            "syntax": "<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>",
            "relevance": 0,
            "description": "Shorthand property for the -ms-content-zoom-snap-type and -ms-content-zoom-snap-points properties."
        },
        {
            "name": "-ms-content-zoom-snap-points",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "snapInterval(100%, 100%)",
                    "description": "Specifies where the snap-points will be placed."
                },
                {
                    "name": "snapList()",
                    "description": "Specifies the position of individual snap-points as a comma-separated list of zoom factors."
                }
            ],
            "status": "nonstandard",
            "syntax": "snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )",
            "relevance": 0,
            "description": "Defines where zoom snap-points are located."
        },
        {
            "name": "-ms-content-zoom-snap-type",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "mandatory",
                    "description": "Indicates that the motion of the content after the contact is picked up is always adjusted so that it lands on a snap-point."
                },
                {
                    "name": "none",
                    "description": "Indicates that zooming is unaffected by any defined snap-points."
                },
                {
                    "name": "proximity",
                    "description": "Indicates that the motion of the content after the contact is picked up may be adjusted if the content would normally stop \"close enough\" to a snap-point."
                }
            ],
            "status": "nonstandard",
            "syntax": "none | proximity | mandatory",
            "relevance": 0,
            "description": "Specifies how zooming is affected by defined snap-points.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-filter",
            "browsers": [
                "IE8-9"
            ],
            "status": "nonstandard",
            "syntax": "<string>",
            "relevance": 0,
            "description": "IE only. Used to produce visual effects.",
            "restrictions": [
                "string"
            ]
        },
        {
            "name": "-ms-flex",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Retrieves the value of the main size property as the used 'flex-basis'."
                },
                {
                    "name": "none",
                    "description": "Expands to '0 0 auto'."
                }
            ],
            "relevance": 50,
            "description": "specifies the parameters of a flexible length: the positive and negative flexibility, and the preferred size.",
            "restrictions": [
                "length",
                "number",
                "percentage"
            ]
        },
        {
            "name": "-ms-flex-align",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "baseline",
                    "description": "If the flex item’s inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."
                },
                {
                    "name": "center",
                    "description": "The flex item’s margin box is centered in the cross axis within the line."
                },
                {
                    "name": "end",
                    "description": "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."
                },
                {
                    "name": "start",
                    "description": "The cross-start margin edge of the flexbox item is placed flush with the cross-start edge of the line."
                },
                {
                    "name": "stretch",
                    "description": "If the cross size property of the flexbox item is anything other than 'auto', this value is identical to 'start'."
                }
            ],
            "relevance": 50,
            "description": "Aligns flex items along the cross axis of the current line of the flex container.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-flex-direction",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "column",
                    "description": "The flex container’s main axis has the same orientation as the block axis of the current writing mode."
                },
                {
                    "name": "column-reverse",
                    "description": "Same as 'column', except the main-start and main-end directions are swapped."
                },
                {
                    "name": "row",
                    "description": "The flex container’s main axis has the same orientation as the inline axis of the current writing mode."
                },
                {
                    "name": "row-reverse",
                    "description": "Same as 'row', except the main-start and main-end directions are swapped."
                }
            ],
            "relevance": 50,
            "description": "Specifies how flex items are placed in the flex container, by setting the direction of the flex container’s main axis.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-flex-flow",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "column",
                    "description": "The flex container’s main axis has the same orientation as the block axis of the current writing mode."
                },
                {
                    "name": "column-reverse",
                    "description": "Same as 'column', except the main-start and main-end directions are swapped."
                },
                {
                    "name": "nowrap",
                    "description": "The flex container is single-line."
                },
                {
                    "name": "row",
                    "description": "The flex container’s main axis has the same orientation as the inline axis of the current writing mode."
                },
                {
                    "name": "wrap",
                    "description": "The flexbox is multi-line."
                },
                {
                    "name": "wrap-reverse",
                    "description": "Same as 'wrap', except the cross-start and cross-end directions are swapped."
                }
            ],
            "relevance": 50,
            "description": "Specifies how flexbox items are placed in the flexbox.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-flex-item-align",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Computes to the value of 'align-items' on the element’s parent, or 'stretch' if the element has no parent. On absolutely positioned elements, it computes to itself."
                },
                {
                    "name": "baseline",
                    "description": "If the flex item’s inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."
                },
                {
                    "name": "center",
                    "description": "The flex item’s margin box is centered in the cross axis within the line."
                },
                {
                    "name": "end",
                    "description": "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."
                },
                {
                    "name": "start",
                    "description": "The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line."
                },
                {
                    "name": "stretch",
                    "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
                }
            ],
            "relevance": 50,
            "description": "Allows the default alignment along the cross axis to be overridden for individual flex items.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-flex-line-pack",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "Lines are packed toward the center of the flex container."
                },
                {
                    "name": "distribute",
                    "description": "Lines are evenly distributed in the flex container, with half-size spaces on either end."
                },
                {
                    "name": "end",
                    "description": "Lines are packed toward the end of the flex container."
                },
                {
                    "name": "justify",
                    "description": "Lines are evenly distributed in the flex container."
                },
                {
                    "name": "start",
                    "description": "Lines are packed toward the start of the flex container."
                },
                {
                    "name": "stretch",
                    "description": "Lines stretch to take up the remaining space."
                }
            ],
            "relevance": 50,
            "description": "Aligns a flex container’s lines within the flex container when there is extra space in the cross-axis, similar to how 'justify-content' aligns individual items within the main-axis.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-flex-order",
            "browsers": [
                "IE10"
            ],
            "relevance": 50,
            "description": "Controls the order in which children of a flex container appear within the flex container, by assigning them to ordinal groups.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-ms-flex-pack",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "Flex items are packed toward the center of the line."
                },
                {
                    "name": "distribute",
                    "description": "Flex items are evenly distributed in the line, with half-size spaces on either end."
                },
                {
                    "name": "end",
                    "description": "Flex items are packed toward the end of the line."
                },
                {
                    "name": "justify",
                    "description": "Flex items are evenly distributed in the line."
                },
                {
                    "name": "start",
                    "description": "Flex items are packed toward the start of the line."
                }
            ],
            "relevance": 50,
            "description": "Aligns flex items along the main axis of the current line of the flex container.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-flex-wrap",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "nowrap",
                    "description": "The flex container is single-line."
                },
                {
                    "name": "wrap",
                    "description": "The flexbox is multi-line."
                },
                {
                    "name": "wrap-reverse",
                    "description": "Same as 'wrap', except the cross-start and cross-end directions are swapped."
                }
            ],
            "relevance": 50,
            "description": "Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-flow-from",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The block container is not a CSS Region."
                }
            ],
            "status": "nonstandard",
            "syntax": "[ none | <custom-ident> ]#",
            "relevance": 0,
            "description": "Makes a block container a region and associates it with a named flow.",
            "restrictions": [
                "identifier"
            ]
        },
        {
            "name": "-ms-flow-into",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The element is not moved to a named flow and normal CSS processing takes place."
                }
            ],
            "status": "nonstandard",
            "syntax": "[ none | <custom-ident> ]#",
            "relevance": 0,
            "description": "Places an element or its contents into a named flow.",
            "restrictions": [
                "identifier"
            ]
        },
        {
            "name": "-ms-grid-column",
            "browsers": [
                "E12",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "end"
                },
                {
                    "name": "start"
                }
            ],
            "relevance": 50,
            "description": "Used to place grid items and explicitly defined grid cells in the Grid.",
            "restrictions": [
                "integer",
                "string",
                "enum"
            ]
        },
        {
            "name": "-ms-grid-column-align",
            "browsers": [
                "E12",
                "IE10"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "Places the center of the Grid Item's margin box at the center of the Grid Item's column."
                },
                {
                    "name": "end",
                    "description": "Aligns the end edge of the Grid Item's margin box to the end edge of the Grid Item's column."
                },
                {
                    "name": "start",
                    "description": "Aligns the starting edge of the Grid Item's margin box to the starting edge of the Grid Item's column."
                },
                {
                    "name": "stretch",
                    "description": "Ensures that the Grid Item's margin box is equal to the size of the Grid Item's column."
                }
            ],
            "relevance": 50,
            "description": "Aligns the columns in a grid.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-grid-columns",
            "browsers": [
                "E12",
                "IE10"
            ],
            "relevance": 50,
            "description": "Lays out the columns of the grid."
        },
        {
            "name": "-ms-grid-column-span",
            "browsers": [
                "E12",
                "IE10"
            ],
            "relevance": 50,
            "description": "Specifies the number of columns to span.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-ms-grid-layer",
            "browsers": [
                "E",
                "IE10"
            ],
            "relevance": 50,
            "description": "Grid-layer is similar in concept to z-index, but avoids overloading the meaning of the z-index property, which is applicable only to positioned elements.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-ms-grid-row",
            "browsers": [
                "E12",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "end"
                },
                {
                    "name": "start"
                }
            ],
            "relevance": 50,
            "description": "grid-row is used to place grid items and explicitly defined grid cells in the Grid.",
            "restrictions": [
                "integer",
                "string",
                "enum"
            ]
        },
        {
            "name": "-ms-grid-row-align",
            "browsers": [
                "E12",
                "IE10"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "Places the center of the Grid Item's margin box at the center of the Grid Item's row."
                },
                {
                    "name": "end",
                    "description": "Aligns the end edge of the Grid Item's margin box to the end edge of the Grid Item's row."
                },
                {
                    "name": "start",
                    "description": "Aligns the starting edge of the Grid Item's margin box to the starting edge of the Grid Item's row."
                },
                {
                    "name": "stretch",
                    "description": "Ensures that the Grid Item's margin box is equal to the size of the Grid Item's row."
                }
            ],
            "relevance": 50,
            "description": "Aligns the rows in a grid.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-grid-rows",
            "browsers": [
                "E12",
                "IE10"
            ],
            "relevance": 50,
            "description": "Lays out the columns of the grid."
        },
        {
            "name": "-ms-grid-row-span",
            "browsers": [
                "E12",
                "IE10"
            ],
            "relevance": 50,
            "description": "Specifies the number of rows to span.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-ms-high-contrast-adjust",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Properties will be adjusted as applicable."
                },
                {
                    "name": "none",
                    "description": "No adjustments will be applied."
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | none",
            "relevance": 0,
            "description": "Specifies if properties should be adjusted in high contrast mode.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-hyphenate-limit-chars",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The user agent chooses a value that adapts to the current layout."
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | <integer>{1,3}",
            "relevance": 0,
            "description": "Specifies the minimum number of characters in a hyphenated word.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-ms-hyphenate-limit-lines",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "no-limit",
                    "description": "There is no limit."
                }
            ],
            "status": "nonstandard",
            "syntax": "no-limit | <integer>",
            "relevance": 0,
            "description": "Indicates the maximum number of successive hyphenated lines in an element.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-ms-hyphenate-limit-zone",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "<percentage> | <length>",
            "relevance": 0,
            "description": "Specifies the maximum amount of unfilled space (before justification) that may be left in the line box before hyphenation is triggered to pull part of a word from the next line back up into the current line.",
            "restrictions": [
                "percentage",
                "length"
            ]
        },
        {
            "name": "-ms-hyphens",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."
                },
                {
                    "name": "manual",
                    "description": "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities"
                },
                {
                    "name": "none",
                    "description": "Words are not broken at line breaks, even if characters inside the word suggest line break points."
                }
            ],
            "relevance": 50,
            "description": "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-ime-mode",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "active",
                    "description": "The input method editor is initially active; text entry is performed using it unless the user specifically dismisses it."
                },
                {
                    "name": "auto",
                    "description": "No change is made to the current input method editor state. This is the default."
                },
                {
                    "name": "disabled",
                    "description": "The input method editor is disabled and may not be activated by the user."
                },
                {
                    "name": "inactive",
                    "description": "The input method editor is initially inactive, but the user may activate it if they wish."
                },
                {
                    "name": "normal",
                    "description": "The IME state should be normal; this value can be used in a user style sheet to override the page setting."
                }
            ],
            "relevance": 50,
            "description": "Controls the state of the input method editor for text fields.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-interpolation-mode",
            "browsers": [
                "IE7"
            ],
            "values": [
                {
                    "name": "bicubic"
                },
                {
                    "name": "nearest-neighbor"
                }
            ],
            "relevance": 50,
            "description": "Gets or sets the interpolation (resampling) method used to stretch images.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-layout-grid",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "char",
                    "description": "Any of the range of character values available to the -ms-layout-grid-char property."
                },
                {
                    "name": "line",
                    "description": "Any of the range of line values available to the -ms-layout-grid-line property."
                },
                {
                    "name": "mode",
                    "description": "Any of the range of mode values available to the -ms-layout-grid-mode property."
                },
                {
                    "name": "type",
                    "description": "Any of the range of type values available to the -ms-layout-grid-type property."
                }
            ],
            "relevance": 50,
            "description": "Sets or retrieves the composite document grid properties that specify the layout of text characters."
        },
        {
            "name": "-ms-layout-grid-char",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Largest character in the font of the element is used to set the character grid."
                },
                {
                    "name": "none",
                    "description": "Default. No character grid is set."
                }
            ],
            "relevance": 50,
            "description": "Sets or retrieves the size of the character grid used for rendering the text content of an element.",
            "restrictions": [
                "enum",
                "length",
                "percentage"
            ]
        },
        {
            "name": "-ms-layout-grid-line",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Largest character in the font of the element is used to set the character grid."
                },
                {
                    "name": "none",
                    "description": "Default. No grid line is set."
                }
            ],
            "relevance": 50,
            "description": "Sets or retrieves the gridline value used for rendering the text content of an element.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-ms-layout-grid-mode",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "both",
                    "description": "Default. Both the char and line grid modes are enabled. This setting is necessary to fully enable the layout grid on an element."
                },
                {
                    "name": "char",
                    "description": "Only a character grid is used. This is recommended for use with block-level elements, such as a blockquote, where the line grid is intended to be disabled."
                },
                {
                    "name": "line",
                    "description": "Only a line grid is used. This is recommended for use with inline elements, such as a span, to disable the horizontal grid on runs of text that act as a single entity in the grid layout."
                },
                {
                    "name": "none",
                    "description": "No grid is used."
                }
            ],
            "relevance": 50,
            "description": "Gets or sets whether the text layout grid uses two dimensions.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-layout-grid-type",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "fixed",
                    "description": "Grid used for monospaced layout. All noncursive characters are treated as equal; every character is centered within a single grid space by default."
                },
                {
                    "name": "loose",
                    "description": "Default. Grid used for Japanese and Korean characters."
                },
                {
                    "name": "strict",
                    "description": "Grid used for Chinese, as well as Japanese (Genko) and Korean characters. Only the ideographs, kanas, and wide characters are snapped to the grid."
                }
            ],
            "relevance": 50,
            "description": "Sets or retrieves the type of grid used for rendering the text content of an element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-line-break",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The UA determines the set of line-breaking restrictions to use for CJK scripts, and it may vary the restrictions based on the length of the line; e.g., use a less restrictive set of line-break rules for short lines."
                },
                {
                    "name": "keep-all",
                    "description": "Sequences of CJK characters can no longer break on implied break points. This option should only be used where the presence of word separator characters still creates line-breaking opportunities, as in Korean."
                },
                {
                    "name": "newspaper",
                    "description": "Breaks CJK scripts using the least restrictive set of line-breaking rules. Typically used for short lines, such as in newspapers."
                },
                {
                    "name": "normal",
                    "description": "Breaks CJK scripts using a normal set of line-breaking rules."
                },
                {
                    "name": "strict",
                    "description": "Breaks CJK scripts using a more restrictive set of line-breaking rules than 'normal'."
                }
            ],
            "relevance": 50,
            "description": "Specifies what set of line breaking restrictions are in effect within the element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-overflow-style",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "No preference, UA should use the first scrolling method in the list that it supports."
                },
                {
                    "name": "-ms-autohiding-scrollbar",
                    "description": "Indicates the element displays auto-hiding scrollbars during mouse interactions and panning indicators during touch and keyboard interactions."
                },
                {
                    "name": "none",
                    "description": "Indicates the element does not display scrollbars or panning indicators, even when its content overflows."
                },
                {
                    "name": "scrollbar",
                    "description": "Scrollbars are typically narrow strips inserted on one or two edges of an element and which often have arrows to click on and a \"thumb\" to drag up and down (or left and right) to move the contents of the element."
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | none | scrollbar | -ms-autohiding-scrollbar",
            "relevance": 0,
            "description": "Specify whether content is clipped when it overflows the element's content area.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-perspective",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No perspective transform is applied."
                }
            ],
            "relevance": 50,
            "description": "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-ms-perspective-origin",
            "browsers": [
                "IE10"
            ],
            "relevance": 50,
            "description": "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
            "restrictions": [
                "position",
                "percentage",
                "length"
            ]
        },
        {
            "name": "-ms-perspective-origin-x",
            "browsers": [
                "IE10"
            ],
            "relevance": 50,
            "description": "Establishes the origin for the perspective property. It effectively sets the X  position at which the viewer appears to be looking at the children of the element.",
            "restrictions": [
                "position",
                "percentage",
                "length"
            ]
        },
        {
            "name": "-ms-perspective-origin-y",
            "browsers": [
                "IE10"
            ],
            "relevance": 50,
            "description": "Establishes the origin for the perspective property. It effectively sets the Y position at which the viewer appears to be looking at the children of the element.",
            "restrictions": [
                "position",
                "percentage",
                "length"
            ]
        },
        {
            "name": "-ms-progress-appearance",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "bar"
                },
                {
                    "name": "ring"
                }
            ],
            "relevance": 50,
            "description": "Gets or sets a value that specifies whether a progress control displays as a bar or a ring.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-scrollbar-3dlight-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scrollbar-arrow-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the arrow elements of a scroll arrow.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scrollbar-base-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the main elements of a scroll bar, which include the scroll box, track, and scroll arrows.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scrollbar-darkshadow-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the gutter of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scrollbar-face-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scrollbar-highlight-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scrollbar-shadow-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scrollbar-track-color",
            "browsers": [
                "IE5"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-track-color"
                }
            ],
            "description": "Determines the color of the track element of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scroll-chaining",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "chained"
                },
                {
                    "name": "none"
                }
            ],
            "status": "nonstandard",
            "syntax": "chained | none",
            "relevance": 0,
            "description": "Gets or sets a value that indicates the scrolling behavior that occurs when a user hits the content boundary during a manipulation.",
            "restrictions": [
                "enum",
                "length"
            ]
        },
        {
            "name": "-ms-scroll-limit",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "status": "nonstandard",
            "syntax": "<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>",
            "relevance": 0,
            "description": "Gets or sets a shorthand value that sets values for the -ms-scroll-limit-x-min, -ms-scroll-limit-y-min, -ms-scroll-limit-x-max, and -ms-scroll-limit-y-max properties.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-ms-scroll-limit-x-max",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | <length>",
            "relevance": 0,
            "description": "Gets or sets a value that specifies the maximum value for the scrollLeft property.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-ms-scroll-limit-x-min",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "<length>",
            "relevance": 0,
            "description": "Gets or sets a value that specifies the minimum value for the scrollLeft property.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-ms-scroll-limit-y-max",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | <length>",
            "relevance": 0,
            "description": "Gets or sets a value that specifies the maximum value for the scrollTop property.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-ms-scroll-limit-y-min",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "<length>",
            "relevance": 0,
            "description": "Gets or sets a value that specifies the minimum value for the scrollTop property.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-ms-scroll-rails",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "none"
                },
                {
                    "name": "railed"
                }
            ],
            "status": "nonstandard",
            "syntax": "none | railed",
            "relevance": 0,
            "description": "Gets or sets a value that indicates whether or not small motions perpendicular to the primary axis of motion will result in either changes to both the scrollTop and scrollLeft properties or a change to the primary axis (for instance, either the scrollTop or scrollLeft properties will change, but not both).",
            "restrictions": [
                "enum",
                "length"
            ]
        },
        {
            "name": "-ms-scroll-snap-points-x",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "snapInterval(100%, 100%)"
                },
                {
                    "name": "snapList()"
                }
            ],
            "status": "nonstandard",
            "syntax": "snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )",
            "relevance": 0,
            "description": "Gets or sets a value that defines where snap-points will be located along the x-axis.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-scroll-snap-points-y",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "snapInterval(100%, 100%)"
                },
                {
                    "name": "snapList()"
                }
            ],
            "status": "nonstandard",
            "syntax": "snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )",
            "relevance": 0,
            "description": "Gets or sets a value that defines where snap-points will be located along the y-axis.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-scroll-snap-type",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The visual viewport of this scroll container must ignore snap points, if any, when scrolled."
                },
                {
                    "name": "mandatory",
                    "description": "The visual viewport of this scroll container is guaranteed to rest on a snap point when there are no active scrolling operations."
                },
                {
                    "name": "proximity",
                    "description": "The visual viewport of this scroll container may come to rest on a snap point at the termination of a scroll at the discretion of the UA given the parameters of the scroll."
                }
            ],
            "status": "nonstandard",
            "syntax": "none | proximity | mandatory",
            "relevance": 0,
            "description": "Gets or sets a value that defines what type of snap-point should be used for the current element. There are two type of snap-points, with the primary difference being whether or not the user is guaranteed to always stop on a snap-point.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-scroll-snap-x",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "mandatory"
                },
                {
                    "name": "none"
                },
                {
                    "name": "proximity"
                },
                {
                    "name": "snapInterval(100%, 100%)"
                },
                {
                    "name": "snapList()"
                }
            ],
            "status": "nonstandard",
            "syntax": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>",
            "relevance": 0,
            "description": "Gets or sets a shorthand value that sets values for the -ms-scroll-snap-type and -ms-scroll-snap-points-x properties.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-scroll-snap-y",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "mandatory"
                },
                {
                    "name": "none"
                },
                {
                    "name": "proximity"
                },
                {
                    "name": "snapInterval(100%, 100%)"
                },
                {
                    "name": "snapList()"
                }
            ],
            "status": "nonstandard",
            "syntax": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>",
            "relevance": 0,
            "description": "Gets or sets a shorthand value that sets values for the -ms-scroll-snap-type and -ms-scroll-snap-points-y properties.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-scroll-translation",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "none"
                },
                {
                    "name": "vertical-to-horizontal"
                }
            ],
            "status": "nonstandard",
            "syntax": "none | vertical-to-horizontal",
            "relevance": 0,
            "description": "Gets or sets a value that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-text-align-last",
            "browsers": [
                "E",
                "IE8"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "center",
                    "description": "The inline contents are centered within the line box."
                },
                {
                    "name": "justify",
                    "description": "The text is justified according to the method specified by the 'text-justify' property."
                },
                {
                    "name": "left",
                    "description": "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."
                },
                {
                    "name": "right",
                    "description": "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."
                }
            ],
            "relevance": 50,
            "description": "Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-text-autospace",
            "browsers": [
                "E",
                "IE8"
            ],
            "values": [
                {
                    "name": "ideograph-alpha",
                    "description": "Creates 1/4em extra spacing between runs of ideographic letters and non-ideographic letters, such as Latin-based, Cyrillic, Greek, Arabic or Hebrew."
                },
                {
                    "name": "ideograph-numeric",
                    "description": "Creates 1/4em extra spacing between runs of ideographic letters and numeric glyphs."
                },
                {
                    "name": "ideograph-parenthesis",
                    "description": "Creates extra spacing between normal (non wide) parenthesis and ideographs."
                },
                {
                    "name": "ideograph-space",
                    "description": "Extends the width of the space character while surrounded by ideographs."
                },
                {
                    "name": "none",
                    "description": "No extra space is created."
                },
                {
                    "name": "punctuation",
                    "description": "Creates extra non-breaking spacing around punctuation as required by language-specific typographic conventions."
                }
            ],
            "status": "nonstandard",
            "syntax": "none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space",
            "relevance": 0,
            "description": "Determines whether or not a full-width punctuation mark character should be trimmed if it appears at the beginning of a line, so that its 'ink' lines up with the first glyph in the line above and below.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-text-combine-horizontal",
            "browsers": [
                "E",
                "IE11"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Attempt to typeset horizontally all consecutive characters within the box such that they take up the space of a single character within the vertical line box."
                },
                {
                    "name": "digits",
                    "description": "Attempt to typeset horizontally each maximal sequence of consecutive ASCII digits (U+0030–U+0039) that has as many or fewer characters than the specified integer such that it takes up the space of a single character within the vertical line box."
                },
                {
                    "name": "none",
                    "description": "No special processing."
                }
            ],
            "relevance": 50,
            "description": "This property specifies the combination of multiple characters into the space of a single character.",
            "restrictions": [
                "enum",
                "integer"
            ]
        },
        {
            "name": "-ms-text-justify",
            "browsers": [
                "E",
                "IE8"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The UA determines the justification algorithm to follow, based on a balance between performance and adequate presentation quality."
                },
                {
                    "name": "distribute",
                    "description": "Justification primarily changes spacing both at word separators and at grapheme cluster boundaries in all scripts except those in the connected and cursive groups. This value is sometimes used in e.g. Japanese, often with the 'text-align-last' property."
                },
                {
                    "name": "inter-cluster",
                    "description": "Justification primarily changes spacing at word separators and at grapheme cluster boundaries in clustered scripts. This value is typically used for Southeast Asian scripts such as Thai."
                },
                {
                    "name": "inter-ideograph",
                    "description": "Justification primarily changes spacing at word separators and at inter-graphemic boundaries in scripts that use no word spaces. This value is typically used for CJK languages."
                },
                {
                    "name": "inter-word",
                    "description": "Justification primarily changes spacing at word separators. This value is typically used for languages that separate words using spaces, like English or (sometimes) Korean."
                },
                {
                    "name": "kashida",
                    "description": "Justification primarily stretches Arabic and related scripts through the use of kashida or other calligraphic elongation."
                }
            ],
            "relevance": 50,
            "description": "Selects the justification algorithm used when 'text-align' is set to 'justify'. The property applies to block containers, but the UA may (but is not required to) also support it on inline elements.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-text-kashida-space",
            "browsers": [
                "E",
                "IE10"
            ],
            "relevance": 50,
            "description": "Sets or retrieves the ratio of kashida expansion to white space expansion when justifying lines of text in the object.",
            "restrictions": [
                "percentage"
            ]
        },
        {
            "name": "-ms-text-overflow",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "clip",
                    "description": "Clip inline content that overflows. Characters may be only partially rendered."
                },
                {
                    "name": "ellipsis",
                    "description": "Render an ellipsis character (U+2026) to represent clipped inline content."
                }
            ],
            "relevance": 50,
            "description": "Text can overflow for example when it is prevented from wrapping",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-text-size-adjust",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Renderers must use the default size adjustment when displaying on a small device."
                },
                {
                    "name": "none",
                    "description": "Renderers must not do size adjustment when displaying on a small device."
                }
            ],
            "relevance": 50,
            "description": "Specifies a size adjustment for displaying text content in mobile browsers.",
            "restrictions": [
                "enum",
                "percentage"
            ]
        },
        {
            "name": "-ms-text-underline-position",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "alphabetic",
                    "description": "The underline is aligned with the alphabetic baseline. In this case the underline is likely to cross some descenders."
                },
                {
                    "name": "auto",
                    "description": "The user agent may use any algorithm to determine the underline's position. In horizontal line layout, the underline should be aligned as for alphabetic. In vertical line layout, if the language is set to Japanese or Korean, the underline should be aligned as for over."
                },
                {
                    "name": "over",
                    "description": "The underline is aligned with the 'top' (right in vertical writing) edge of the element's em-box. In this mode, an overline also switches sides."
                },
                {
                    "name": "under",
                    "description": "The underline is aligned with the 'bottom' (left in vertical writing) edge of the element's em-box. In this case the underline usually does not cross the descenders. This is sometimes called 'accounting' underline."
                }
            ],
            "relevance": 50,
            "description": "Sets the position of an underline specified on the same element: it does not affect underlines specified by ancestor elements.This property is typically used in vertical writing contexts such as in Japanese documents where it often desired to have the underline appear 'over' (to the right of) the affected run of text",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-touch-action",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The element is a passive element, with several exceptions."
                },
                {
                    "name": "double-tap-zoom",
                    "description": "The element will zoom on double-tap."
                },
                {
                    "name": "manipulation",
                    "description": "The element is a manipulation-causing element."
                },
                {
                    "name": "none",
                    "description": "The element is a manipulation-blocking element."
                },
                {
                    "name": "pan-x",
                    "description": "The element permits touch-driven panning on the horizontal axis. The touch pan is performed on the nearest ancestor with horizontally scrollable content."
                },
                {
                    "name": "pan-y",
                    "description": "The element permits touch-driven panning on the vertical axis. The touch pan is performed on the nearest ancestor with vertically scrollable content."
                },
                {
                    "name": "pinch-zoom",
                    "description": "The element permits pinch-zooming. The pinch-zoom is performed on the nearest ancestor with zoomable content."
                }
            ],
            "relevance": 50,
            "description": "Gets or sets a value that indicates whether and how a given region can be manipulated by the user.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-touch-select",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "grippers",
                    "description": "Grippers are always on."
                },
                {
                    "name": "none",
                    "description": "Grippers are always off."
                }
            ],
            "status": "nonstandard",
            "syntax": "grippers | none",
            "relevance": 0,
            "description": "Gets or sets a value that toggles the 'gripper' visual elements that enable touch text selection.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-transform",
            "browsers": [
                "IE9-9"
            ],
            "values": [
                {
                    "name": "matrix()",
                    "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
                },
                {
                    "name": "matrix3d()",
                    "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
                },
                {
                    "name": "none"
                },
                {
                    "name": "rotate()",
                    "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
                },
                {
                    "name": "rotate3d()",
                    "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
                },
                {
                    "name": "rotateX('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the X axis."
                },
                {
                    "name": "rotateY('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Y axis."
                },
                {
                    "name": "rotateZ('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Z axis."
                },
                {
                    "name": "scale()",
                    "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
                },
                {
                    "name": "scale3d()",
                    "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
                },
                {
                    "name": "scaleX()",
                    "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
                },
                {
                    "name": "scaleY()",
                    "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
                },
                {
                    "name": "scaleZ()",
                    "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
                },
                {
                    "name": "skew()",
                    "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
                },
                {
                    "name": "skewX()",
                    "description": "Specifies a skew transformation along the X axis by the given angle."
                },
                {
                    "name": "skewY()",
                    "description": "Specifies a skew transformation along the Y axis by the given angle."
                },
                {
                    "name": "translate()",
                    "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
                },
                {
                    "name": "translate3d()",
                    "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
                },
                {
                    "name": "translateX()",
                    "description": "Specifies a translation by the given amount in the X direction."
                },
                {
                    "name": "translateY()",
                    "description": "Specifies a translation by the given amount in the Y direction."
                },
                {
                    "name": "translateZ()",
                    "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
                }
            ],
            "relevance": 50,
            "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-transform-origin",
            "browsers": [
                "IE9-9"
            ],
            "relevance": 50,
            "description": "Establishes the origin of transformation for an element.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "-ms-transform-origin-x",
            "browsers": [
                "IE10"
            ],
            "relevance": 50,
            "description": "The x coordinate of the origin for transforms applied to an element with respect to its border box.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "-ms-transform-origin-y",
            "browsers": [
                "IE10"
            ],
            "relevance": 50,
            "description": "The y coordinate of the origin for transforms applied to an element with respect to its border box.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "-ms-transform-origin-z",
            "browsers": [
                "IE10"
            ],
            "relevance": 50,
            "description": "The z coordinate of the origin for transforms applied to an element with respect to its border box.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "-ms-user-select",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "element"
                },
                {
                    "name": "none"
                },
                {
                    "name": "text"
                }
            ],
            "status": "nonstandard",
            "syntax": "none | element | text",
            "relevance": 0,
            "description": "Controls the appearance of selection.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-word-break",
            "browsers": [
                "IE8"
            ],
            "values": [
                {
                    "name": "break-all",
                    "description": "Lines may break between any two grapheme clusters for non-CJK scripts."
                },
                {
                    "name": "keep-all",
                    "description": "Block characters can no longer create implied break points."
                },
                {
                    "name": "normal",
                    "description": "Breaks non-CJK scripts according to their own rules."
                }
            ],
            "relevance": 50,
            "description": "Specifies line break opportunities for non-CJK scripts.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-word-wrap",
            "browsers": [
                "IE8"
            ],
            "values": [
                {
                    "name": "break-word",
                    "description": "An unbreakable 'word' may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line."
                },
                {
                    "name": "normal",
                    "description": "Lines may break only at allowed break points."
                }
            ],
            "relevance": 50,
            "description": "Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-wrap-flow",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "For floats an exclusion is created, for all other elements an exclusion is not created."
                },
                {
                    "name": "both",
                    "description": "Inline flow content can flow on all sides of the exclusion."
                },
                {
                    "name": "clear",
                    "description": "Inline flow content can only wrap on top and bottom of the exclusion and must leave the areas to the start and end edges of the exclusion box empty."
                },
                {
                    "name": "end",
                    "description": "Inline flow content can wrap on the end side of the exclusion area but must leave the area to the start edge of the exclusion area empty."
                },
                {
                    "name": "maximum",
                    "description": "Inline flow content can wrap on the side of the exclusion with the largest available space for the given line, and must leave the other side of the exclusion empty."
                },
                {
                    "name": "minimum",
                    "description": "Inline flow content can flow around the edge of the exclusion with the smallest available space within the flow content’s containing block, and must leave the other edge of the exclusion empty."
                },
                {
                    "name": "start",
                    "description": "Inline flow content can wrap on the start edge of the exclusion area but must leave the area to end edge of the exclusion area empty."
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | both | start | end | maximum | clear",
            "relevance": 0,
            "description": "An element becomes an exclusion when its 'wrap-flow' property has a computed value other than 'auto'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-wrap-margin",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "<length>",
            "relevance": 0,
            "description": "Gets or sets a value that is used to offset the inner wrap shape from other shapes.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "-ms-wrap-through",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The exclusion element does not inherit its parent node's wrapping context. Its descendants are only subject to exclusion shapes defined inside the element."
                },
                {
                    "name": "wrap",
                    "description": "The exclusion element inherits its parent node's wrapping context. Its descendant inline content wraps around exclusions defined outside the element."
                }
            ],
            "status": "nonstandard",
            "syntax": "wrap | none",
            "relevance": 0,
            "description": "Specifies if an element inherits its parent wrapping context. In other words if it is subject to the exclusions defined outside the element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-writing-mode",
            "browsers": [
                "IE8"
            ],
            "values": [
                {
                    "name": "bt-lr"
                },
                {
                    "name": "bt-rl"
                },
                {
                    "name": "lr-bt"
                },
                {
                    "name": "lr-tb"
                },
                {
                    "name": "rl-bt"
                },
                {
                    "name": "rl-tb"
                },
                {
                    "name": "tb-lr"
                },
                {
                    "name": "tb-rl"
                }
            ],
            "relevance": 50,
            "description": "Shorthand property for both 'direction' and 'block-progression'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-zoom",
            "browsers": [
                "IE8"
            ],
            "values": [
                {
                    "name": "normal"
                }
            ],
            "relevance": 50,
            "description": "Sets or retrieves the magnification scale of the object.",
            "restrictions": [
                "enum",
                "integer",
                "number",
                "percentage"
            ]
        },
        {
            "name": "-ms-zoom-animation",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "default"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 50,
            "description": "Gets or sets a value that indicates whether an animation is used when zooming.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "nav-down",
            "browsers": [
                "O9.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The user agent automatically determines which element to navigate the focus to in response to directional navigational input."
                },
                {
                    "name": "current",
                    "description": "Indicates that the user agent should target the frame that the element is in."
                },
                {
                    "name": "root",
                    "description": "Indicates that the user agent should target the full window."
                }
            ],
            "relevance": 50,
            "description": "Provides an way to control directional focus navigation.",
            "restrictions": [
                "enum",
                "identifier",
                "string"
            ]
        },
        {
            "name": "nav-index",
            "browsers": [
                "O9.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The element's sequential navigation order is assigned automatically by the user agent."
                }
            ],
            "relevance": 50,
            "description": "Provides an input-method-neutral way of specifying the sequential navigation order (also known as 'tabbing order').",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "nav-left",
            "browsers": [
                "O9.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The user agent automatically determines which element to navigate the focus to in response to directional navigational input."
                },
                {
                    "name": "current",
                    "description": "Indicates that the user agent should target the frame that the element is in."
                },
                {
                    "name": "root",
                    "description": "Indicates that the user agent should target the full window."
                }
            ],
            "relevance": 50,
            "description": "Provides an way to control directional focus navigation.",
            "restrictions": [
                "enum",
                "identifier",
                "string"
            ]
        },
        {
            "name": "nav-right",
            "browsers": [
                "O9.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The user agent automatically determines which element to navigate the focus to in response to directional navigational input."
                },
                {
                    "name": "current",
                    "description": "Indicates that the user agent should target the frame that the element is in."
                },
                {
                    "name": "root",
                    "description": "Indicates that the user agent should target the full window."
                }
            ],
            "relevance": 50,
            "description": "Provides an way to control directional focus navigation.",
            "restrictions": [
                "enum",
                "identifier",
                "string"
            ]
        },
        {
            "name": "nav-up",
            "browsers": [
                "O9.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The user agent automatically determines which element to navigate the focus to in response to directional navigational input."
                },
                {
                    "name": "current",
                    "description": "Indicates that the user agent should target the frame that the element is in."
                },
                {
                    "name": "root",
                    "description": "Indicates that the user agent should target the full window."
                }
            ],
            "relevance": 50,
            "description": "Provides an way to control directional focus navigation.",
            "restrictions": [
                "enum",
                "identifier",
                "string"
            ]
        },
        {
            "name": "negative",
            "browsers": [
                "FF33"
            ],
            "syntax": "<symbol> <symbol>?",
            "relevance": 50,
            "description": "@counter-style descriptor. Defines how to alter the representation when the counter value is negative.",
            "restrictions": [
                "image",
                "identifier",
                "string"
            ]
        },
        {
            "name": "-o-animation",
            "browsers": [
                "O12"
            ],
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "backwards",
                    "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
                },
                {
                    "name": "both",
                    "description": "Both forwards and backwards fill modes are applied."
                },
                {
                    "name": "forwards",
                    "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
                },
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                },
                {
                    "name": "none",
                    "description": "No animation is performed"
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property combines six of the animation properties into a single property.",
            "restrictions": [
                "time",
                "enum",
                "timing-function",
                "identifier",
                "number"
            ]
        },
        {
            "name": "-o-animation-delay",
            "browsers": [
                "O12"
            ],
            "relevance": 50,
            "description": "Defines when the animation will start.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-o-animation-direction",
            "browsers": [
                "O12"
            ],
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "relevance": 50,
            "description": "Defines whether or not the animation should play in reverse on alternate cycles.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-o-animation-duration",
            "browsers": [
                "O12"
            ],
            "relevance": 50,
            "description": "Defines the length of time that an animation takes to complete one cycle.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-o-animation-fill-mode",
            "browsers": [
                "O12"
            ],
            "values": [
                {
                    "name": "backwards",
                    "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
                },
                {
                    "name": "both",
                    "description": "Both forwards and backwards fill modes are applied."
                },
                {
                    "name": "forwards",
                    "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
                },
                {
                    "name": "none",
                    "description": "There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes."
                }
            ],
            "relevance": 50,
            "description": "Defines what values are applied by the animation outside the time it is executing.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-o-animation-iteration-count",
            "browsers": [
                "O12"
            ],
            "values": [
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                }
            ],
            "relevance": 50,
            "description": "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
            "restrictions": [
                "number",
                "enum"
            ]
        },
        {
            "name": "-o-animation-name",
            "browsers": [
                "O12"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No animation is performed"
                }
            ],
            "relevance": 50,
            "description": "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
            "restrictions": [
                "identifier",
                "enum"
            ]
        },
        {
            "name": "-o-animation-play-state",
            "browsers": [
                "O12"
            ],
            "values": [
                {
                    "name": "paused",
                    "description": "A running animation will be paused."
                },
                {
                    "name": "running",
                    "description": "Resume playback of a paused animation."
                }
            ],
            "relevance": 50,
            "description": "Defines whether the animation is running or paused.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-o-animation-timing-function",
            "browsers": [
                "O12"
            ],
            "relevance": 50,
            "description": "Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "object-fit",
            "browsers": [
                "E16",
                "FF36",
                "S10",
                "C31",
                "O19"
            ],
            "values": [
                {
                    "name": "contain",
                    "description": "The replaced content is sized to maintain its aspect ratio while fitting within the element’s content box: its concrete object size is resolved as a contain constraint against the element's used width and height."
                },
                {
                    "name": "cover",
                    "description": "The replaced content is sized to maintain its aspect ratio while filling the element's entire content box: its concrete object size is resolved as a cover constraint against the element’s used width and height."
                },
                {
                    "name": "fill",
                    "description": "The replaced content is sized to fill the element’s content box: the object's concrete object size is the element's used width and height."
                },
                {
                    "name": "none",
                    "description": "The replaced content is not resized to fit inside the element's content box"
                },
                {
                    "name": "scale-down",
                    "description": "Size the content as if ‘none’ or ‘contain’ were specified, whichever would result in a smaller concrete object size."
                }
            ],
            "syntax": "fill | contain | cover | none | scale-down",
            "relevance": 61,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/object-fit"
                }
            ],
            "description": "Specifies how the contents of a replaced element should be scaled relative to the box established by its used height and width.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "object-position",
            "browsers": [
                "E16",
                "FF36",
                "S10",
                "C31",
                "O19"
            ],
            "syntax": "<position>",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/object-position"
                }
            ],
            "description": "Determines the alignment of the replaced element inside its box.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "-o-border-image",
            "browsers": [
                "O11.6"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
                },
                {
                    "name": "fill",
                    "description": "Causes the middle part of the border-image to be preserved."
                },
                {
                    "name": "none"
                },
                {
                    "name": "repeat",
                    "description": "The image is tiled (repeated) to fill the area."
                },
                {
                    "name": "round",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
                },
                {
                    "name": "space",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
                },
                {
                    "name": "stretch",
                    "description": "The image is stretched to fill the area."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
            "restrictions": [
                "length",
                "percentage",
                "number",
                "image",
                "enum"
            ]
        },
        {
            "name": "-o-object-fit",
            "browsers": [
                "O10.6"
            ],
            "values": [
                {
                    "name": "contain",
                    "description": "The replaced content is sized to maintain its aspect ratio while fitting within the element’s content box: its concrete object size is resolved as a contain constraint against the element's used width and height."
                },
                {
                    "name": "cover",
                    "description": "The replaced content is sized to maintain its aspect ratio while filling the element's entire content box: its concrete object size is resolved as a cover constraint against the element’s used width and height."
                },
                {
                    "name": "fill",
                    "description": "The replaced content is sized to fill the element’s content box: the object's concrete object size is the element's used width and height."
                },
                {
                    "name": "none",
                    "description": "The replaced content is not resized to fit inside the element's content box"
                },
                {
                    "name": "scale-down",
                    "description": "Size the content as if ‘none’ or ‘contain’ were specified, whichever would result in a smaller concrete object size."
                }
            ],
            "relevance": 50,
            "description": "Specifies how the contents of a replaced element should be scaled relative to the box established by its used height and width.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-o-object-position",
            "browsers": [
                "O10.6"
            ],
            "relevance": 50,
            "description": "Determines the alignment of the replaced element inside its box.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "opacity",
            "syntax": "<alpha-value>",
            "relevance": 93,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/opacity"
                }
            ],
            "description": "Opacity of an element's text, where 1 is opaque and 0 is entirely transparent.",
            "restrictions": [
                "number(0-1)"
            ]
        },
        {
            "name": "order",
            "syntax": "<integer>",
            "relevance": 61,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/order"
                }
            ],
            "description": "Controls the order in which children of a flex container appear within the flex container, by assigning them to ordinal groups.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "orphans",
            "browsers": [
                "E12",
                "S1.3",
                "C25",
                "IE8",
                "O9.2"
            ],
            "syntax": "<integer>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/orphans"
                }
            ],
            "description": "Specifies the minimum number of line boxes in a block container that must be left in a fragment before a fragmentation break.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-o-table-baseline",
            "browsers": [
                "O9.6"
            ],
            "relevance": 50,
            "description": "Determines which row of a inline-table should be used as baseline of inline-table.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-o-tab-size",
            "browsers": [
                "O10.6"
            ],
            "relevance": 50,
            "description": "This property determines the width of the tab character (U+0009), in space characters (U+0020), when rendered.",
            "restrictions": [
                "integer",
                "length"
            ]
        },
        {
            "name": "-o-text-overflow",
            "browsers": [
                "O10"
            ],
            "values": [
                {
                    "name": "clip",
                    "description": "Clip inline content that overflows. Characters may be only partially rendered."
                },
                {
                    "name": "ellipsis",
                    "description": "Render an ellipsis character (U+2026) to represent clipped inline content."
                }
            ],
            "relevance": 50,
            "description": "Text can overflow for example when it is prevented from wrapping",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-o-transform",
            "browsers": [
                "O10.5"
            ],
            "values": [
                {
                    "name": "matrix()",
                    "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
                },
                {
                    "name": "matrix3d()",
                    "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
                },
                {
                    "name": "none"
                },
                {
                    "name": "rotate()",
                    "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
                },
                {
                    "name": "rotate3d()",
                    "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
                },
                {
                    "name": "rotateX('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the X axis."
                },
                {
                    "name": "rotateY('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Y axis."
                },
                {
                    "name": "rotateZ('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Z axis."
                },
                {
                    "name": "scale()",
                    "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
                },
                {
                    "name": "scale3d()",
                    "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
                },
                {
                    "name": "scaleX()",
                    "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
                },
                {
                    "name": "scaleY()",
                    "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
                },
                {
                    "name": "scaleZ()",
                    "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
                },
                {
                    "name": "skew()",
                    "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
                },
                {
                    "name": "skewX()",
                    "description": "Specifies a skew transformation along the X axis by the given angle."
                },
                {
                    "name": "skewY()",
                    "description": "Specifies a skew transformation along the Y axis by the given angle."
                },
                {
                    "name": "translate()",
                    "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
                },
                {
                    "name": "translate3d()",
                    "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
                },
                {
                    "name": "translateX()",
                    "description": "Specifies a translation by the given amount in the X direction."
                },
                {
                    "name": "translateY()",
                    "description": "Specifies a translation by the given amount in the Y direction."
                },
                {
                    "name": "translateZ()",
                    "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
                }
            ],
            "relevance": 50,
            "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-o-transform-origin",
            "browsers": [
                "O10.5"
            ],
            "relevance": 50,
            "description": "Establishes the origin of transformation for an element.",
            "restrictions": [
                "positon",
                "length",
                "percentage"
            ]
        },
        {
            "name": "-o-transition",
            "browsers": [
                "O11.5"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property combines four of the transition properties into a single property.",
            "restrictions": [
                "time",
                "property",
                "timing-function",
                "enum"
            ]
        },
        {
            "name": "-o-transition-delay",
            "browsers": [
                "O11.5"
            ],
            "relevance": 50,
            "description": "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-o-transition-duration",
            "browsers": [
                "O11.5"
            ],
            "relevance": 50,
            "description": "Specifies how long the transition from the old value to the new value should take.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-o-transition-property",
            "browsers": [
                "O11.5"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "relevance": 50,
            "description": "Specifies the name of the CSS property to which the transition is applied.",
            "restrictions": [
                "property"
            ]
        },
        {
            "name": "-o-transition-timing-function",
            "browsers": [
                "O11.5"
            ],
            "relevance": 50,
            "description": "Describes how the intermediate values used during a transition will be calculated.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "offset-block-end",
            "browsers": [
                "FF41"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."
                }
            ],
            "relevance": 50,
            "description": "Logical 'bottom'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "offset-block-start",
            "browsers": [
                "FF41"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."
                }
            ],
            "relevance": 50,
            "description": "Logical 'top'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "offset-inline-end",
            "browsers": [
                "FF41"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."
                }
            ],
            "relevance": 50,
            "description": "Logical 'right'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "offset-inline-start",
            "browsers": [
                "FF41"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."
                }
            ],
            "relevance": 50,
            "description": "Logical 'left'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "outline",
            "values": [
                {
                    "name": "auto",
                    "description": "Permits the user agent to render a custom outline style, typically the default platform style."
                },
                {
                    "name": "invert",
                    "description": "Performs a color inversion on the pixels on the screen."
                }
            ],
            "syntax": "[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]",
            "relevance": 87,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/outline"
                }
            ],
            "description": "Shorthand property for 'outline-style', 'outline-width', and 'outline-color'.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color",
                "enum"
            ]
        },
        {
            "name": "outline-color",
            "values": [
                {
                    "name": "invert",
                    "description": "Performs a color inversion on the pixels on the screen."
                }
            ],
            "syntax": "<color> | invert",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/outline-color"
                }
            ],
            "description": "The color of the outline.",
            "restrictions": [
                "enum",
                "color"
            ]
        },
        {
            "name": "outline-offset",
            "browsers": [
                "E15",
                "FF1.5",
                "S1.2",
                "C1",
                "O9.5"
            ],
            "syntax": "<length>",
            "relevance": 59,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/outline-offset"
                }
            ],
            "description": "Offset the outline and draw it beyond the border edge.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "outline-style",
            "values": [
                {
                    "name": "auto",
                    "description": "Permits the user agent to render a custom outline style, typically the default platform style."
                }
            ],
            "syntax": "auto | <'border-style'>",
            "relevance": 60,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/outline-style"
                }
            ],
            "description": "Style of the outline.",
            "restrictions": [
                "line-style",
                "enum"
            ]
        },
        {
            "name": "outline-width",
            "syntax": "<line-width>",
            "relevance": 60,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/outline-width"
                }
            ],
            "description": "Width of the outline.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "overflow",
            "values": [
                {
                    "name": "auto",
                    "description": "The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes."
                },
                {
                    "name": "hidden",
                    "description": "Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region."
                },
                {
                    "name": "-moz-hidden-unscrollable",
                    "description": "Same as the standardized 'clip', except doesn’t establish a block formatting context."
                },
                {
                    "name": "scroll",
                    "description": "Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped."
                },
                {
                    "name": "visible",
                    "description": "Content is not clipped, i.e., it may be rendered outside the content box."
                }
            ],
            "syntax": "[ visible | hidden | clip | scroll | auto ]{1,2}",
            "relevance": 92,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow"
                }
            ],
            "description": "Shorthand for setting 'overflow-x' and 'overflow-y'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "overflow-wrap",
            "values": [
                {
                    "name": "break-word",
                    "description": "An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line."
                },
                {
                    "name": "normal",
                    "description": "Lines may break only at allowed break points."
                }
            ],
            "syntax": "normal | break-word | anywhere",
            "relevance": 63,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-wrap"
                }
            ],
            "description": "Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit within the line box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "overflow-x",
            "values": [
                {
                    "name": "auto",
                    "description": "The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes."
                },
                {
                    "name": "hidden",
                    "description": "Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region."
                },
                {
                    "name": "scroll",
                    "description": "Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped."
                },
                {
                    "name": "visible",
                    "description": "Content is not clipped, i.e., it may be rendered outside the content box."
                }
            ],
            "syntax": "visible | hidden | clip | scroll | auto",
            "relevance": 79,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-x"
                }
            ],
            "description": "Specifies the handling of overflow in the horizontal direction.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "overflow-y",
            "values": [
                {
                    "name": "auto",
                    "description": "The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes."
                },
                {
                    "name": "hidden",
                    "description": "Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region."
                },
                {
                    "name": "scroll",
                    "description": "Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped."
                },
                {
                    "name": "visible",
                    "description": "Content is not clipped, i.e., it may be rendered outside the content box."
                }
            ],
            "syntax": "visible | hidden | clip | scroll | auto",
            "relevance": 81,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-y"
                }
            ],
            "description": "Specifies the handling of overflow in the vertical direction.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "pad",
            "browsers": [
                "FF33"
            ],
            "syntax": "<integer> && <symbol>",
            "relevance": 50,
            "description": "@counter-style descriptor. Specifies a “fixed-width” counter style, where representations shorter than the pad value are padded with a particular <symbol>",
            "restrictions": [
                "integer",
                "image",
                "string",
                "identifier"
            ]
        },
        {
            "name": "padding",
            "values": [],
            "syntax": "[ <length> | <percentage> ]{1,4}",
            "relevance": 96,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding"
                }
            ],
            "description": "Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-bottom",
            "syntax": "<length> | <percentage>",
            "relevance": 88,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-bottom"
                }
            ],
            "description": "Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-block-end",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'padding-left'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-block-end"
                }
            ],
            "description": "Logical 'padding-bottom'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-block-start",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'padding-left'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-block-start"
                }
            ],
            "description": "Logical 'padding-top'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-inline-end",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'padding-left'>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-inline-end"
                }
            ],
            "description": "Logical 'padding-right'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-inline-start",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'padding-left'>",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-inline-start"
                }
            ],
            "description": "Logical 'padding-left'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-left",
            "syntax": "<length> | <percentage>",
            "relevance": 90,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-left"
                }
            ],
            "description": "Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-right",
            "syntax": "<length> | <percentage>",
            "relevance": 88,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-right"
                }
            ],
            "description": "Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-top",
            "syntax": "<length> | <percentage>",
            "relevance": 90,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-top"
                }
            ],
            "description": "Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "page-break-after",
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break after the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page break after generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page break after the generated box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks after the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks after the generated box so that the next page is formatted as a right page."
                }
            ],
            "syntax": "auto | always | avoid | left | right | recto | verso",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/page-break-after"
                }
            ],
            "description": "Defines rules for page breaks after an element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "page-break-before",
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break before the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page break before the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page break before the generated box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks before the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks before the generated box so that the next page is formatted as a right page."
                }
            ],
            "syntax": "auto | always | avoid | left | right | recto | verso",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/page-break-before"
                }
            ],
            "description": "Defines rules for page breaks before an element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "page-break-inside",
            "values": [
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page break inside the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page break inside the generated box."
                }
            ],
            "syntax": "auto | avoid",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/page-break-inside"
                }
            ],
            "description": "Defines rules for page breaks inside an element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "paint-order",
            "browsers": [
                "E17",
                "FF60",
                "S8",
                "C35",
                "O22"
            ],
            "values": [
                {
                    "name": "fill"
                },
                {
                    "name": "markers"
                },
                {
                    "name": "normal",
                    "description": "The element is painted with the standard order of painting operations: the 'fill' is painted first, then its 'stroke' and finally its markers."
                },
                {
                    "name": "stroke"
                }
            ],
            "syntax": "normal | [ fill || stroke || markers ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/paint-order"
                }
            ],
            "description": "Controls the order that the three paint operations that shapes and text are rendered with: their fill, their stroke and any markers they might have.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "perspective",
            "values": [
                {
                    "name": "none",
                    "description": "No perspective transform is applied."
                }
            ],
            "syntax": "none | <length>",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/perspective"
                }
            ],
            "description": "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
            "restrictions": [
                "length",
                "enum"
            ]
        },
        {
            "name": "perspective-origin",
            "syntax": "<position>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/perspective-origin"
                }
            ],
            "description": "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
            "restrictions": [
                "position",
                "percentage",
                "length"
            ]
        },
        {
            "name": "pointer-events",
            "values": [
                {
                    "name": "all",
                    "description": "The given element can be the target element for pointer events whenever the pointer is over either the interior or the perimeter of the element."
                },
                {
                    "name": "fill",
                    "description": "The given element can be the target element for pointer events whenever the pointer is over the interior of the element."
                },
                {
                    "name": "none",
                    "description": "The given element does not receive pointer events."
                },
                {
                    "name": "painted",
                    "description": "The given element can be the target element for pointer events when the pointer is over a \"painted\" area. "
                },
                {
                    "name": "stroke",
                    "description": "The given element can be the target element for pointer events whenever the pointer is over the perimeter of the element."
                },
                {
                    "name": "visible",
                    "description": "The given element can be the target element for pointer events when the ‘visibility’ property is set to visible and the pointer is over either the interior or the perimete of the element."
                },
                {
                    "name": "visibleFill",
                    "description": "The given element can be the target element for pointer events when the ‘visibility’ property is set to visible and when the pointer is over the interior of the element."
                },
                {
                    "name": "visiblePainted",
                    "description": "The given element can be the target element for pointer events when the ‘visibility’ property is set to visible and when the pointer is over a ‘painted’ area."
                },
                {
                    "name": "visibleStroke",
                    "description": "The given element can be the target element for pointer events when the ‘visibility’ property is set to visible and when the pointer is over the perimeter of the element."
                }
            ],
            "syntax": "auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit",
            "relevance": 80,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/pointer-events"
                }
            ],
            "description": "Specifies under what circumstances a given element can be the target element for a pointer event.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "position",
            "values": [
                {
                    "name": "absolute",
                    "description": "The box's position (and possibly size) is specified with the 'top', 'right', 'bottom', and 'left' properties. These properties specify offsets with respect to the box's 'containing block'."
                },
                {
                    "name": "fixed",
                    "description": "The box's position is calculated according to the 'absolute' model, but in addition, the box is fixed with respect to some reference. As with the 'absolute' model, the box's margins do not collapse with any other margins."
                },
                {
                    "name": "-ms-page",
                    "description": "The box's position is calculated according to the 'absolute' model."
                },
                {
                    "name": "relative",
                    "description": "The box's position is calculated according to the normal flow (this is called the position in normal flow). Then the box is offset relative to its normal position."
                },
                {
                    "name": "static",
                    "description": "The box is a normal box, laid out according to the normal flow. The 'top', 'right', 'bottom', and 'left' properties do not apply."
                },
                {
                    "name": "sticky",
                    "description": "The box's position is calculated according to the normal flow. Then the box is offset relative to its flow root and containing block and in all cases, including table elements, does not affect the position of any following boxes."
                },
                {
                    "name": "-webkit-sticky",
                    "description": "The box's position is calculated according to the normal flow. Then the box is offset relative to its flow root and containing block and in all cases, including table elements, does not affect the position of any following boxes."
                }
            ],
            "syntax": "static | relative | absolute | sticky | fixed",
            "relevance": 96,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/position"
                }
            ],
            "description": "The position CSS property sets how an element is positioned in a document. The top, right, bottom, and left properties determine the final location of positioned elements.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "prefix",
            "browsers": [
                "FF33"
            ],
            "syntax": "<symbol>",
            "relevance": 50,
            "description": "@counter-style descriptor. Specifies a <symbol> that is prepended to the marker representation.",
            "restrictions": [
                "image",
                "string",
                "identifier"
            ]
        },
        {
            "name": "quotes",
            "values": [
                {
                    "name": "none",
                    "description": "The 'open-quote' and 'close-quote' values of the 'content' property produce no quotations marks, as if they were 'no-open-quote' and 'no-close-quote' respectively."
                }
            ],
            "syntax": "none | auto | [ <string> <string> ]+",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/quotes"
                }
            ],
            "description": "Specifies quotation marks for any number of embedded quotations.",
            "restrictions": [
                "string"
            ]
        },
        {
            "name": "range",
            "browsers": [
                "FF33"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The range depends on the counter system."
                },
                {
                    "name": "infinite",
                    "description": "If used as the first value in a range, it represents negative infinity; if used as the second value, it represents positive infinity."
                }
            ],
            "syntax": "[ [ <integer> | infinite ]{2} ]# | auto",
            "relevance": 50,
            "description": "@counter-style descriptor. Defines the ranges over which the counter style is defined.",
            "restrictions": [
                "integer",
                "enum"
            ]
        },
        {
            "name": "resize",
            "browsers": [
                "E79",
                "FF4",
                "S3",
                "C1",
                "O12.1"
            ],
            "values": [
                {
                    "name": "both",
                    "description": "The UA presents a bidirectional resizing mechanism to allow the user to adjust both the height and the width of the element."
                },
                {
                    "name": "horizontal",
                    "description": "The UA presents a unidirectional horizontal resizing mechanism to allow the user to adjust only the width of the element."
                },
                {
                    "name": "none",
                    "description": "The UA does not present a resizing mechanism on the element, and the user is given no direct manipulation mechanism to resize the element."
                },
                {
                    "name": "vertical",
                    "description": "The UA presents a unidirectional vertical resizing mechanism to allow the user to adjust only the height of the element."
                }
            ],
            "syntax": "none | both | horizontal | vertical | block | inline",
            "relevance": 60,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/resize"
                }
            ],
            "description": "Specifies whether or not an element is resizable by the user, and if so, along which axis/axes.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "right",
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 90,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/right"
                }
            ],
            "description": "Specifies how far an absolutely positioned box's right margin edge is offset to the left of the right edge of the box's 'containing block'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "ruby-align",
            "browsers": [
                "FF38"
            ],
            "values": [
                {
                    "name": "auto",
                    "browsers": [
                        "FF38"
                    ],
                    "description": "The user agent determines how the ruby contents are aligned. This is the initial value."
                },
                {
                    "name": "center",
                    "description": "The ruby content is centered within its box."
                },
                {
                    "name": "distribute-letter",
                    "browsers": [
                        "FF38"
                    ],
                    "description": "If the width of the ruby text is smaller than that of the base, then the ruby text contents are evenly distributed across the width of the base, with the first and last ruby text glyphs lining up with the corresponding first and last base glyphs. If the width of the ruby text is at least the width of the base, then the letters of the base are evenly distributed across the width of the ruby text."
                },
                {
                    "name": "distribute-space",
                    "browsers": [
                        "FF38"
                    ],
                    "description": "If the width of the ruby text is smaller than that of the base, then the ruby text contents are evenly distributed across the width of the base, with a certain amount of white space preceding the first and following the last character in the ruby text. That amount of white space is normally equal to half the amount of inter-character space of the ruby text."
                },
                {
                    "name": "left",
                    "description": "The ruby text content is aligned with the start edge of the base."
                },
                {
                    "name": "line-edge",
                    "browsers": [
                        "FF38"
                    ],
                    "description": "If the ruby text is not adjacent to a line edge, it is aligned as in 'auto'. If it is adjacent to a line edge, then it is still aligned as in auto, but the side of the ruby text that touches the end of the line is lined up with the corresponding edge of the base."
                },
                {
                    "name": "right",
                    "browsers": [
                        "FF38"
                    ],
                    "description": "The ruby text content is aligned with the end edge of the base."
                },
                {
                    "name": "start",
                    "browsers": [
                        "FF38"
                    ],
                    "description": "The ruby text content is aligned with the start edge of the base."
                },
                {
                    "name": "space-between",
                    "browsers": [
                        "FF38"
                    ],
                    "description": "The ruby content expands as defined for normal text justification (as defined by 'text-justify'),"
                },
                {
                    "name": "space-around",
                    "browsers": [
                        "FF38"
                    ],
                    "description": "As for 'space-between' except that there exists an extra justification opportunities whose space is distributed half before and half after the ruby content."
                }
            ],
            "status": "experimental",
            "syntax": "start | center | space-between | space-around",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/ruby-align"
                }
            ],
            "description": "Specifies how text is distributed within the various ruby boxes when their contents do not exactly fill their respective boxes.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "ruby-overhang",
            "browsers": [
                "FF10",
                "IE5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The ruby text can overhang text adjacent to the base on either side. This is the initial value."
                },
                {
                    "name": "end",
                    "description": "The ruby text can overhang the text that follows it."
                },
                {
                    "name": "none",
                    "description": "The ruby text cannot overhang any text adjacent to its base, only its own base."
                },
                {
                    "name": "start",
                    "description": "The ruby text can overhang the text that precedes it."
                }
            ],
            "relevance": 50,
            "description": "Determines whether, and on which side, ruby text is allowed to partially overhang any adjacent text in addition to its own base, when the ruby text is wider than the ruby base.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "ruby-position",
            "browsers": [
                "E12",
                "FF38"
            ],
            "values": [
                {
                    "name": "after",
                    "description": "The ruby text appears after the base. This is a relatively rare setting used in ideographic East Asian writing systems, most easily found in educational text."
                },
                {
                    "name": "before",
                    "description": "The ruby text appears before the base. This is the most common setting used in ideographic East Asian writing systems."
                },
                {
                    "name": "inline"
                },
                {
                    "name": "right",
                    "description": "The ruby text appears on the right of the base. Unlike 'before' and 'after', this value is not relative to the text flow direction."
                }
            ],
            "status": "experimental",
            "syntax": "over | under | inter-character",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/ruby-position"
                }
            ],
            "description": "Used by the parent of elements with display: ruby-text to control the position of the ruby text with respect to its base.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "ruby-span",
            "browsers": [
                "FF10"
            ],
            "values": [
                {
                    "name": "attr(x)",
                    "description": "The value of attribute 'x' is a string value. The string value is evaluated as a <number> to determine the number of ruby base elements to be spanned by the annotation element."
                },
                {
                    "name": "none",
                    "description": "No spanning. The computed value is '1'."
                }
            ],
            "relevance": 50,
            "description": "Determines whether, and on which side, ruby text is allowed to partially overhang any adjacent text in addition to its own base, when the ruby text is wider than the ruby base.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "scrollbar-3dlight-color",
            "browsers": [
                "IE5"
            ],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-3dlight-color"
                }
            ],
            "description": "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scrollbar-arrow-color",
            "browsers": [
                "IE5"
            ],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-arrow-color"
                }
            ],
            "description": "Determines the color of the arrow elements of a scroll arrow.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scrollbar-base-color",
            "browsers": [
                "IE5"
            ],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-base-color"
                }
            ],
            "description": "Determines the color of the main elements of a scroll bar, which include the scroll box, track, and scroll arrows.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scrollbar-darkshadow-color",
            "browsers": [
                "IE5"
            ],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-darkshadow-color"
                }
            ],
            "description": "Determines the color of the gutter of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scrollbar-face-color",
            "browsers": [
                "IE5"
            ],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-face-color"
                }
            ],
            "description": "Determines the color of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scrollbar-highlight-color",
            "browsers": [
                "IE5"
            ],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-highlight-color"
                }
            ],
            "description": "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scrollbar-shadow-color",
            "browsers": [
                "IE5"
            ],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-shadow-color"
                }
            ],
            "description": "Determines the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scrollbar-track-color",
            "browsers": [
                "IE6"
            ],
            "relevance": 50,
            "description": "Determines the color of the track element of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scroll-behavior",
            "browsers": [
                "E79",
                "FF36",
                "C61",
                "O48"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Scrolls in an instant fashion."
                },
                {
                    "name": "smooth",
                    "description": "Scrolls in a smooth fashion using a user-agent-defined timing function and time period."
                }
            ],
            "syntax": "auto | smooth",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-behavior"
                }
            ],
            "description": "Specifies the scrolling behavior for a scrolling box, when scrolling happens due to navigation or CSSOM scrolling APIs.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "scroll-snap-coordinate",
            "browsers": [
                "FF39"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Specifies that this element does not contribute a snap point."
                }
            ],
            "status": "obsolete",
            "syntax": "none | <position>#",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-coordinate"
                }
            ],
            "description": "Defines the x and y coordinate within the element which will align with the nearest ancestor scroll container’s snap-destination for the respective axis.",
            "restrictions": [
                "position",
                "length",
                "percentage",
                "enum"
            ]
        },
        {
            "name": "scroll-snap-destination",
            "browsers": [
                "FF39"
            ],
            "status": "obsolete",
            "syntax": "<position>",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-destination"
                }
            ],
            "description": "Define the x and y coordinate within the scroll container’s visual viewport which element snap points will align with.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "scroll-snap-points-x",
            "browsers": [
                "FF39",
                "S9"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No snap points are defined by this scroll container."
                },
                {
                    "name": "repeat()",
                    "description": "Defines an interval at which snap points are defined, starting from the container’s relevant start edge."
                }
            ],
            "status": "obsolete",
            "syntax": "none | repeat( <length-percentage> )",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-points-x"
                }
            ],
            "description": "Defines the positioning of snap points along the x axis of the scroll container it is applied to.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "scroll-snap-points-y",
            "browsers": [
                "FF39",
                "S9"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No snap points are defined by this scroll container."
                },
                {
                    "name": "repeat()",
                    "description": "Defines an interval at which snap points are defined, starting from the container’s relevant start edge."
                }
            ],
            "status": "obsolete",
            "syntax": "none | repeat( <length-percentage> )",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-points-y"
                }
            ],
            "description": "Defines the positioning of snap points along the y axis of the scroll container it is applied to.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "scroll-snap-type",
            "values": [
                {
                    "name": "none",
                    "description": "The visual viewport of this scroll container must ignore snap points, if any, when scrolled."
                },
                {
                    "name": "mandatory",
                    "description": "The visual viewport of this scroll container is guaranteed to rest on a snap point when there are no active scrolling operations."
                },
                {
                    "name": "proximity",
                    "description": "The visual viewport of this scroll container may come to rest on a snap point at the termination of a scroll at the discretion of the UA given the parameters of the scroll."
                }
            ],
            "syntax": "none | [ x | y | block | inline | both ] [ mandatory | proximity ]?",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type"
                }
            ],
            "description": "Defines how strictly snap points are enforced on the scroll container.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "shape-image-threshold",
            "browsers": [
                "E79",
                "FF62",
                "S10.1",
                "C37",
                "O24"
            ],
            "syntax": "<alpha-value>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold"
                }
            ],
            "description": "Defines the alpha channel threshold used to extract the shape using an image. A value of 0.5 means that the shape will enclose all the pixels that are more than 50% opaque.",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "shape-margin",
            "browsers": [
                "E79",
                "FF62",
                "S10.1",
                "C37",
                "O24"
            ],
            "syntax": "<length-percentage>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/shape-margin"
                }
            ],
            "description": "Adds a margin to a 'shape-outside'. This defines a new shape that is the smallest contour that includes all the points that are the 'shape-margin' distance outward in the perpendicular direction from a point on the underlying shape.",
            "restrictions": [
                "url",
                "length",
                "percentage"
            ]
        },
        {
            "name": "shape-outside",
            "browsers": [
                "E79",
                "FF62",
                "S10.1",
                "C37",
                "O24"
            ],
            "values": [
                {
                    "name": "margin-box",
                    "description": "The background is painted within (clipped to) the margin box."
                },
                {
                    "name": "none",
                    "description": "The float area is unaffected."
                }
            ],
            "syntax": "none | <shape-box> || <basic-shape> | <image>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/shape-outside"
                }
            ],
            "description": "Specifies an orthogonal rotation to be applied to an image before it is laid out.",
            "restrictions": [
                "image",
                "box",
                "shape",
                "enum"
            ]
        },
        {
            "name": "shape-rendering",
            "values": [
                {
                    "name": "auto",
                    "description": "Suppresses aural rendering."
                },
                {
                    "name": "crispEdges",
                    "description": "Emphasize the contrast between clean edges of artwork over rendering speed and geometric precision."
                },
                {
                    "name": "geometricPrecision",
                    "description": "Emphasize geometric precision over speed and crisp edges."
                },
                {
                    "name": "optimizeSpeed",
                    "description": "Emphasize rendering speed over geometric precision and crisp edges."
                }
            ],
            "relevance": 50,
            "description": "Provides hints about what tradeoffs to make as it renders vector graphics elements such as <path> elements and basic shapes such as circles and rectangles.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "size",
            "browsers": [
                "C",
                "O8"
            ],
            "syntax": "<length>{1,2} | auto | [ <page-size> || [ portrait | landscape ] ]",
            "relevance": 52,
            "description": "The size CSS at-rule descriptor, used with the @page at-rule, defines the size and orientation of the box which is used to represent a page. Most of the time, this size corresponds to the target size of the printed page if applicable.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "src",
            "values": [
                {
                    "name": "url()",
                    "description": "Reference font by URL"
                },
                {
                    "name": "format()",
                    "description": "Optional hint describing the format of the font resource."
                },
                {
                    "name": "local()",
                    "description": "Format-specific string that identifies a locally available copy of a given font."
                }
            ],
            "syntax": "[ <url> [ format( <string># ) ]? | local( <family-name> ) ]#",
            "relevance": 67,
            "description": "@font-face descriptor. Specifies the resource containing font data. It is required, whether the font is downloadable or locally installed.",
            "restrictions": [
                "enum",
                "url",
                "identifier"
            ]
        },
        {
            "name": "stop-color",
            "relevance": 51,
            "description": "Indicates what color to use at that gradient stop.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "stop-opacity",
            "relevance": 50,
            "description": "Defines the opacity of a given gradient stop.",
            "restrictions": [
                "number(0-1)"
            ]
        },
        {
            "name": "stroke",
            "values": [
                {
                    "name": "url()",
                    "description": "A URL reference to a paint server element, which is an element that defines a paint server: ‘hatch’, ‘linearGradient’, ‘mesh’, ‘pattern’, ‘radialGradient’ and ‘solidcolor’."
                },
                {
                    "name": "none",
                    "description": "No paint is applied in this layer."
                }
            ],
            "relevance": 63,
            "description": "Paints along the outline of the given graphical element.",
            "restrictions": [
                "color",
                "enum",
                "url"
            ]
        },
        {
            "name": "stroke-dasharray",
            "values": [
                {
                    "name": "none",
                    "description": "Indicates that no dashing is used."
                }
            ],
            "relevance": 58,
            "description": "Controls the pattern of dashes and gaps used to stroke paths.",
            "restrictions": [
                "length",
                "percentage",
                "number",
                "enum"
            ]
        },
        {
            "name": "stroke-dashoffset",
            "relevance": 58,
            "description": "Specifies the distance into the dash pattern to start the dash.",
            "restrictions": [
                "percentage",
                "length"
            ]
        },
        {
            "name": "stroke-linecap",
            "values": [
                {
                    "name": "butt",
                    "description": "Indicates that the stroke for each subpath does not extend beyond its two endpoints."
                },
                {
                    "name": "round",
                    "description": "Indicates that at each end of each subpath, the shape representing the stroke will be extended by a half circle with a radius equal to the stroke width."
                },
                {
                    "name": "square",
                    "description": "Indicates that at the end of each subpath, the shape representing the stroke will be extended by a rectangle with the same width as the stroke width and whose length is half of the stroke width."
                }
            ],
            "relevance": 53,
            "description": "Specifies the shape to be used at the end of open subpaths when they are stroked.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "stroke-linejoin",
            "values": [
                {
                    "name": "bevel",
                    "description": "Indicates that a bevelled corner is to be used to join path segments."
                },
                {
                    "name": "miter",
                    "description": "Indicates that a sharp corner is to be used to join path segments."
                },
                {
                    "name": "round",
                    "description": "Indicates that a round corner is to be used to join path segments."
                }
            ],
            "relevance": 50,
            "description": "Specifies the shape to be used at the corners of paths or basic shapes when they are stroked.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "stroke-miterlimit",
            "relevance": 50,
            "description": "When two line segments meet at a sharp angle and miter joins have been specified for 'stroke-linejoin', it is possible for the miter to extend far beyond the thickness of the line stroking the path.",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "stroke-opacity",
            "relevance": 51,
            "description": "Specifies the opacity of the painting operation used to stroke the current object.",
            "restrictions": [
                "number(0-1)"
            ]
        },
        {
            "name": "stroke-width",
            "relevance": 60,
            "description": "Specifies the width of the stroke on the current object.",
            "restrictions": [
                "percentage",
                "length"
            ]
        },
        {
            "name": "suffix",
            "browsers": [
                "FF33"
            ],
            "syntax": "<symbol>",
            "relevance": 50,
            "description": "@counter-style descriptor. Specifies a <symbol> that is appended to the marker representation.",
            "restrictions": [
                "image",
                "string",
                "identifier"
            ]
        },
        {
            "name": "system",
            "browsers": [
                "FF33"
            ],
            "values": [
                {
                    "name": "additive",
                    "description": "Represents “sign-value” numbering systems, which, rather than using reusing digits in different positions to change their value, define additional digits with much larger values, so that the value of the number can be obtained by adding all the digits together."
                },
                {
                    "name": "alphabetic",
                    "description": "Interprets the list of counter symbols as digits to an alphabetic numbering system, similar to the default lower-alpha counter style, which wraps from \"a\", \"b\", \"c\", to \"aa\", \"ab\", \"ac\"."
                },
                {
                    "name": "cyclic",
                    "description": "Cycles repeatedly through its provided symbols, looping back to the beginning when it reaches the end of the list."
                },
                {
                    "name": "extends",
                    "description": "Use the algorithm of another counter style, but alter other aspects."
                },
                {
                    "name": "fixed",
                    "description": "Runs through its list of counter symbols once, then falls back."
                },
                {
                    "name": "numeric",
                    "description": "interprets the list of counter symbols as digits to a \"place-value\" numbering system, similar to the default 'decimal' counter style."
                },
                {
                    "name": "symbolic",
                    "description": "Cycles repeatedly through its provided symbols, doubling, tripling, etc. the symbols on each successive pass through the list."
                }
            ],
            "syntax": "cyclic | numeric | alphabetic | symbolic | additive | [ fixed <integer>? ] | [ extends <counter-style-name> ]",
            "relevance": 50,
            "description": "@counter-style descriptor. Specifies which algorithm will be used to construct the counter’s representation based on the counter value.",
            "restrictions": [
                "enum",
                "integer"
            ]
        },
        {
            "name": "symbols",
            "browsers": [
                "FF33"
            ],
            "syntax": "<symbol>+",
            "relevance": 50,
            "description": "@counter-style descriptor. Specifies the symbols used by the marker-construction algorithm specified by the system descriptor.",
            "restrictions": [
                "image",
                "string",
                "identifier"
            ]
        },
        {
            "name": "table-layout",
            "values": [
                {
                    "name": "auto",
                    "description": "Use any automatic table layout algorithm."
                },
                {
                    "name": "fixed",
                    "description": "Use the fixed table layout algorithm."
                }
            ],
            "syntax": "auto | fixed",
            "relevance": 61,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/table-layout"
                }
            ],
            "description": "Controls the algorithm used to lay out the table cells, rows, and columns.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "tab-size",
            "browsers": [
                "E79",
                "FF4",
                "S6.1",
                "C21",
                "O15"
            ],
            "syntax": "<integer> | <length>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/tab-size"
                }
            ],
            "description": "Determines the width of the tab character (U+0009), in space characters (U+0020), when rendered.",
            "restrictions": [
                "integer",
                "length"
            ]
        },
        {
            "name": "text-align",
            "values": [
                {
                    "name": "center",
                    "description": "The inline contents are centered within the line box."
                },
                {
                    "name": "end",
                    "description": "The inline contents are aligned to the end edge of the line box."
                },
                {
                    "name": "justify",
                    "description": "The text is justified according to the method specified by the 'text-justify' property."
                },
                {
                    "name": "left",
                    "description": "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."
                },
                {
                    "name": "right",
                    "description": "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."
                },
                {
                    "name": "start",
                    "description": "The inline contents are aligned to the start edge of the line box."
                }
            ],
            "syntax": "start | end | left | right | center | justify | match-parent",
            "relevance": 93,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-align"
                }
            ],
            "description": "Describes how inline contents of a block are horizontally aligned if the contents do not completely fill the line box.",
            "restrictions": [
                "string"
            ]
        },
        {
            "name": "text-align-last",
            "browsers": [
                "E12",
                "FF49",
                "C47",
                "IE5.5",
                "O34"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Content on the affected line is aligned per 'text-align' unless 'text-align' is set to 'justify', in which case it is 'start-aligned'."
                },
                {
                    "name": "center",
                    "description": "The inline contents are centered within the line box."
                },
                {
                    "name": "justify",
                    "description": "The text is justified according to the method specified by the 'text-justify' property."
                },
                {
                    "name": "left",
                    "description": "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."
                },
                {
                    "name": "right",
                    "description": "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."
                }
            ],
            "syntax": "auto | start | end | left | right | center | justify",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-align-last"
                }
            ],
            "description": "Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-anchor",
            "values": [
                {
                    "name": "end",
                    "description": "The rendered characters are aligned such that the end of the resulting rendered text is at the initial current text position."
                },
                {
                    "name": "middle",
                    "description": "The rendered characters are aligned such that the geometric middle of the resulting rendered text is at the initial current text position."
                },
                {
                    "name": "start",
                    "description": "The rendered characters are aligned such that the start of the resulting rendered text is at the initial current text position."
                }
            ],
            "relevance": 50,
            "description": "Used to align (start-, middle- or end-alignment) a string of text relative to a given point.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-decoration",
            "values": [
                {
                    "name": "dashed",
                    "description": "Produces a dashed line style."
                },
                {
                    "name": "dotted",
                    "description": "Produces a dotted line."
                },
                {
                    "name": "double",
                    "description": "Produces a double line."
                },
                {
                    "name": "line-through",
                    "description": "Each line of text has a line through the middle."
                },
                {
                    "name": "none",
                    "description": "Produces no line."
                },
                {
                    "name": "overline",
                    "description": "Each line of text has a line above it."
                },
                {
                    "name": "solid",
                    "description": "Produces a solid line."
                },
                {
                    "name": "underline",
                    "description": "Each line of text is underlined."
                },
                {
                    "name": "wavy",
                    "description": "Produces a wavy line."
                }
            ],
            "syntax": "<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>",
            "relevance": 91,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration"
                }
            ],
            "description": "Decorations applied to font used for an element's text.",
            "restrictions": [
                "enum",
                "color"
            ]
        },
        {
            "name": "text-decoration-color",
            "browsers": [
                "E79",
                "FF36",
                "S12.1",
                "C57",
                "O44"
            ],
            "syntax": "<color>",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-color"
                }
            ],
            "description": "Specifies the color of text decoration (underlines overlines, and line-throughs) set on the element with text-decoration-line.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "text-decoration-line",
            "browsers": [
                "E79",
                "FF36",
                "S12.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "line-through",
                    "description": "Each line of text has a line through the middle."
                },
                {
                    "name": "none",
                    "description": "Neither produces nor inhibits text decoration."
                },
                {
                    "name": "overline",
                    "description": "Each line of text has a line above it."
                },
                {
                    "name": "underline",
                    "description": "Each line of text is underlined."
                }
            ],
            "syntax": "none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-line"
                }
            ],
            "description": "Specifies what line decorations, if any, are added to the element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-decoration-style",
            "browsers": [
                "E79",
                "FF36",
                "S12.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "dashed",
                    "description": "Produces a dashed line style."
                },
                {
                    "name": "dotted",
                    "description": "Produces a dotted line."
                },
                {
                    "name": "double",
                    "description": "Produces a double line."
                },
                {
                    "name": "none",
                    "description": "Produces no line."
                },
                {
                    "name": "solid",
                    "description": "Produces a solid line."
                },
                {
                    "name": "wavy",
                    "description": "Produces a wavy line."
                }
            ],
            "syntax": "solid | double | dotted | dashed | wavy",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-style"
                }
            ],
            "description": "Specifies the line style for underline, line-through and overline text decoration.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-indent",
            "values": [],
            "syntax": "<length-percentage> && hanging? && each-line?",
            "relevance": 68,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-indent"
                }
            ],
            "description": "Specifies the indentation applied to lines of inline content in a block. The indentation only affects the first line of inline content in the block unless the 'hanging' keyword is specified, in which case it affects all lines except the first.",
            "restrictions": [
                "percentage",
                "length"
            ]
        },
        {
            "name": "text-justify",
            "browsers": [
                "E12",
                "FF55",
                "C32",
                "IE11",
                "O19"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The UA determines the justification algorithm to follow, based on a balance between performance and adequate presentation quality."
                },
                {
                    "name": "distribute",
                    "description": "Justification primarily changes spacing both at word separators and at grapheme cluster boundaries in all scripts except those in the connected and cursive groups. This value is sometimes used in e.g. Japanese, often with the 'text-align-last' property."
                },
                {
                    "name": "distribute-all-lines"
                },
                {
                    "name": "inter-cluster",
                    "description": "Justification primarily changes spacing at word separators and at grapheme cluster boundaries in clustered scripts. This value is typically used for Southeast Asian scripts such as Thai."
                },
                {
                    "name": "inter-ideograph",
                    "description": "Justification primarily changes spacing at word separators and at inter-graphemic boundaries in scripts that use no word spaces. This value is typically used for CJK languages."
                },
                {
                    "name": "inter-word",
                    "description": "Justification primarily changes spacing at word separators. This value is typically used for languages that separate words using spaces, like English or (sometimes) Korean."
                },
                {
                    "name": "kashida",
                    "description": "Justification primarily stretches Arabic and related scripts through the use of kashida or other calligraphic elongation."
                },
                {
                    "name": "newspaper"
                }
            ],
            "syntax": "auto | inter-character | inter-word | none",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-justify"
                }
            ],
            "description": "Selects the justification algorithm used when 'text-align' is set to 'justify'. The property applies to block containers, but the UA may (but is not required to) also support it on inline elements.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-orientation",
            "browsers": [
                "E79",
                "FF41",
                "S5.1",
                "C48",
                "O15"
            ],
            "values": [
                {
                    "name": "sideways",
                    "browsers": [
                        "E79",
                        "FF41",
                        "S5.1",
                        "C48",
                        "O15"
                    ],
                    "description": "This value is equivalent to 'sideways-right' in 'vertical-rl' writing mode and equivalent to 'sideways-left' in 'vertical-lr' writing mode."
                },
                {
                    "name": "sideways-right",
                    "browsers": [
                        "E79",
                        "FF41",
                        "S5.1",
                        "C48",
                        "O15"
                    ],
                    "description": "In vertical writing modes, this causes text to be set as if in a horizontal layout, but rotated 90° clockwise."
                },
                {
                    "name": "upright",
                    "description": "In vertical writing modes, characters from horizontal-only scripts are rendered upright, i.e. in their standard horizontal orientation."
                }
            ],
            "syntax": "mixed | upright | sideways",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-orientation"
                }
            ],
            "description": "Specifies the orientation of text within a line.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-overflow",
            "values": [
                {
                    "name": "clip",
                    "description": "Clip inline content that overflows. Characters may be only partially rendered."
                },
                {
                    "name": "ellipsis",
                    "description": "Render an ellipsis character (U+2026) to represent clipped inline content."
                }
            ],
            "syntax": "[ clip | ellipsis | <string> ]{1,2}",
            "relevance": 81,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-overflow"
                }
            ],
            "description": "Text can overflow for example when it is prevented from wrapping.",
            "restrictions": [
                "enum",
                "string"
            ]
        },
        {
            "name": "text-rendering",
            "browsers": [
                "E79",
                "FF1",
                "S5",
                "C4",
                "O15"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "geometricPrecision",
                    "description": "Indicates that the user agent shall emphasize geometric precision over legibility and rendering speed."
                },
                {
                    "name": "optimizeLegibility",
                    "description": "Indicates that the user agent shall emphasize legibility over rendering speed and geometric precision."
                },
                {
                    "name": "optimizeSpeed",
                    "description": "Indicates that the user agent shall emphasize rendering speed over legibility and geometric precision."
                }
            ],
            "syntax": "auto | optimizeSpeed | optimizeLegibility | geometricPrecision",
            "relevance": 68,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-rendering"
                }
            ],
            "description": "The creator of SVG content might want to provide a hint to the implementation about what tradeoffs to make as it renders text. The ‘text-rendering’ property provides these hints.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-shadow",
            "values": [
                {
                    "name": "none",
                    "description": "No shadow."
                }
            ],
            "syntax": "none | <shadow-t>#",
            "relevance": 74,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-shadow"
                }
            ],
            "description": "Enables shadow effects to be applied to the text of the element.",
            "restrictions": [
                "length",
                "color"
            ]
        },
        {
            "name": "text-transform",
            "values": [
                {
                    "name": "capitalize",
                    "description": "Puts the first typographic letter unit of each word in titlecase."
                },
                {
                    "name": "lowercase",
                    "description": "Puts all letters in lowercase."
                },
                {
                    "name": "none",
                    "description": "No effects."
                },
                {
                    "name": "uppercase",
                    "description": "Puts all letters in uppercase."
                }
            ],
            "syntax": "none | capitalize | uppercase | lowercase | full-width | full-size-kana",
            "relevance": 84,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-transform"
                }
            ],
            "description": "Controls capitalization effects of an element’s text.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-underline-position",
            "values": [
                {
                    "name": "above"
                },
                {
                    "name": "auto",
                    "description": "The user agent may use any algorithm to determine the underline’s position. In horizontal line layout, the underline should be aligned as for alphabetic. In vertical line layout, if the language is set to Japanese or Korean, the underline should be aligned as for over."
                },
                {
                    "name": "below",
                    "description": "The underline is aligned with the under edge of the element’s content box."
                }
            ],
            "syntax": "auto | from-font | [ under || [ left | right ] ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-underline-position"
                }
            ],
            "description": "Sets the position of an underline specified on the same element: it does not affect underlines specified by ancestor elements. This property is typically used in vertical writing contexts such as in Japanese documents where it often desired to have the underline appear 'over' (to the right of) the affected run of text",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "top",
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 95,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/top"
                }
            ],
            "description": "Specifies how far an absolutely positioned box's top margin edge is offset below the top edge of the box's 'containing block'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "touch-action",
            "values": [
                {
                    "name": "auto",
                    "description": "The user agent may determine any permitted touch behaviors for touches that begin on the element."
                },
                {
                    "name": "cross-slide-x"
                },
                {
                    "name": "cross-slide-y"
                },
                {
                    "name": "double-tap-zoom"
                },
                {
                    "name": "manipulation",
                    "description": "The user agent may consider touches that begin on the element only for the purposes of scrolling and continuous zooming."
                },
                {
                    "name": "none",
                    "description": "Touches that begin on the element must not trigger default touch behaviors."
                },
                {
                    "name": "pan-x",
                    "description": "The user agent may consider touches that begin on the element only for the purposes of horizontally scrolling the element’s nearest ancestor with horizontally scrollable content."
                },
                {
                    "name": "pan-y",
                    "description": "The user agent may consider touches that begin on the element only for the purposes of vertically scrolling the element’s nearest ancestor with vertically scrollable content."
                },
                {
                    "name": "pinch-zoom"
                }
            ],
            "syntax": "auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation",
            "relevance": 65,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/touch-action"
                }
            ],
            "description": "Determines whether touch input may trigger default behavior supplied by user agent.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "transform",
            "values": [
                {
                    "name": "matrix()",
                    "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
                },
                {
                    "name": "matrix3d()",
                    "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
                },
                {
                    "name": "none"
                },
                {
                    "name": "perspective()",
                    "description": "Specifies a perspective projection matrix."
                },
                {
                    "name": "rotate()",
                    "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
                },
                {
                    "name": "rotate3d()",
                    "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
                },
                {
                    "name": "rotateX('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the X axis."
                },
                {
                    "name": "rotateY('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Y axis."
                },
                {
                    "name": "rotateZ('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Z axis."
                },
                {
                    "name": "scale()",
                    "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
                },
                {
                    "name": "scale3d()",
                    "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
                },
                {
                    "name": "scaleX()",
                    "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
                },
                {
                    "name": "scaleY()",
                    "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
                },
                {
                    "name": "scaleZ()",
                    "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
                },
                {
                    "name": "skew()",
                    "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
                },
                {
                    "name": "skewX()",
                    "description": "Specifies a skew transformation along the X axis by the given angle."
                },
                {
                    "name": "skewY()",
                    "description": "Specifies a skew transformation along the Y axis by the given angle."
                },
                {
                    "name": "translate()",
                    "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
                },
                {
                    "name": "translate3d()",
                    "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
                },
                {
                    "name": "translateX()",
                    "description": "Specifies a translation by the given amount in the X direction."
                },
                {
                    "name": "translateY()",
                    "description": "Specifies a translation by the given amount in the Y direction."
                },
                {
                    "name": "translateZ()",
                    "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
                }
            ],
            "syntax": "none | <transform-list>",
            "relevance": 88,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transform"
                }
            ],
            "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "transform-origin",
            "syntax": "[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?",
            "relevance": 74,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transform-origin"
                }
            ],
            "description": "Establishes the origin of transformation for an element.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "transform-style",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C36",
                "O23"
            ],
            "values": [
                {
                    "name": "flat",
                    "description": "All children of this element are rendered flattened into the 2D plane of the element."
                },
                {
                    "name": "preserve-3d",
                    "browsers": [
                        "E12",
                        "FF16",
                        "S9",
                        "C36",
                        "O23"
                    ],
                    "description": "Flattening is not performed, so children maintain their position in 3D space."
                }
            ],
            "syntax": "flat | preserve-3d",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transform-style"
                }
            ],
            "description": "Defines how nested elements are rendered in 3D space.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "transition",
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "syntax": "<single-transition>#",
            "relevance": 87,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transition"
                }
            ],
            "description": "Shorthand property combines four of the transition properties into a single property.",
            "restrictions": [
                "time",
                "property",
                "timing-function",
                "enum"
            ]
        },
        {
            "name": "transition-delay",
            "syntax": "<time>#",
            "relevance": 62,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transition-delay"
                }
            ],
            "description": "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "transition-duration",
            "syntax": "<time>#",
            "relevance": 62,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transition-duration"
                }
            ],
            "description": "Specifies how long the transition from the old value to the new value should take.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "transition-property",
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "syntax": "none | <single-transition-property>#",
            "relevance": 64,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transition-property"
                }
            ],
            "description": "Specifies the name of the CSS property to which the transition is applied.",
            "restrictions": [
                "property"
            ]
        },
        {
            "name": "transition-timing-function",
            "syntax": "<timing-function>#",
            "relevance": 60,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transition-timing-function"
                }
            ],
            "description": "Describes how the intermediate values used during a transition will be calculated.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "unicode-bidi",
            "values": [
                {
                    "name": "bidi-override",
                    "description": "Inside the element, reordering is strictly in sequence according to the 'direction' property; the implicit part of the bidirectional algorithm is ignored."
                },
                {
                    "name": "embed",
                    "description": "If the element is inline-level, this value opens an additional level of embedding with respect to the bidirectional algorithm. The direction of this embedding level is given by the 'direction' property."
                },
                {
                    "name": "isolate",
                    "description": "The contents of the element are considered to be inside a separate, independent paragraph."
                },
                {
                    "name": "isolate-override",
                    "description": "This combines the isolation behavior of 'isolate' with the directional override behavior of 'bidi-override'"
                },
                {
                    "name": "normal",
                    "description": "The element does not open an additional level of embedding with respect to the bidirectional algorithm. For inline-level elements, implicit reordering works across element boundaries."
                },
                {
                    "name": "plaintext",
                    "description": "For the purposes of the Unicode bidirectional algorithm, the base directionality of each bidi paragraph for which the element forms the containing block is determined not by the element's computed 'direction'."
                }
            ],
            "syntax": "normal | embed | isolate | bidi-override | isolate-override | plaintext",
            "relevance": 57,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/unicode-bidi"
                }
            ],
            "description": "The level of embedding with respect to the bidirectional algorithm.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "unicode-range",
            "values": [
                {
                    "name": "U+26",
                    "description": "Ampersand."
                },
                {
                    "name": "U+20-24F, U+2B0-2FF, U+370-4FF, U+1E00-1EFF, U+2000-20CF, U+2100-23FF, U+2500-26FF, U+E000-F8FF, U+FB00–FB4F",
                    "description": "WGL4 character set (Pan-European)."
                },
                {
                    "name": "U+20-17F, U+2B0-2FF, U+2000-206F, U+20A0-20CF, U+2100-21FF, U+2600-26FF",
                    "description": "The Multilingual European Subset No. 1. Latin. Covers ~44 languages."
                },
                {
                    "name": "U+20-2FF, U+370-4FF, U+1E00-20CF, U+2100-23FF, U+2500-26FF, U+FB00-FB4F, U+FFF0-FFFD",
                    "description": "The Multilingual European Subset No. 2. Latin, Greek, and Cyrillic. Covers ~128 language."
                },
                {
                    "name": "U+20-4FF, U+530-58F, U+10D0-10FF, U+1E00-23FF, U+2440-245F, U+2500-26FF, U+FB00-FB4F, U+FE20-FE2F, U+FFF0-FFFD",
                    "description": "The Multilingual European Subset No. 3. Covers all characters belonging to European scripts."
                },
                {
                    "name": "U+00-7F",
                    "description": "Basic Latin (ASCII)."
                },
                {
                    "name": "U+80-FF",
                    "description": "Latin-1 Supplement. Accented characters for Western European languages, common punctuation characters, multiplication and division signs."
                },
                {
                    "name": "U+100-17F",
                    "description": "Latin Extended-A. Accented characters for for Czech, Dutch, Polish, and Turkish."
                },
                {
                    "name": "U+180-24F",
                    "description": "Latin Extended-B. Croatian, Slovenian, Romanian, Non-European and historic latin, Khoisan, Pinyin, Livonian, Sinology."
                },
                {
                    "name": "U+1E00-1EFF",
                    "description": "Latin Extended Additional. Vietnamese, German captial sharp s, Medievalist, Latin general use."
                },
                {
                    "name": "U+250-2AF",
                    "description": "International Phonetic Alphabet Extensions."
                },
                {
                    "name": "U+370-3FF",
                    "description": "Greek and Coptic."
                },
                {
                    "name": "U+1F00-1FFF",
                    "description": "Greek Extended. Accented characters for polytonic Greek."
                },
                {
                    "name": "U+400-4FF",
                    "description": "Cyrillic."
                },
                {
                    "name": "U+500-52F",
                    "description": "Cyrillic Supplement. Extra letters for Komi, Khanty, Chukchi, Mordvin, Kurdish, Aleut, Chuvash, Abkhaz, Azerbaijani, and Orok."
                },
                {
                    "name": "U+00-52F, U+1E00-1FFF, U+2200–22FF",
                    "description": "Latin, Greek, Cyrillic, some punctuation and symbols."
                },
                {
                    "name": "U+530–58F",
                    "description": "Armenian."
                },
                {
                    "name": "U+590–5FF",
                    "description": "Hebrew."
                },
                {
                    "name": "U+600–6FF",
                    "description": "Arabic."
                },
                {
                    "name": "U+750–77F",
                    "description": "Arabic Supplement. Additional letters for African languages, Khowar, Torwali, Burushaski, and early Persian."
                },
                {
                    "name": "U+8A0–8FF",
                    "description": "Arabic Extended-A. Additional letters for African languages, European and Central Asian languages, Rohingya, Tamazight, Arwi, and Koranic annotation signs."
                },
                {
                    "name": "U+700–74F",
                    "description": "Syriac."
                },
                {
                    "name": "U+900–97F",
                    "description": "Devanagari."
                },
                {
                    "name": "U+980–9FF",
                    "description": "Bengali."
                },
                {
                    "name": "U+A00–A7F",
                    "description": "Gurmukhi."
                },
                {
                    "name": "U+A80–AFF",
                    "description": "Gujarati."
                },
                {
                    "name": "U+B00–B7F",
                    "description": "Oriya."
                },
                {
                    "name": "U+B80–BFF",
                    "description": "Tamil."
                },
                {
                    "name": "U+C00–C7F",
                    "description": "Telugu."
                },
                {
                    "name": "U+C80–CFF",
                    "description": "Kannada."
                },
                {
                    "name": "U+D00–D7F",
                    "description": "Malayalam."
                },
                {
                    "name": "U+D80–DFF",
                    "description": "Sinhala."
                },
                {
                    "name": "U+118A0–118FF",
                    "description": "Warang Citi."
                },
                {
                    "name": "U+E00–E7F",
                    "description": "Thai."
                },
                {
                    "name": "U+1A20–1AAF",
                    "description": "Tai Tham."
                },
                {
                    "name": "U+AA80–AADF",
                    "description": "Tai Viet."
                },
                {
                    "name": "U+E80–EFF",
                    "description": "Lao."
                },
                {
                    "name": "U+F00–FFF",
                    "description": "Tibetan."
                },
                {
                    "name": "U+1000–109F",
                    "description": "Myanmar (Burmese)."
                },
                {
                    "name": "U+10A0–10FF",
                    "description": "Georgian."
                },
                {
                    "name": "U+1200–137F",
                    "description": "Ethiopic."
                },
                {
                    "name": "U+1380–139F",
                    "description": "Ethiopic Supplement. Extra Syllables for Sebatbeit, and Tonal marks"
                },
                {
                    "name": "U+2D80–2DDF",
                    "description": "Ethiopic Extended. Extra Syllables for Me'en, Blin, and Sebatbeit."
                },
                {
                    "name": "U+AB00–AB2F",
                    "description": "Ethiopic Extended-A. Extra characters for Gamo-Gofa-Dawro, Basketo, and Gumuz."
                },
                {
                    "name": "U+1780–17FF",
                    "description": "Khmer."
                },
                {
                    "name": "U+1800–18AF",
                    "description": "Mongolian."
                },
                {
                    "name": "U+1B80–1BBF",
                    "description": "Sundanese."
                },
                {
                    "name": "U+1CC0–1CCF",
                    "description": "Sundanese Supplement. Punctuation."
                },
                {
                    "name": "U+4E00–9FD5",
                    "description": "CJK (Chinese, Japanese, Korean) Unified Ideographs. Most common ideographs for modern Chinese and Japanese."
                },
                {
                    "name": "U+3400–4DB5",
                    "description": "CJK Unified Ideographs Extension A. Rare ideographs."
                },
                {
                    "name": "U+2F00–2FDF",
                    "description": "Kangxi Radicals."
                },
                {
                    "name": "U+2E80–2EFF",
                    "description": "CJK Radicals Supplement. Alternative forms of Kangxi Radicals."
                },
                {
                    "name": "U+1100–11FF",
                    "description": "Hangul Jamo."
                },
                {
                    "name": "U+AC00–D7AF",
                    "description": "Hangul Syllables."
                },
                {
                    "name": "U+3040–309F",
                    "description": "Hiragana."
                },
                {
                    "name": "U+30A0–30FF",
                    "description": "Katakana."
                },
                {
                    "name": "U+A5, U+4E00-9FFF, U+30??, U+FF00-FF9F",
                    "description": "Japanese Kanji, Hiragana and Katakana characters plus Yen/Yuan symbol."
                },
                {
                    "name": "U+A4D0–A4FF",
                    "description": "Lisu."
                },
                {
                    "name": "U+A000–A48F",
                    "description": "Yi Syllables."
                },
                {
                    "name": "U+A490–A4CF",
                    "description": "Yi Radicals."
                },
                {
                    "name": "U+2000-206F",
                    "description": "General Punctuation."
                },
                {
                    "name": "U+3000–303F",
                    "description": "CJK Symbols and Punctuation."
                },
                {
                    "name": "U+2070–209F",
                    "description": "Superscripts and Subscripts."
                },
                {
                    "name": "U+20A0–20CF",
                    "description": "Currency Symbols."
                },
                {
                    "name": "U+2100–214F",
                    "description": "Letterlike Symbols."
                },
                {
                    "name": "U+2150–218F",
                    "description": "Number Forms."
                },
                {
                    "name": "U+2190–21FF",
                    "description": "Arrows."
                },
                {
                    "name": "U+2200–22FF",
                    "description": "Mathematical Operators."
                },
                {
                    "name": "U+2300–23FF",
                    "description": "Miscellaneous Technical."
                },
                {
                    "name": "U+E000-F8FF",
                    "description": "Private Use Area."
                },
                {
                    "name": "U+FB00–FB4F",
                    "description": "Alphabetic Presentation Forms. Ligatures for latin, Armenian, and Hebrew."
                },
                {
                    "name": "U+FB50–FDFF",
                    "description": "Arabic Presentation Forms-A. Contextual forms / ligatures for Persian, Urdu, Sindhi, Central Asian languages, etc, Arabic pedagogical symbols, word ligatures."
                },
                {
                    "name": "U+1F600–1F64F",
                    "description": "Emoji: Emoticons."
                },
                {
                    "name": "U+2600–26FF",
                    "description": "Emoji: Miscellaneous Symbols."
                },
                {
                    "name": "U+1F300–1F5FF",
                    "description": "Emoji: Miscellaneous Symbols and Pictographs."
                },
                {
                    "name": "U+1F900–1F9FF",
                    "description": "Emoji: Supplemental Symbols and Pictographs."
                },
                {
                    "name": "U+1F680–1F6FF",
                    "description": "Emoji: Transport and Map Symbols."
                }
            ],
            "syntax": "<unicode-range>#",
            "relevance": 58,
            "description": "@font-face descriptor. Defines the set of Unicode codepoints that may be supported by the font face for which it is declared.",
            "restrictions": [
                "unicode-range"
            ]
        },
        {
            "name": "user-select",
            "values": [
                {
                    "name": "all",
                    "description": "The content of the element must be selected atomically"
                },
                {
                    "name": "auto"
                },
                {
                    "name": "contain",
                    "description": "UAs must not allow a selection which is started in this element to be extended outside of this element."
                },
                {
                    "name": "none",
                    "description": "The UA must not allow selections to be started in this element."
                },
                {
                    "name": "text",
                    "description": "The element imposes no constraint on the selection."
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | text | none | contain | all",
            "relevance": 24,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/user-select"
                }
            ],
            "description": "Controls the appearance of selection.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "vertical-align",
            "values": [
                {
                    "name": "auto",
                    "description": "Align the dominant baseline of the parent box with the equivalent, or heuristically reconstructed, baseline of the element inline box."
                },
                {
                    "name": "baseline",
                    "description": "Align the 'alphabetic' baseline of the element with the 'alphabetic' baseline of the parent element."
                },
                {
                    "name": "bottom",
                    "description": "Align the after edge of the extended inline box with the after-edge of the line box."
                },
                {
                    "name": "middle",
                    "description": "Align the 'middle' baseline of the inline element with the middle baseline of the parent."
                },
                {
                    "name": "sub",
                    "description": "Lower the baseline of the box to the proper position for subscripts of the parent's box. (This value has no effect on the font size of the element's text.)"
                },
                {
                    "name": "super",
                    "description": "Raise the baseline of the box to the proper position for superscripts of the parent's box. (This value has no effect on the font size of the element's text.)"
                },
                {
                    "name": "text-bottom",
                    "description": "Align the bottom of the box with the after-edge of the parent element's font."
                },
                {
                    "name": "text-top",
                    "description": "Align the top of the box with the before-edge of the parent element's font."
                },
                {
                    "name": "top",
                    "description": "Align the before edge of the extended inline box with the before-edge of the line box."
                },
                {
                    "name": "-webkit-baseline-middle"
                }
            ],
            "syntax": "baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>",
            "relevance": 91,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/vertical-align"
                }
            ],
            "description": "Affects the vertical positioning of the inline boxes generated by an inline-level element inside a line box.",
            "restrictions": [
                "percentage",
                "length"
            ]
        },
        {
            "name": "visibility",
            "values": [
                {
                    "name": "collapse",
                    "description": "Table-specific. If used on elements other than rows, row groups, columns, or column groups, 'collapse' has the same meaning as 'hidden'."
                },
                {
                    "name": "hidden",
                    "description": "The generated box is invisible (fully transparent, nothing is drawn), but still affects layout."
                },
                {
                    "name": "visible",
                    "description": "The generated box is visible."
                }
            ],
            "syntax": "visible | hidden | collapse",
            "relevance": 88,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/visibility"
                }
            ],
            "description": "Specifies whether the boxes generated by an element are rendered. Invisible boxes still affect layout (set the ‘display’ property to ‘none’ to suppress box generation altogether).",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-animation",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "backwards",
                    "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
                },
                {
                    "name": "both",
                    "description": "Both forwards and backwards fill modes are applied."
                },
                {
                    "name": "forwards",
                    "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
                },
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                },
                {
                    "name": "none",
                    "description": "No animation is performed"
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property combines six of the animation properties into a single property.",
            "restrictions": [
                "time",
                "enum",
                "timing-function",
                "identifier",
                "number"
            ]
        },
        {
            "name": "-webkit-animation-delay",
            "browsers": [
                "C",
                "S5"
            ],
            "relevance": 50,
            "description": "Defines when the animation will start.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-webkit-animation-direction",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "relevance": 50,
            "description": "Defines whether or not the animation should play in reverse on alternate cycles.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-animation-duration",
            "browsers": [
                "C",
                "S5"
            ],
            "relevance": 50,
            "description": "Defines the length of time that an animation takes to complete one cycle.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-webkit-animation-fill-mode",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "backwards",
                    "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
                },
                {
                    "name": "both",
                    "description": "Both forwards and backwards fill modes are applied."
                },
                {
                    "name": "forwards",
                    "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
                },
                {
                    "name": "none",
                    "description": "There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes."
                }
            ],
            "relevance": 50,
            "description": "Defines what values are applied by the animation outside the time it is executing.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-animation-iteration-count",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                }
            ],
            "relevance": 50,
            "description": "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
            "restrictions": [
                "number",
                "enum"
            ]
        },
        {
            "name": "-webkit-animation-name",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No animation is performed"
                }
            ],
            "relevance": 50,
            "description": "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
            "restrictions": [
                "identifier",
                "enum"
            ]
        },
        {
            "name": "-webkit-animation-play-state",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "paused",
                    "description": "A running animation will be paused."
                },
                {
                    "name": "running",
                    "description": "Resume playback of a paused animation."
                }
            ],
            "relevance": 50,
            "description": "Defines whether the animation is running or paused.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-animation-timing-function",
            "browsers": [
                "C",
                "S5"
            ],
            "relevance": 50,
            "description": "Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "-webkit-appearance",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "button"
                },
                {
                    "name": "button-bevel"
                },
                {
                    "name": "caps-lock-indicator"
                },
                {
                    "name": "caret"
                },
                {
                    "name": "checkbox"
                },
                {
                    "name": "default-button"
                },
                {
                    "name": "listbox"
                },
                {
                    "name": "listitem"
                },
                {
                    "name": "media-fullscreen-button"
                },
                {
                    "name": "media-mute-button"
                },
                {
                    "name": "media-play-button"
                },
                {
                    "name": "media-seek-back-button"
                },
                {
                    "name": "media-seek-forward-button"
                },
                {
                    "name": "media-slider"
                },
                {
                    "name": "media-sliderthumb"
                },
                {
                    "name": "menulist"
                },
                {
                    "name": "menulist-button"
                },
                {
                    "name": "menulist-text"
                },
                {
                    "name": "menulist-textfield"
                },
                {
                    "name": "none"
                },
                {
                    "name": "push-button"
                },
                {
                    "name": "radio"
                },
                {
                    "name": "scrollbarbutton-down"
                },
                {
                    "name": "scrollbarbutton-left"
                },
                {
                    "name": "scrollbarbutton-right"
                },
                {
                    "name": "scrollbarbutton-up"
                },
                {
                    "name": "scrollbargripper-horizontal"
                },
                {
                    "name": "scrollbargripper-vertical"
                },
                {
                    "name": "scrollbarthumb-horizontal"
                },
                {
                    "name": "scrollbarthumb-vertical"
                },
                {
                    "name": "scrollbartrack-horizontal"
                },
                {
                    "name": "scrollbartrack-vertical"
                },
                {
                    "name": "searchfield"
                },
                {
                    "name": "searchfield-cancel-button"
                },
                {
                    "name": "searchfield-decoration"
                },
                {
                    "name": "searchfield-results-button"
                },
                {
                    "name": "searchfield-results-decoration"
                },
                {
                    "name": "slider-horizontal"
                },
                {
                    "name": "sliderthumb-horizontal"
                },
                {
                    "name": "sliderthumb-vertical"
                },
                {
                    "name": "slider-vertical"
                },
                {
                    "name": "square-button"
                },
                {
                    "name": "textarea"
                },
                {
                    "name": "textfield"
                }
            ],
            "status": "nonstandard",
            "syntax": "none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield",
            "relevance": 0,
            "description": "Changes the appearance of buttons and other controls to resemble native controls.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-backdrop-filter",
            "browsers": [
                "S9"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No filter effects are applied."
                },
                {
                    "name": "blur()",
                    "description": "Applies a Gaussian blur to the input image."
                },
                {
                    "name": "brightness()",
                    "description": "Applies a linear multiplier to input image, making it appear more or less bright."
                },
                {
                    "name": "contrast()",
                    "description": "Adjusts the contrast of the input."
                },
                {
                    "name": "drop-shadow()",
                    "description": "Applies a drop shadow effect to the input image."
                },
                {
                    "name": "grayscale()",
                    "description": "Converts the input image to grayscale."
                },
                {
                    "name": "hue-rotate()",
                    "description": "Applies a hue rotation on the input image. "
                },
                {
                    "name": "invert()",
                    "description": "Inverts the samples in the input image."
                },
                {
                    "name": "opacity()",
                    "description": "Applies transparency to the samples in the input image."
                },
                {
                    "name": "saturate()",
                    "description": "Saturates the input image."
                },
                {
                    "name": "sepia()",
                    "description": "Converts the input image to sepia."
                },
                {
                    "name": "url()",
                    "description": "A filter reference to a <filter> element."
                }
            ],
            "relevance": 50,
            "description": "Applies a filter effect where the first filter in the list takes the element's background image as the input image.",
            "restrictions": [
                "enum",
                "url"
            ]
        },
        {
            "name": "-webkit-backface-visibility",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "hidden"
                },
                {
                    "name": "visible"
                }
            ],
            "relevance": 50,
            "description": "Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-background-clip",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "Determines the background painting area.",
            "restrictions": [
                "box"
            ]
        },
        {
            "name": "-webkit-background-composite",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "border"
                },
                {
                    "name": "padding"
                }
            ],
            "relevance": 50,
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-background-origin",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",
            "restrictions": [
                "box"
            ]
        },
        {
            "name": "-webkit-border-image",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
                },
                {
                    "name": "fill",
                    "description": "Causes the middle part of the border-image to be preserved."
                },
                {
                    "name": "none"
                },
                {
                    "name": "repeat",
                    "description": "The image is tiled (repeated) to fill the area."
                },
                {
                    "name": "round",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
                },
                {
                    "name": "space",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
                },
                {
                    "name": "stretch",
                    "description": "The image is stretched to fill the area."
                },
                {
                    "name": "url()"
                }
            ],
            "relevance": 50,
            "description": "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
            "restrictions": [
                "length",
                "percentage",
                "number",
                "url",
                "enum"
            ]
        },
        {
            "name": "-webkit-box-align",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "baseline",
                    "description": "If this box orientation is inline-axis or horizontal, all children are placed with their baselines aligned, and extra space placed before or after as necessary. For block flows, the baseline of the first non-empty line box located within the element is used. For tables, the baseline of the first cell is used."
                },
                {
                    "name": "center",
                    "description": "Any extra space is divided evenly, with half placed above the child and the other half placed after the child."
                },
                {
                    "name": "end",
                    "description": "For normal direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element. For reverse direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element."
                },
                {
                    "name": "start",
                    "description": "For normal direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element. For reverse direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element."
                },
                {
                    "name": "stretch",
                    "description": "The height of each child is adjusted to that of the containing block."
                }
            ],
            "relevance": 50,
            "description": "Specifies the alignment of nested elements within an outer flexible box element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-box-direction",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "A box with a computed value of horizontal for box-orient displays its children from left to right. A box with a computed value of vertical displays its children from top to bottom."
                },
                {
                    "name": "reverse",
                    "description": "A box with a computed value of horizontal for box-orient displays its children from right to left. A box with a computed value of vertical displays its children from bottom to top."
                }
            ],
            "relevance": 50,
            "description": "In webkit applications, -webkit-box-direction specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-box-flex",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "Specifies an element's flexibility.",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "-webkit-box-flex-group",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "Flexible elements can be assigned to flex groups using the 'box-flex-group' property.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-webkit-box-ordinal-group",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "Indicates the ordinal group the element belongs to. Elements with a lower ordinal group are displayed before those with a higher ordinal group.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-webkit-box-orient",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "block-axis",
                    "description": "Elements are oriented along the box's axis."
                },
                {
                    "name": "horizontal",
                    "description": "The box displays its children from left to right in a horizontal line."
                },
                {
                    "name": "inline-axis",
                    "description": "Elements are oriented vertically."
                },
                {
                    "name": "vertical",
                    "description": "The box displays its children from stacked from top to bottom vertically."
                }
            ],
            "relevance": 50,
            "description": "In webkit applications, -webkit-box-orient specifies whether a box lays out its contents horizontally or vertically.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-box-pack",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "The extra space is divided evenly, with half placed before the first child and the other half placed after the last child."
                },
                {
                    "name": "end",
                    "description": "For normal direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child. For reverse direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child."
                },
                {
                    "name": "justify",
                    "description": "The space is divided evenly in-between each child, with none of the extra space placed before the first child or after the last child. If there is only one child, treat the pack value as if it were start."
                },
                {
                    "name": "start",
                    "description": "For normal direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child. For reverse direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child."
                }
            ],
            "relevance": 50,
            "description": "Specifies alignment of child elements within the current element in the direction of orientation.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-box-reflect",
            "browsers": [
                "E79",
                "S4",
                "C4",
                "O15"
            ],
            "values": [
                {
                    "name": "above",
                    "description": "The reflection appears above the border box."
                },
                {
                    "name": "below",
                    "description": "The reflection appears below the border box."
                },
                {
                    "name": "left",
                    "description": "The reflection appears to the left of the border box."
                },
                {
                    "name": "right",
                    "description": "The reflection appears to the right of the border box."
                }
            ],
            "status": "nonstandard",
            "syntax": "[ above | below | right | left ]? <length>? <image>?",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-box-reflect"
                }
            ],
            "description": "Defines a reflection of a border box."
        },
        {
            "name": "-webkit-box-sizing",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "border-box",
                    "description": "The specified width and height (and respective min/max properties) on this element determine the border box of the element."
                },
                {
                    "name": "content-box",
                    "description": "Behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element."
                }
            ],
            "relevance": 50,
            "description": "Box Model addition in CSS3.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-break-after",
            "browsers": [
                "S7"
            ],
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break before/after the generated box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break before/after the generated box."
                },
                {
                    "name": "avoid-region"
                },
                {
                    "name": "column",
                    "description": "Always force a column break before/after the generated box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "page",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "region"
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
                }
            ],
            "relevance": 50,
            "description": "Describes the page/column break behavior before the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-break-before",
            "browsers": [
                "S7"
            ],
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break before/after the generated box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break before/after the generated box."
                },
                {
                    "name": "avoid-region"
                },
                {
                    "name": "column",
                    "description": "Always force a column break before/after the generated box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "page",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "region"
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
                }
            ],
            "relevance": 50,
            "description": "Describes the page/column break behavior before the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-break-inside",
            "browsers": [
                "S7"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break inside the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page/column break inside the generated box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break inside the generated box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break inside the generated box."
                },
                {
                    "name": "avoid-region"
                }
            ],
            "relevance": 50,
            "description": "Describes the page/column break behavior inside the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-column-break-after",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break before/after the generated box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break before/after the generated box."
                },
                {
                    "name": "avoid-region"
                },
                {
                    "name": "column",
                    "description": "Always force a column break before/after the generated box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "page",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "region"
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
                }
            ],
            "relevance": 50,
            "description": "Describes the page/column break behavior before the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-column-break-before",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break before/after the generated box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break before/after the generated box."
                },
                {
                    "name": "avoid-region"
                },
                {
                    "name": "column",
                    "description": "Always force a column break before/after the generated box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "page",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "region"
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
                }
            ],
            "relevance": 50,
            "description": "Describes the page/column break behavior before the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-column-break-inside",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break inside the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page/column break inside the generated box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break inside the generated box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break inside the generated box."
                },
                {
                    "name": "avoid-region"
                }
            ],
            "relevance": 50,
            "description": "Describes the page/column break behavior inside the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-column-count",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Determines the number of columns by the 'column-width' property and the element width."
                }
            ],
            "relevance": 50,
            "description": "Describes the optimal number of columns into which the content of the element will be flowed.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-webkit-column-gap",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "User agent specific and typically equivalent to 1em."
                }
            ],
            "relevance": 50,
            "description": "Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-webkit-column-rule",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "This property is a shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "-webkit-column-rule-color",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "Sets the color of the column rule",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-webkit-column-rule-style",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "Sets the style of the rule between columns of an element.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "-webkit-column-rule-width",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "Sets the width of the rule between columns. Negative values are not allowed.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "-webkit-columns",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The width depends on the values of other properties."
                }
            ],
            "relevance": 50,
            "description": "A shorthand property which sets both 'column-width' and 'column-count'.",
            "restrictions": [
                "length",
                "integer"
            ]
        },
        {
            "name": "-webkit-column-span",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "The element spans across all columns. Content in the normal flow that appears before the element is automatically balanced across all columns before the element appear."
                },
                {
                    "name": "none",
                    "description": "The element does not span multiple columns."
                }
            ],
            "relevance": 50,
            "description": "Describes the page/column break behavior after the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-column-width",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The width depends on the values of other properties."
                }
            ],
            "relevance": 50,
            "description": "This property describes the width of columns in multicol elements.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-webkit-filter",
            "browsers": [
                "C18",
                "O15",
                "S6"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No filter effects are applied."
                },
                {
                    "name": "blur()",
                    "description": "Applies a Gaussian blur to the input image."
                },
                {
                    "name": "brightness()",
                    "description": "Applies a linear multiplier to input image, making it appear more or less bright."
                },
                {
                    "name": "contrast()",
                    "description": "Adjusts the contrast of the input."
                },
                {
                    "name": "drop-shadow()",
                    "description": "Applies a drop shadow effect to the input image."
                },
                {
                    "name": "grayscale()",
                    "description": "Converts the input image to grayscale."
                },
                {
                    "name": "hue-rotate()",
                    "description": "Applies a hue rotation on the input image. "
                },
                {
                    "name": "invert()",
                    "description": "Inverts the samples in the input image."
                },
                {
                    "name": "opacity()",
                    "description": "Applies transparency to the samples in the input image."
                },
                {
                    "name": "saturate()",
                    "description": "Saturates the input image."
                },
                {
                    "name": "sepia()",
                    "description": "Converts the input image to sepia."
                },
                {
                    "name": "url()",
                    "description": "A filter reference to a <filter> element."
                }
            ],
            "relevance": 50,
            "description": "Processes an element’s rendering before it is displayed in the document, by applying one or more filter effects.",
            "restrictions": [
                "enum",
                "url"
            ]
        },
        {
            "name": "-webkit-flow-from",
            "browsers": [
                "S6.1"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The block container is not a CSS Region."
                }
            ],
            "relevance": 50,
            "description": "Makes a block container a region and associates it with a named flow.",
            "restrictions": [
                "identifier"
            ]
        },
        {
            "name": "-webkit-flow-into",
            "browsers": [
                "S6.1"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The element is not moved to a named flow and normal CSS processing takes place."
                }
            ],
            "relevance": 50,
            "description": "Places an element or its contents into a named flow.",
            "restrictions": [
                "identifier"
            ]
        },
        {
            "name": "-webkit-font-feature-settings",
            "browsers": [
                "C16"
            ],
            "values": [
                {
                    "name": "\"c2cs\""
                },
                {
                    "name": "\"dlig\""
                },
                {
                    "name": "\"kern\""
                },
                {
                    "name": "\"liga\""
                },
                {
                    "name": "\"lnum\""
                },
                {
                    "name": "\"onum\""
                },
                {
                    "name": "\"smcp\""
                },
                {
                    "name": "\"swsh\""
                },
                {
                    "name": "\"tnum\""
                },
                {
                    "name": "normal",
                    "description": "No change in glyph substitution or positioning occurs."
                },
                {
                    "name": "off"
                },
                {
                    "name": "on"
                }
            ],
            "relevance": 50,
            "description": "This property provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",
            "restrictions": [
                "string",
                "integer"
            ]
        },
        {
            "name": "-webkit-hyphens",
            "browsers": [
                "S5.1"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."
                },
                {
                    "name": "manual",
                    "description": "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities"
                },
                {
                    "name": "none",
                    "description": "Words are not broken at line breaks, even if characters inside the word suggest line break points."
                }
            ],
            "relevance": 50,
            "description": "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-line-break",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "after-white-space"
                },
                {
                    "name": "normal"
                }
            ],
            "relevance": 50,
            "description": "Specifies line-breaking rules for CJK (Chinese, Japanese, and Korean) text."
        },
        {
            "name": "-webkit-margin-bottom-collapse",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "collapse"
                },
                {
                    "name": "discard"
                },
                {
                    "name": "separate"
                }
            ],
            "relevance": 50,
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-margin-collapse",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "collapse"
                },
                {
                    "name": "discard"
                },
                {
                    "name": "separate"
                }
            ],
            "relevance": 50,
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-margin-start",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "relevance": 50,
            "restrictions": [
                "percentage",
                "length"
            ]
        },
        {
            "name": "-webkit-margin-top-collapse",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "collapse"
                },
                {
                    "name": "discard"
                },
                {
                    "name": "separate"
                }
            ],
            "relevance": 50,
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-mask-clip",
            "browsers": [
                "C",
                "O15",
                "S4"
            ],
            "status": "nonstandard",
            "syntax": "[ <box> | border | padding | content | text ]#",
            "relevance": 0,
            "description": "Determines the mask painting area, which determines the area that is affected by the mask.",
            "restrictions": [
                "box"
            ]
        },
        {
            "name": "-webkit-mask-image",
            "browsers": [
                "C",
                "O15",
                "S4"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Counts as a transparent black image layer."
                },
                {
                    "name": "url()",
                    "description": "Reference to a <mask element or to a CSS image."
                }
            ],
            "status": "nonstandard",
            "syntax": "<mask-reference>#",
            "relevance": 0,
            "description": "Sets the mask layer image of an element.",
            "restrictions": [
                "url",
                "image",
                "enum"
            ]
        },
        {
            "name": "-webkit-mask-origin",
            "browsers": [
                "C",
                "O15",
                "S4"
            ],
            "status": "nonstandard",
            "syntax": "[ <box> | border | padding | content ]#",
            "relevance": 0,
            "description": "Specifies the mask positioning area.",
            "restrictions": [
                "box"
            ]
        },
        {
            "name": "-webkit-mask-repeat",
            "browsers": [
                "C",
                "O15",
                "S4"
            ],
            "status": "nonstandard",
            "syntax": "<repeat-style>#",
            "relevance": 0,
            "description": "Specifies how mask layer images are tiled after they have been sized and positioned.",
            "restrictions": [
                "repeat"
            ]
        },
        {
            "name": "-webkit-mask-size",
            "browsers": [
                "C",
                "O15",
                "S4"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Resolved by using the image’s intrinsic ratio and the size of the other dimension, or failing that, using the image’s intrinsic size, or failing that, treating it as 100%."
                },
                {
                    "name": "contain",
                    "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area."
                },
                {
                    "name": "cover",
                    "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area."
                }
            ],
            "status": "nonstandard",
            "syntax": "<bg-size>#",
            "relevance": 0,
            "description": "Specifies the size of the mask layer images.",
            "restrictions": [
                "length",
                "percentage",
                "enum"
            ]
        },
        {
            "name": "-webkit-nbsp-mode",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "normal"
                },
                {
                    "name": "space"
                }
            ],
            "relevance": 50,
            "description": "Defines the behavior of nonbreaking spaces within text."
        },
        {
            "name": "-webkit-overflow-scrolling",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "touch"
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | touch",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-overflow-scrolling"
                }
            ],
            "description": "Specifies whether to use native-style scrolling in an overflow:scroll element."
        },
        {
            "name": "-webkit-padding-start",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "restrictions": [
                "percentage",
                "length"
            ]
        },
        {
            "name": "-webkit-perspective",
            "browsers": [
                "C",
                "S4"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No perspective transform is applied."
                }
            ],
            "relevance": 50,
            "description": "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-webkit-perspective-origin",
            "browsers": [
                "C",
                "S4"
            ],
            "relevance": 50,
            "description": "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
            "restrictions": [
                "position",
                "percentage",
                "length"
            ]
        },
        {
            "name": "-webkit-region-fragment",
            "browsers": [
                "S7"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Content flows as it would in a regular content box."
                },
                {
                    "name": "break",
                    "description": "If the content fits within the CSS Region, then this property has no effect."
                }
            ],
            "relevance": 50,
            "description": "The 'region-fragment' property controls the behavior of the last region associated with a named flow.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-tap-highlight-color",
            "browsers": [
                "E12",
                "C16",
                "O≤15"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-tap-highlight-color"
                }
            ],
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-webkit-text-fill-color",
            "browsers": [
                "E12",
                "FF49",
                "S3",
                "C1",
                "O15"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-fill-color"
                }
            ],
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-webkit-text-size-adjust",
            "browsers": [
                "E",
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Renderers must use the default size adjustment when displaying on a small device."
                },
                {
                    "name": "none",
                    "description": "Renderers must not do size adjustment when displaying on a small device."
                }
            ],
            "relevance": 50,
            "description": "Specifies a size adjustment for displaying text content in mobile browsers.",
            "restrictions": [
                "percentage"
            ]
        },
        {
            "name": "-webkit-text-stroke",
            "browsers": [
                "E15",
                "FF49",
                "S3",
                "C4",
                "O15"
            ],
            "status": "nonstandard",
            "syntax": "<length> || <color>",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke"
                }
            ],
            "restrictions": [
                "length",
                "line-width",
                "color",
                "percentage"
            ]
        },
        {
            "name": "-webkit-text-stroke-color",
            "browsers": [
                "E15",
                "FF49",
                "S3",
                "C1",
                "O15"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-color"
                }
            ],
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-webkit-text-stroke-width",
            "browsers": [
                "E15",
                "FF49",
                "S3",
                "C1",
                "O15"
            ],
            "status": "nonstandard",
            "syntax": "<length>",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-width"
                }
            ],
            "restrictions": [
                "length",
                "line-width",
                "percentage"
            ]
        },
        {
            "name": "-webkit-touch-callout",
            "browsers": [
                "S3"
            ],
            "values": [
                {
                    "name": "none"
                }
            ],
            "status": "nonstandard",
            "syntax": "default | none",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-touch-callout"
                }
            ],
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-transform",
            "browsers": [
                "C",
                "O12",
                "S3.1"
            ],
            "values": [
                {
                    "name": "matrix()",
                    "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
                },
                {
                    "name": "matrix3d()",
                    "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
                },
                {
                    "name": "none"
                },
                {
                    "name": "perspective()",
                    "description": "Specifies a perspective projection matrix."
                },
                {
                    "name": "rotate()",
                    "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
                },
                {
                    "name": "rotate3d()",
                    "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
                },
                {
                    "name": "rotateX('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the X axis."
                },
                {
                    "name": "rotateY('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Y axis."
                },
                {
                    "name": "rotateZ('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Z axis."
                },
                {
                    "name": "scale()",
                    "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
                },
                {
                    "name": "scale3d()",
                    "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
                },
                {
                    "name": "scaleX()",
                    "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
                },
                {
                    "name": "scaleY()",
                    "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
                },
                {
                    "name": "scaleZ()",
                    "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
                },
                {
                    "name": "skew()",
                    "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
                },
                {
                    "name": "skewX()",
                    "description": "Specifies a skew transformation along the X axis by the given angle."
                },
                {
                    "name": "skewY()",
                    "description": "Specifies a skew transformation along the Y axis by the given angle."
                },
                {
                    "name": "translate()",
                    "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
                },
                {
                    "name": "translate3d()",
                    "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
                },
                {
                    "name": "translateX()",
                    "description": "Specifies a translation by the given amount in the X direction."
                },
                {
                    "name": "translateY()",
                    "description": "Specifies a translation by the given amount in the Y direction."
                },
                {
                    "name": "translateZ()",
                    "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
                }
            ],
            "relevance": 50,
            "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-transform-origin",
            "browsers": [
                "C",
                "O15",
                "S3.1"
            ],
            "relevance": 50,
            "description": "Establishes the origin of transformation for an element.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "-webkit-transform-origin-x",
            "browsers": [
                "C",
                "S3.1"
            ],
            "relevance": 50,
            "description": "The x coordinate of the origin for transforms applied to an element with respect to its border box.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "-webkit-transform-origin-y",
            "browsers": [
                "C",
                "S3.1"
            ],
            "relevance": 50,
            "description": "The y coordinate of the origin for transforms applied to an element with respect to its border box.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "-webkit-transform-origin-z",
            "browsers": [
                "C",
                "S4"
            ],
            "relevance": 50,
            "description": "The z coordinate of the origin for transforms applied to an element with respect to its border box.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "-webkit-transform-style",
            "browsers": [
                "C",
                "S4"
            ],
            "values": [
                {
                    "name": "flat",
                    "description": "All children of this element are rendered flattened into the 2D plane of the element."
                }
            ],
            "relevance": 50,
            "description": "Defines how nested elements are rendered in 3D space.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-transition",
            "browsers": [
                "C",
                "O12",
                "S5"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property combines four of the transition properties into a single property.",
            "restrictions": [
                "time",
                "property",
                "timing-function",
                "enum"
            ]
        },
        {
            "name": "-webkit-transition-delay",
            "browsers": [
                "C",
                "O12",
                "S5"
            ],
            "relevance": 50,
            "description": "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-webkit-transition-duration",
            "browsers": [
                "C",
                "O12",
                "S5"
            ],
            "relevance": 50,
            "description": "Specifies how long the transition from the old value to the new value should take.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-webkit-transition-property",
            "browsers": [
                "C",
                "O12",
                "S5"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "relevance": 50,
            "description": "Specifies the name of the CSS property to which the transition is applied.",
            "restrictions": [
                "property"
            ]
        },
        {
            "name": "-webkit-transition-timing-function",
            "browsers": [
                "C",
                "O12",
                "S5"
            ],
            "relevance": 50,
            "description": "Describes how the intermediate values used during a transition will be calculated.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "-webkit-user-drag",
            "browsers": [
                "S3"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "element"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 50,
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-user-modify",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "read-only"
                },
                {
                    "name": "read-write"
                },
                {
                    "name": "read-write-plaintext-only"
                }
            ],
            "status": "nonstandard",
            "syntax": "read-only | read-write | read-write-plaintext-only",
            "relevance": 0,
            "description": "Determines whether a user can edit the content of an element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-user-select",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "none"
                },
                {
                    "name": "text"
                }
            ],
            "relevance": 50,
            "description": "Controls the appearance of selection.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "white-space",
            "values": [
                {
                    "name": "normal",
                    "description": "Sets 'white-space-collapsing' to 'collapse' and 'text-wrap' to 'normal'."
                },
                {
                    "name": "nowrap",
                    "description": "Sets 'white-space-collapsing' to 'collapse' and 'text-wrap' to 'none'."
                },
                {
                    "name": "pre",
                    "description": "Sets 'white-space-collapsing' to 'preserve' and 'text-wrap' to 'none'."
                },
                {
                    "name": "pre-line",
                    "description": "Sets 'white-space-collapsing' to 'preserve-breaks' and 'text-wrap' to 'normal'."
                },
                {
                    "name": "pre-wrap",
                    "description": "Sets 'white-space-collapsing' to 'preserve' and 'text-wrap' to 'normal'."
                }
            ],
            "syntax": "normal | pre | nowrap | pre-wrap | pre-line | break-spaces",
            "relevance": 88,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/white-space"
                }
            ],
            "description": "Shorthand property for the 'white-space-collapsing' and 'text-wrap' properties.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "widows",
            "browsers": [
                "E12",
                "S1.3",
                "C25",
                "IE8",
                "O9.2"
            ],
            "syntax": "<integer>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/widows"
                }
            ],
            "description": "Specifies the minimum number of line boxes of a block container that must be left in a fragment after a break.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "width",
            "values": [
                {
                    "name": "auto",
                    "description": "The width depends on the values of other properties."
                },
                {
                    "name": "fit-content",
                    "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "max-content",
                    "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "min-content",
                    "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
                }
            ],
            "syntax": "<viewport-length>{1,2}",
            "relevance": 96,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/width"
                }
            ],
            "description": "Specifies the width of the content area, padding area or border area (depending on 'box-sizing') of certain boxes.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "will-change",
            "browsers": [
                "E79",
                "FF36",
                "S9.1",
                "C36",
                "O24"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Expresses no particular intent."
                },
                {
                    "name": "contents",
                    "description": "Indicates that the author expects to animate or change something about the element’s contents in the near future."
                },
                {
                    "name": "scroll-position",
                    "description": "Indicates that the author expects to animate or change the scroll position of the element in the near future."
                }
            ],
            "syntax": "auto | <animateable-feature>#",
            "relevance": 62,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/will-change"
                }
            ],
            "description": "Provides a rendering hint to the user agent, stating what kinds of changes the author expects to perform on the element.",
            "restrictions": [
                "enum",
                "identifier"
            ]
        },
        {
            "name": "word-break",
            "values": [
                {
                    "name": "break-all",
                    "description": "Lines may break between any two grapheme clusters for non-CJK scripts."
                },
                {
                    "name": "keep-all",
                    "description": "Block characters can no longer create implied break points."
                },
                {
                    "name": "normal",
                    "description": "Breaks non-CJK scripts according to their own rules."
                }
            ],
            "syntax": "normal | break-all | keep-all | break-word",
            "relevance": 72,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/word-break"
                }
            ],
            "description": "Specifies line break opportunities for non-CJK scripts.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "word-spacing",
            "values": [
                {
                    "name": "normal",
                    "description": "No additional spacing is applied. Computes to zero."
                }
            ],
            "syntax": "normal | <length-percentage>",
            "relevance": 57,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/word-spacing"
                }
            ],
            "description": "Specifies additional spacing between “words”.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "word-wrap",
            "values": [
                {
                    "name": "break-word",
                    "description": "An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line."
                },
                {
                    "name": "normal",
                    "description": "Lines may break only at allowed break points."
                }
            ],
            "syntax": "normal | break-word",
            "relevance": 77,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-wrap"
                }
            ],
            "description": "Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "writing-mode",
            "values": [
                {
                    "name": "horizontal-tb",
                    "description": "Top-to-bottom block flow direction. The writing mode is horizontal."
                },
                {
                    "name": "sideways-lr",
                    "description": "Left-to-right block flow direction. The writing mode is vertical, while the typographic mode is horizontal."
                },
                {
                    "name": "sideways-rl",
                    "description": "Right-to-left block flow direction. The writing mode is vertical, while the typographic mode is horizontal."
                },
                {
                    "name": "vertical-lr",
                    "description": "Left-to-right block flow direction. The writing mode is vertical."
                },
                {
                    "name": "vertical-rl",
                    "description": "Right-to-left block flow direction. The writing mode is vertical."
                }
            ],
            "syntax": "horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/writing-mode"
                }
            ],
            "description": "This is a shorthand property for both 'direction' and 'block-progression'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "z-index",
            "values": [
                {
                    "name": "auto",
                    "description": "The stack level of the generated box in the current stacking context is 0. The box does not establish a new stacking context unless it is the root element."
                }
            ],
            "syntax": "auto | <integer>",
            "relevance": 91,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/z-index"
                }
            ],
            "description": "For a positioned box, the 'z-index' property specifies the stack level of the box in the current stacking context and whether the box establishes a local stacking context.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "zoom",
            "browsers": [
                "E12",
                "S3.1",
                "C1",
                "IE5.5",
                "O15"
            ],
            "values": [
                {
                    "name": "normal"
                }
            ],
            "syntax": "auto | <number> | <percentage>",
            "relevance": 74,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/zoom"
                }
            ],
            "description": "Non-standard. Specifies the magnification scale of the object. See 'transform: scale()' for a standards-based alternative.",
            "restrictions": [
                "enum",
                "integer",
                "number",
                "percentage"
            ]
        },
        {
            "name": "-ms-ime-align",
            "status": "nonstandard",
            "syntax": "auto | after",
            "relevance": 0,
            "description": "Aligns the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active."
        },
        {
            "name": "-moz-binding",
            "status": "nonstandard",
            "syntax": "<url> | none",
            "relevance": 0,
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-binding"
                }
            ],
            "description": "The -moz-binding CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element."
        },
        {
            "name": "-moz-context-properties",
            "status": "nonstandard",
            "syntax": "none | [ fill | fill-opacity | stroke | stroke-opacity ]#",
            "relevance": 0,
            "browsers": [
                "FF55"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-context-properties"
                }
            ],
            "description": "If you reference an SVG image in a webpage (such as with the <img> element or as a background image), the SVG image can coordinate with the embedding element (its context) to have the image adopt property values set on the embedding element. To do this the embedding element needs to list the properties that are to be made available to the image by listing them as values of the -moz-context-properties property, and the image needs to opt in to using those properties by using values such as the context-fill value.\n\nThis feature is available since Firefox 55, but is only currently supported with SVG images loaded via chrome:// or resource:// URLs. To experiment with the feature in SVG on the Web it is necessary to set the svg.context-properties.content.enabled pref to true."
        },
        {
            "name": "-moz-float-edge",
            "status": "nonstandard",
            "syntax": "border-box | content-box | margin-box | padding-box",
            "relevance": 0,
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-float-edge"
                }
            ],
            "description": "The non-standard -moz-float-edge CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness."
        },
        {
            "name": "-moz-force-broken-image-icon",
            "status": "nonstandard",
            "syntax": "<integer>",
            "relevance": 0,
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-force-broken-image-icon"
                }
            ],
            "description": "The -moz-force-broken-image-icon extended CSS property can be used to force the broken image icon to be shown even when a broken image has an alt attribute."
        },
        {
            "name": "-moz-image-region",
            "status": "nonstandard",
            "syntax": "<shape> | auto",
            "relevance": 0,
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-image-region"
                }
            ],
            "description": "For certain XUL elements and pseudo-elements that use an image from the list-style-image property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance."
        },
        {
            "name": "-moz-orient",
            "status": "nonstandard",
            "syntax": "inline | block | horizontal | vertical",
            "relevance": 0,
            "browsers": [
                "FF6"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-orient"
                }
            ],
            "description": "The -moz-orient CSS property specifies the orientation of the element to which it's applied."
        },
        {
            "name": "-moz-outline-radius",
            "status": "nonstandard",
            "syntax": "<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?",
            "relevance": 0,
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius"
                }
            ],
            "description": "In Mozilla applications like Firefox, the -moz-outline-radius CSS property can be used to give an element's outline rounded corners."
        },
        {
            "name": "-moz-outline-radius-bottomleft",
            "status": "nonstandard",
            "syntax": "<outline-radius>",
            "relevance": 0,
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius-bottomleft"
                }
            ],
            "description": "In Mozilla applications, the -moz-outline-radius-bottomleft CSS property can be used to round the bottom-left corner of an element's outline."
        },
        {
            "name": "-moz-outline-radius-bottomright",
            "status": "nonstandard",
            "syntax": "<outline-radius>",
            "relevance": 0,
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius-bottomright"
                }
            ],
            "description": "In Mozilla applications, the -moz-outline-radius-bottomright CSS property can be used to round the bottom-right corner of an element's outline."
        },
        {
            "name": "-moz-outline-radius-topleft",
            "status": "nonstandard",
            "syntax": "<outline-radius>",
            "relevance": 0,
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius-topleft"
                }
            ],
            "description": "In Mozilla applications, the -moz-outline-radius-topleft CSS property can be used to round the top-left corner of an element's outline."
        },
        {
            "name": "-moz-outline-radius-topright",
            "status": "nonstandard",
            "syntax": "<outline-radius>",
            "relevance": 0,
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius-topright"
                }
            ],
            "description": "In Mozilla applications, the -moz-outline-radius-topright CSS property can be used to round the top-right corner of an element's outline."
        },
        {
            "name": "-moz-stack-sizing",
            "status": "nonstandard",
            "syntax": "ignore | stretch-to-fit",
            "relevance": 0,
            "description": "-moz-stack-sizing is an extended CSS property. Normally, a stack will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible."
        },
        {
            "name": "-moz-text-blink",
            "status": "nonstandard",
            "syntax": "none | blink",
            "relevance": 0,
            "description": "The -moz-text-blink non-standard Mozilla CSS extension specifies the blink mode."
        },
        {
            "name": "-moz-user-input",
            "status": "nonstandard",
            "syntax": "auto | none | enabled | disabled",
            "relevance": 0,
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-user-input"
                }
            ],
            "description": "In Mozilla applications, -moz-user-input determines if an element will accept user input."
        },
        {
            "name": "-moz-user-modify",
            "status": "nonstandard",
            "syntax": "read-only | read-write | write-only",
            "relevance": 0,
            "description": "The -moz-user-modify property has no effect. It was originally planned to determine whether or not the content of an element can be edited by a user."
        },
        {
            "name": "-moz-window-dragging",
            "status": "nonstandard",
            "syntax": "drag | no-drag",
            "relevance": 0,
            "description": "The -moz-window-dragging CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X."
        },
        {
            "name": "-moz-window-shadow",
            "status": "nonstandard",
            "syntax": "default | menu | tooltip | sheet | none",
            "relevance": 0,
            "description": "The -moz-window-shadow CSS property specifies whether a window will have a shadow. It only works on Mac OS X."
        },
        {
            "name": "-webkit-border-before",
            "status": "nonstandard",
            "syntax": "<'border-width'> || <'border-style'> || <'color'>",
            "relevance": 0,
            "browsers": [
                "E79",
                "S5.1",
                "C8",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-border-before"
                }
            ],
            "description": "The -webkit-border-before CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet."
        },
        {
            "name": "-webkit-border-before-color",
            "status": "nonstandard",
            "syntax": "<'color'>",
            "relevance": 0,
            "description": "The -webkit-border-before-color CSS property sets the color of the individual logical block start border in a single place in the style sheet."
        },
        {
            "name": "-webkit-border-before-style",
            "status": "nonstandard",
            "syntax": "<'border-style'>",
            "relevance": 0,
            "description": "The -webkit-border-before-style CSS property sets the style of the individual logical block start border in a single place in the style sheet."
        },
        {
            "name": "-webkit-border-before-width",
            "status": "nonstandard",
            "syntax": "<'border-width'>",
            "relevance": 0,
            "description": "The -webkit-border-before-width CSS property sets the width of the individual logical block start border in a single place in the style sheet."
        },
        {
            "name": "-webkit-line-clamp",
            "syntax": "none | <integer>",
            "relevance": 50,
            "browsers": [
                "E17",
                "FF68",
                "S5",
                "C6",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-line-clamp"
                }
            ],
            "description": "The -webkit-line-clamp CSS property allows limiting of the contents of a block container to the specified number of lines."
        },
        {
            "name": "-webkit-mask",
            "status": "nonstandard",
            "syntax": "[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#",
            "relevance": 0,
            "description": "The mask CSS property alters the visibility of an element by either partially or fully hiding it. This is accomplished by either masking or clipping the image at specific points."
        },
        {
            "name": "-webkit-mask-attachment",
            "status": "nonstandard",
            "syntax": "<attachment>#",
            "relevance": 0,
            "browsers": [
                "S4",
                "C1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-attachment"
                }
            ],
            "description": "If a -webkit-mask-image is specified, -webkit-mask-attachment determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block."
        },
        {
            "name": "-webkit-mask-composite",
            "status": "nonstandard",
            "syntax": "<composite-style>#",
            "relevance": 0,
            "browsers": [
                "E18",
                "FF53",
                "S3.2",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-composite"
                }
            ],
            "description": "The -webkit-mask-composite property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the -webkit-mask-image property."
        },
        {
            "name": "-webkit-mask-position",
            "status": "nonstandard",
            "syntax": "<position>#",
            "relevance": 0,
            "description": "The mask-position CSS property sets the initial position, relative to the mask position layer defined by mask-origin, for each defined mask image."
        },
        {
            "name": "-webkit-mask-position-x",
            "status": "nonstandard",
            "syntax": "[ <length-percentage> | left | center | right ]#",
            "relevance": 0,
            "browsers": [
                "E18",
                "FF49",
                "S3.2",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-position-x"
                }
            ],
            "description": "The -webkit-mask-position-x CSS property sets the initial horizontal position of a mask image."
        },
        {
            "name": "-webkit-mask-position-y",
            "status": "nonstandard",
            "syntax": "[ <length-percentage> | top | center | bottom ]#",
            "relevance": 0,
            "browsers": [
                "E18",
                "FF49",
                "S3.2",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-position-y"
                }
            ],
            "description": "The -webkit-mask-position-y CSS property sets the initial vertical position of a mask image."
        },
        {
            "name": "-webkit-mask-repeat-x",
            "status": "nonstandard",
            "syntax": "repeat | no-repeat | space | round",
            "relevance": 0,
            "browsers": [
                "E18",
                "S5",
                "C3",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-repeat-x"
                }
            ],
            "description": "The -webkit-mask-repeat-x property specifies whether and how a mask image is repeated (tiled) horizontally."
        },
        {
            "name": "-webkit-mask-repeat-y",
            "status": "nonstandard",
            "syntax": "repeat | no-repeat | space | round",
            "relevance": 0,
            "browsers": [
                "E18",
                "S5",
                "C3",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-repeat-y"
                }
            ],
            "description": "The -webkit-mask-repeat-y property specifies whether and how a mask image is repeated (tiled) vertically."
        },
        {
            "name": "appearance",
            "status": "experimental",
            "syntax": "none | auto | button | textfield | menulist-button | <compat-auto>",
            "relevance": 60,
            "browsers": [
                "E84",
                "FF1",
                "S3",
                "C84",
                "O70"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/appearance"
                }
            ],
            "description": "Changes the appearance of buttons and other controls to resemble native controls."
        },
        {
            "name": "aspect-ratio",
            "status": "experimental",
            "syntax": "auto | <ratio>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF71",
                "C79"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/aspect-ratio"
                }
            ],
            "description": "The aspect-ratio   CSS property sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes and some other layout functions."
        },
        {
            "name": "azimuth",
            "status": "obsolete",
            "syntax": "<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/azimuth"
                }
            ],
            "description": "In combination with elevation, the azimuth CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage."
        },
        {
            "name": "backdrop-filter",
            "syntax": "none | <filter-function-list>",
            "relevance": 51,
            "browsers": [
                "E17",
                "FF70",
                "S9",
                "C76",
                "O34"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/backdrop-filter"
                }
            ],
            "description": "The backdrop-filter CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything behind the element, to see the effect you must make the element or its background at least partially transparent."
        },
        {
            "name": "border-block",
            "syntax": "<'border-top-width'> || <'border-top-style'> || <'color'>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF66",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block"
                }
            ],
            "description": "The border-block CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet."
        },
        {
            "name": "border-block-color",
            "syntax": "<'border-top-color'>{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF66",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-color"
                }
            ],
            "description": "The border-block-color CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-block-style",
            "syntax": "<'border-top-style'>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF66",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-style"
                }
            ],
            "description": "The border-block-style CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-block-width",
            "syntax": "<'border-top-width'>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF66",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-width"
                }
            ],
            "description": "The border-block-width CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-end-end-radius",
            "syntax": "<length-percentage>{1,2}",
            "relevance": 50,
            "browsers": [
                "FF66"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius"
                }
            ],
            "description": "The border-end-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on on the element's writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-end-start-radius",
            "syntax": "<length-percentage>{1,2}",
            "relevance": 50,
            "browsers": [
                "FF66"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius"
                }
            ],
            "description": "The border-end-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-inline",
            "syntax": "<'border-top-width'> || <'border-top-style'> || <'color'>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF66",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline"
                }
            ],
            "description": "The border-inline CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet."
        },
        {
            "name": "border-inline-color",
            "syntax": "<'border-top-color'>{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF66",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-color"
                }
            ],
            "description": "The border-inline-color CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-inline-style",
            "syntax": "<'border-top-style'>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF66",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-style"
                }
            ],
            "description": "The border-inline-style CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-inline-width",
            "syntax": "<'border-top-width'>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF66",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-width"
                }
            ],
            "description": "The border-inline-width CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-start-end-radius",
            "syntax": "<length-percentage>{1,2}",
            "relevance": 50,
            "browsers": [
                "FF66"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius"
                }
            ],
            "description": "The border-start-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-start-start-radius",
            "syntax": "<length-percentage>{1,2}",
            "relevance": 50,
            "browsers": [
                "FF66"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius"
                }
            ],
            "description": "The border-start-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's writing-mode, direction, and text-orientation."
        },
        {
            "name": "box-align",
            "status": "nonstandard",
            "syntax": "start | center | end | baseline | stretch",
            "relevance": 0,
            "browsers": [
                "E12",
                "FF1",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-align"
                }
            ],
            "description": "The box-align CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box."
        },
        {
            "name": "box-direction",
            "status": "nonstandard",
            "syntax": "normal | reverse | inherit",
            "relevance": 0,
            "browsers": [
                "E12",
                "FF1",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-direction"
                }
            ],
            "description": "The box-direction CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge)."
        },
        {
            "name": "box-flex",
            "status": "nonstandard",
            "syntax": "<number>",
            "relevance": 0,
            "browsers": [
                "E12",
                "FF1",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-flex"
                }
            ],
            "description": "The -moz-box-flex and -webkit-box-flex CSS properties specify how a -moz-box or -webkit-box grows to fill the box that contains it, in the direction of the containing box's layout."
        },
        {
            "name": "box-flex-group",
            "status": "nonstandard",
            "syntax": "<integer>",
            "relevance": 0,
            "browsers": [
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-flex-group"
                }
            ],
            "description": "The box-flex-group CSS property assigns the flexbox's child elements to a flex group."
        },
        {
            "name": "box-lines",
            "status": "nonstandard",
            "syntax": "single | multiple",
            "relevance": 0,
            "browsers": [
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-lines"
                }
            ],
            "description": "The box-lines CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes)."
        },
        {
            "name": "box-ordinal-group",
            "status": "nonstandard",
            "syntax": "<integer>",
            "relevance": 0,
            "browsers": [
                "E12",
                "FF1",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-ordinal-group"
                }
            ],
            "description": "The box-ordinal-group CSS property assigns the flexbox's child elements to an ordinal group."
        },
        {
            "name": "box-orient",
            "status": "nonstandard",
            "syntax": "horizontal | vertical | inline-axis | block-axis | inherit",
            "relevance": 0,
            "browsers": [
                "E12",
                "FF1",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-orient"
                }
            ],
            "description": "The box-orient CSS property specifies whether an element lays out its contents horizontally or vertically."
        },
        {
            "name": "box-pack",
            "status": "nonstandard",
            "syntax": "start | center | end | justify",
            "relevance": 0,
            "browsers": [
                "E12",
                "FF1",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-pack"
                }
            ],
            "description": "The -moz-box-pack and -webkit-box-pack CSS properties specify how a -moz-box or -webkit-box packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box."
        },
        {
            "name": "color-adjust",
            "syntax": "economy | exact",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF48",
                "S6",
                "C49",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/color-adjust"
                }
            ],
            "description": "The color-adjust property is a non-standard CSS extension that can be used to force printing of background colors and images in browsers based on the WebKit engine."
        },
        {
            "name": "counter-set",
            "syntax": "[ <custom-ident> <integer>? ]+ | none",
            "relevance": 50,
            "browsers": [
                "FF68"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/counter-set"
                }
            ],
            "description": "The counter-set CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element."
        },
        {
            "name": "font-optical-sizing",
            "syntax": "auto | none",
            "relevance": 50,
            "browsers": [
                "E17",
                "FF62",
                "S11",
                "C79",
                "O66"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing"
                }
            ],
            "description": "The font-optical-sizing CSS property allows developers to control whether browsers render text with slightly differing visual representations to optimize viewing at different sizes, or not. This only works for fonts that have an optical size variation axis."
        },
        {
            "name": "font-variation-settings",
            "syntax": "normal | [ <string> <number> ]#",
            "relevance": 50,
            "browsers": [
                "E17",
                "FF62",
                "S11",
                "C62",
                "O49"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variation-settings"
                }
            ],
            "description": "The font-variation-settings CSS property provides low-level control over OpenType or TrueType font variations, by specifying the four letter axis names of the features you want to vary, along with their variation values."
        },
        {
            "name": "font-smooth",
            "status": "nonstandard",
            "syntax": "auto | never | always | <absolute-size> | <length>",
            "relevance": 0,
            "browsers": [
                "E79",
                "FF25",
                "S4",
                "C5",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-smooth"
                }
            ],
            "description": ""
        },
        {
            "name": "gap",
            "syntax": "<'row-gap'> <'column-gap'>?",
            "relevance": 50,
            "browsers": [
                "E84",
                "FF63",
                "S10.1",
                "C84",
                "O70"
            ],
            "description": "The gap CSS property is a shorthand property for row-gap and column-gap specifying the gutters between grid rows and columns."
        },
        {
            "name": "hanging-punctuation",
            "syntax": "none | [ first || [ force-end | allow-end ] || last ]",
            "relevance": 50,
            "browsers": [
                "S10"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation"
                }
            ],
            "description": "The hanging-punctuation CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box."
        },
        {
            "name": "image-resolution",
            "status": "experimental",
            "syntax": "[ from-image || <resolution> ] && snap?",
            "relevance": 50,
            "description": "The image-resolution property specifies the intrinsic resolution of all raster images used in or on the element. It affects both content images (e.g. replaced elements and generated content) and decorative images (such as background-image). The intrinsic resolution of an image is used to determine the image’s intrinsic dimensions."
        },
        {
            "name": "initial-letter",
            "status": "experimental",
            "syntax": "normal | [ <number> <integer>? ]",
            "relevance": 50,
            "browsers": [
                "S9"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/initial-letter"
                }
            ],
            "description": "The initial-letter CSS property specifies styling for dropped, raised, and sunken initial letters."
        },
        {
            "name": "initial-letter-align",
            "status": "experimental",
            "syntax": "[ auto | alphabetic | hanging | ideographic ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/initial-letter-align"
                }
            ],
            "description": "The initial-letter-align CSS property specifies the alignment of initial letters within a paragraph."
        },
        {
            "name": "inset",
            "syntax": "<'top'>{1,4}",
            "relevance": 50,
            "browsers": [
                "FF66"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inset"
                }
            ],
            "description": "The inset CSS property defines the logical block and inline start and end offsets of an element, which map to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "inset-block",
            "syntax": "<'top'>{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF63",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inset-block"
                }
            ],
            "description": "The inset-block CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "inset-block-end",
            "syntax": "<'top'>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF63",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inset-block-end"
                }
            ],
            "description": "The inset-block-end CSS property defines the logical block end offset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "inset-block-start",
            "syntax": "<'top'>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF63",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inset-block-start"
                }
            ],
            "description": "The inset-block-start CSS property defines the logical block start offset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "inset-inline",
            "syntax": "<'top'>{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF63",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inset-inline"
                }
            ],
            "description": "The inset-inline CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "inset-inline-end",
            "syntax": "<'top'>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF63",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inset-inline-end"
                }
            ],
            "description": "The inset-inline-end CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "inset-inline-start",
            "syntax": "<'top'>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF63",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inset-inline-start"
                }
            ],
            "description": "The inset-inline-start CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "line-clamp",
            "status": "experimental",
            "syntax": "none | <integer>",
            "relevance": 50,
            "description": "The line-clamp property allows limiting the contents of a block container to the specified number of lines; remaining content is fragmented away and neither rendered nor measured. Optionally, it also allows inserting content into the last line box to indicate the continuity of truncated/interrupted content."
        },
        {
            "name": "line-height-step",
            "status": "experimental",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "C60",
                "O47"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/line-height-step"
                }
            ],
            "description": "The line-height-step CSS property defines the step units for line box heights. When the step unit is positive, line box heights are rounded up to the closest multiple of the unit. Negative values are invalid."
        },
        {
            "name": "margin-block",
            "syntax": "<'margin-left'>{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF66",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-block"
                }
            ],
            "description": "The margin-block CSS property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation."
        },
        {
            "name": "margin-inline",
            "syntax": "<'margin-left'>{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF66",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-inline"
                }
            ],
            "description": "The margin-inline CSS property defines the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation."
        },
        {
            "name": "margin-trim",
            "status": "experimental",
            "syntax": "none | in-flow | all",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-trim"
                }
            ],
            "description": "The margin-trim property allows the container to trim the margins of its children where they adjoin the container’s edges."
        },
        {
            "name": "mask",
            "syntax": "<mask-layer>#",
            "relevance": 50,
            "browsers": [
                "E12",
                "FF2",
                "S3.2",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask"
                }
            ],
            "description": "The mask CSS property alters the visibility of an element by either partially or fully hiding it. This is accomplished by either masking or clipping the image at specific points."
        },
        {
            "name": "mask-border",
            "syntax": "<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>",
            "relevance": 50,
            "description": "The mask-border CSS property lets you create a mask along the edge of an element's border.\n\nThis property is a shorthand for mask-border-source, mask-border-slice, mask-border-width, mask-border-outset, mask-border-repeat, and mask-border-mode. As with all shorthand properties, any omitted sub-values will be set to their initial value."
        },
        {
            "name": "mask-border-mode",
            "syntax": "luminance | alpha",
            "relevance": 50,
            "description": "The mask-border-mode CSS property specifies the blending mode used in a mask border."
        },
        {
            "name": "mask-border-outset",
            "syntax": "[ <length> | <number> ]{1,4}",
            "relevance": 50,
            "description": "The mask-border-outset CSS property specifies the distance by which an element's mask border is set out from its border box."
        },
        {
            "name": "mask-border-repeat",
            "syntax": "[ stretch | repeat | round | space ]{1,2}",
            "relevance": 50,
            "description": "The mask-border-repeat CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border."
        },
        {
            "name": "mask-border-slice",
            "syntax": "<number-percentage>{1,4} fill?",
            "relevance": 50,
            "description": "The mask-border-slice CSS property divides the image specified by mask-border-source into regions. These regions are used to form the components of an element's mask border."
        },
        {
            "name": "mask-border-source",
            "syntax": "none | <image>",
            "relevance": 50,
            "description": "The mask-border-source CSS property specifies the source image used to create an element's mask border.\n\nThe mask-border-slice property is used to divide the source image into regions, which are then dynamically applied to the final mask border."
        },
        {
            "name": "mask-border-width",
            "syntax": "[ <length-percentage> | <number> | auto ]{1,4}",
            "relevance": 50,
            "description": "The mask-border-width CSS property specifies the width of an element's mask border."
        },
        {
            "name": "mask-clip",
            "syntax": "[ <geometry-box> | no-clip ]#",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF53",
                "S4",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-clip"
                }
            ],
            "description": "The mask-clip CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area."
        },
        {
            "name": "mask-composite",
            "syntax": "<compositing-operator>#",
            "relevance": 50,
            "browsers": [
                "E18",
                "FF53"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-composite"
                }
            ],
            "description": "The mask-composite CSS property represents a compositing operation used on the current mask layer with the mask layers below it."
        },
        {
            "name": "max-lines",
            "status": "experimental",
            "syntax": "none | <integer>",
            "relevance": 50,
            "description": "The max-liens property forces a break after a set number of lines"
        },
        {
            "name": "offset",
            "syntax": "[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF72",
                "C55",
                "O42"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/offset"
                }
            ],
            "description": "The offset CSS property is a shorthand property for animating an element along a defined path."
        },
        {
            "name": "offset-anchor",
            "syntax": "auto | <position>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF72",
                "C79"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/offset-anchor"
                }
            ],
            "description": "Defines an anchor point of the box positioned along the path. The anchor point specifies the point of the box which is to be considered as the point that is moved along the path."
        },
        {
            "name": "offset-distance",
            "syntax": "<length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF72",
                "C55",
                "O42"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/offset-distance"
                }
            ],
            "description": "The offset-distance CSS property specifies a position along an offset-path."
        },
        {
            "name": "offset-path",
            "syntax": "none | ray( [ <angle> && <size>? && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF72",
                "C55",
                "O45"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/offset-path"
                }
            ],
            "description": "The offset-path CSS property specifies the offset path where the element gets positioned. The exact element’s position on the offset path is determined by the offset-distance property. An offset path is either a specified path with one or multiple sub-paths or the geometry of a not-styled basic shape. Each shape or path must define an initial position for the computed value of \"0\" for offset-distance and an initial direction which specifies the rotation of the object to the initial position.\n\nIn this specification, a direction (or rotation) of 0 degrees is equivalent to the direction of the positive x-axis in the object’s local coordinate system. In other words, a rotation of 0 degree points to the right side of the UA if the object and its ancestors have no transformation applied."
        },
        {
            "name": "offset-position",
            "status": "experimental",
            "syntax": "auto | <position>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/offset-position"
                }
            ],
            "description": "Specifies the initial position of the offset path. If position is specified with static, offset-position would be ignored."
        },
        {
            "name": "offset-rotate",
            "syntax": "[ auto | reverse ] || <angle>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF72",
                "C56",
                "O43"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/offset-rotate"
                }
            ],
            "description": "The offset-rotate CSS property defines the direction of the element while positioning along the offset path."
        },
        {
            "name": "overflow-anchor",
            "syntax": "auto | none",
            "relevance": 51,
            "browsers": [
                "E79",
                "FF66",
                "C56",
                "O43"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-anchor"
                }
            ],
            "description": "The overflow-anchor CSS property provides a way to opt out browser scroll anchoring behavior which adjusts scroll position to minimize content shifts."
        },
        {
            "name": "overflow-block",
            "syntax": "visible | hidden | clip | scroll | auto",
            "relevance": 50,
            "browsers": [
                "FF69"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-block"
                }
            ],
            "description": "The overflow-block CSS media feature can be used to test how the output device handles content that overflows the initial containing block along the block axis."
        },
        {
            "name": "overflow-clip-box",
            "status": "nonstandard",
            "syntax": "padding-box | content-box",
            "relevance": 0,
            "browsers": [
                "FF29"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Mozilla/Gecko/Chrome/CSS/overflow-clip-box"
                }
            ],
            "description": "The overflow-clip-box CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the overflow-clip-box-inline and overflow-clip-box-block properties."
        },
        {
            "name": "overflow-inline",
            "syntax": "visible | hidden | clip | scroll | auto",
            "relevance": 50,
            "browsers": [
                "FF69"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-inline"
                }
            ],
            "description": "The overflow-inline CSS media feature can be used to test how the output device handles content that overflows the initial containing block along the inline axis."
        },
        {
            "name": "overscroll-behavior",
            "syntax": "[ contain | none | auto ]{1,2}",
            "relevance": 50,
            "browsers": [
                "E18",
                "FF59",
                "C63",
                "O50"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior"
                }
            ],
            "description": "The overscroll-behavior CSS property is shorthand for the overscroll-behavior-x and overscroll-behavior-y properties, which allow you to control the browser's scroll overflow behavior — what happens when the boundary of a scrolling area is reached."
        },
        {
            "name": "overscroll-behavior-block",
            "syntax": "contain | none | auto",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF73",
                "C77",
                "O64"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block"
                }
            ],
            "description": "The overscroll-behavior-block CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached."
        },
        {
            "name": "overscroll-behavior-inline",
            "syntax": "contain | none | auto",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF73",
                "C77",
                "O64"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline"
                }
            ],
            "description": "The overscroll-behavior-inline CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached."
        },
        {
            "name": "overscroll-behavior-x",
            "syntax": "contain | none | auto",
            "relevance": 50,
            "browsers": [
                "E18",
                "FF59",
                "C63",
                "O50"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x"
                }
            ],
            "description": "The overscroll-behavior-x CSS property is allows you to control the browser's scroll overflow behavior — what happens when the boundary of a scrolling area is reached — in the x axis direction."
        },
        {
            "name": "overscroll-behavior-y",
            "syntax": "contain | none | auto",
            "relevance": 50,
            "browsers": [
                "E18",
                "FF59",
                "C63",
                "O50"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y"
                }
            ],
            "description": "The overscroll-behavior-y CSS property is allows you to control the browser's scroll overflow behavior — what happens when the boundary of a scrolling area is reached — in the y axis direction."
        },
        {
            "name": "padding-block",
            "syntax": "<'padding-left'>{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF66",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-block"
                }
            ],
            "description": "The padding-block CSS property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation."
        },
        {
            "name": "padding-inline",
            "syntax": "<'padding-left'>{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF66",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-inline"
                }
            ],
            "description": "The padding-inline CSS property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation."
        },
        {
            "name": "place-content",
            "syntax": "<'align-content'> <'justify-content'>?",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF53",
                "S9",
                "C59",
                "O46"
            ],
            "description": "The place-content CSS shorthand property sets both the align-content and justify-content properties."
        },
        {
            "name": "place-items",
            "syntax": "<'align-items'> <'justify-items'>?",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF45",
                "S11",
                "C59",
                "O46"
            ],
            "description": "The CSS place-items shorthand property sets both the align-items and justify-items properties. The first value is the align-items property value, the second the justify-items one. If the second value is not present, the first value is also used for it."
        },
        {
            "name": "place-self",
            "syntax": "<'align-self'> <'justify-self'>?",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF45",
                "C59",
                "O46"
            ],
            "description": "The place-self CSS property is a shorthand property sets both the align-self and justify-self properties. The first value is the align-self property value, the second the justify-self one. If the second value is not present, the first value is also used for it."
        },
        {
            "name": "rotate",
            "syntax": "none | <angle> | [ x | y | z | <number>{3} ] && <angle>",
            "relevance": 50,
            "browsers": [
                "FF72"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/rotate"
                }
            ],
            "description": "The rotate CSS property allows you to specify rotation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value."
        },
        {
            "name": "row-gap",
            "syntax": "normal | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E84",
                "FF63",
                "S10.1",
                "C84",
                "O70"
            ],
            "description": "The row-gap CSS property specifies the gutter between grid rows."
        },
        {
            "name": "ruby-merge",
            "status": "experimental",
            "syntax": "separate | collapse | auto",
            "relevance": 50,
            "description": "This property controls how ruby annotation boxes should be rendered when there are more than one in a ruby container box: whether each pair should be kept separate, the annotations should be collapsed and rendered as a group, or the separation should be determined based on the space available."
        },
        {
            "name": "scale",
            "syntax": "none | <number>{1,3}",
            "relevance": 50,
            "browsers": [
                "FF72"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scale"
                }
            ],
            "description": "The scale CSS property allows you to specify scale transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value."
        },
        {
            "name": "scrollbar-color",
            "syntax": "auto | dark | light | <color>{2}",
            "relevance": 50,
            "browsers": [
                "FF64"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-color"
                }
            ],
            "description": "The scrollbar-color CSS property sets the color of the scrollbar track and thumb."
        },
        {
            "name": "scrollbar-width",
            "syntax": "auto | thin | none",
            "relevance": 50,
            "browsers": [
                "FF64"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-width"
                }
            ],
            "description": "The scrollbar-width property allows the author to set the maximum thickness of an element’s scrollbars when they are shown. "
        },
        {
            "name": "scroll-margin",
            "syntax": "<length>{1,4}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S11",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin"
                }
            ],
            "description": "The scroll-margin property is a shorthand property which sets all of the scroll-margin longhands, assigning values much like the margin property does for the margin-* longhands."
        },
        {
            "name": "scroll-margin-block",
            "syntax": "<length>{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block"
                }
            ],
            "description": "The scroll-margin-block property is a shorthand property which sets the scroll-margin longhands in the block dimension."
        },
        {
            "name": "scroll-margin-block-start",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start"
                }
            ],
            "description": "The scroll-margin-block-start property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-margin-block-end",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end"
                }
            ],
            "description": "The scroll-margin-block-end property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-margin-bottom",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S11",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom"
                }
            ],
            "description": "The scroll-margin-bottom property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-margin-inline",
            "syntax": "<length>{1,2}",
            "relevance": 50,
            "browsers": [
                "FF68"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline"
                }
            ],
            "description": "The scroll-margin-inline property is a shorthand property which sets the scroll-margin longhands in the inline dimension."
        },
        {
            "name": "scroll-margin-inline-start",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start"
                }
            ],
            "description": "The scroll-margin-inline-start property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-margin-inline-end",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end"
                }
            ],
            "description": "The scroll-margin-inline-end property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-margin-left",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S11",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left"
                }
            ],
            "description": "The scroll-margin-left property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-margin-right",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S11",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right"
                }
            ],
            "description": "The scroll-margin-right property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-margin-top",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S11",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top"
                }
            ],
            "description": "The scroll-margin-top property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-padding",
            "syntax": "[ auto | <length-percentage> ]{1,4}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S11",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding"
                }
            ],
            "description": "The scroll-padding property is a shorthand property which sets all of the scroll-padding longhands, assigning values much like the padding property does for the padding-* longhands."
        },
        {
            "name": "scroll-padding-block",
            "syntax": "[ auto | <length-percentage> ]{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block"
                }
            ],
            "description": "The scroll-padding-block property is a shorthand property which sets the scroll-padding longhands for the block dimension."
        },
        {
            "name": "scroll-padding-block-start",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start"
                }
            ],
            "description": "The scroll-padding-block-start property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-padding-block-end",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end"
                }
            ],
            "description": "The scroll-padding-block-end property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-padding-bottom",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S11",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom"
                }
            ],
            "description": "The scroll-padding-bottom property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-padding-inline",
            "syntax": "[ auto | <length-percentage> ]{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline"
                }
            ],
            "description": "The scroll-padding-inline property is a shorthand property which sets the scroll-padding longhands for the inline dimension."
        },
        {
            "name": "scroll-padding-inline-start",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start"
                }
            ],
            "description": "The scroll-padding-inline-start property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-padding-inline-end",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end"
                }
            ],
            "description": "The scroll-padding-inline-end property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-padding-left",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S11",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left"
                }
            ],
            "description": "The scroll-padding-left property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-padding-right",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S11",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right"
                }
            ],
            "description": "The scroll-padding-right property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-padding-top",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S11",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top"
                }
            ],
            "description": "The scroll-padding-top property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-snap-align",
            "syntax": "[ none | start | end | center ]{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S11",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align"
                }
            ],
            "description": "The scroll-snap-align property specifies the box’s snap position as an alignment of its snap area (as the alignment subject) within its snap container’s snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value."
        },
        {
            "name": "scroll-snap-stop",
            "syntax": "normal | always",
            "relevance": 50,
            "browsers": [
                "E79",
                "C75",
                "O62"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop"
                }
            ],
            "description": "The scroll-snap-stop CSS property defines whether the scroll container is allowed to \"pass over\" possible snap positions."
        },
        {
            "name": "scroll-snap-type-x",
            "status": "obsolete",
            "syntax": "none | mandatory | proximity",
            "relevance": 0,
            "browsers": [
                "FF39",
                "S9"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type-x"
                }
            ],
            "description": "The scroll-snap-type-x CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n\nSpecifying any precise animations or physics used to enforce those snap points is not covered by this property but instead left up to the user agent."
        },
        {
            "name": "scroll-snap-type-y",
            "status": "obsolete",
            "syntax": "none | mandatory | proximity",
            "relevance": 0,
            "browsers": [
                "FF39"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type-y"
                }
            ],
            "description": "The scroll-snap-type-y CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n\nSpecifying any precise animations or physics used to enforce those snap points is not covered by this property but instead left up to the user agent."
        },
        {
            "name": "text-combine-upright",
            "syntax": "none | all | [ digits <integer>? ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-combine-upright"
                }
            ],
            "description": "The text-combine-upright CSS property specifies the combination of multiple characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n\nThis is used to produce an effect that is known as tate-chū-yoko (縦中横) in Japanese, or as 直書橫向 in Chinese."
        },
        {
            "name": "text-decoration-skip",
            "status": "experimental",
            "syntax": "none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]",
            "relevance": 52,
            "browsers": [
                "S12.1",
                "C57",
                "O44"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip"
                }
            ],
            "description": "The text-decoration-skip CSS property specifies what parts of the element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors."
        },
        {
            "name": "text-decoration-skip-ink",
            "syntax": "auto | all | none",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF70",
                "C64",
                "O50"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink"
                }
            ],
            "description": "The text-decoration-skip-ink CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders."
        },
        {
            "name": "text-decoration-thickness",
            "syntax": "auto | from-font | <length> | <percentage> ",
            "relevance": 50,
            "browsers": [
                "FF70",
                "S12.1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness"
                }
            ],
            "description": "The text-decoration-thickness CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline."
        },
        {
            "name": "text-emphasis",
            "syntax": "<'text-emphasis-style'> || <'text-emphasis-color'>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF46",
                "S6.1",
                "C25",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-emphasis"
                }
            ],
            "description": "The text-emphasis CSS property is a shorthand property for setting text-emphasis-style and text-emphasis-color in one declaration. This property will apply the specified emphasis mark to each character of the element's text, except separator characters, like spaces,  and control characters."
        },
        {
            "name": "text-emphasis-color",
            "syntax": "<color>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF46",
                "S6.1",
                "C25",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color"
                }
            ],
            "description": "The text-emphasis-color CSS property defines the color used to draw emphasis marks on text being rendered in the HTML document. This value can also be set and reset using the text-emphasis shorthand."
        },
        {
            "name": "text-emphasis-position",
            "syntax": "[ over | under ] && [ right | left ]",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF46",
                "S6.1",
                "C25",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position"
                }
            ],
            "description": "The text-emphasis-position CSS property describes where emphasis marks are drawn at. The effect of emphasis marks on the line height is the same as for ruby text: if there isn't enough place, the line height is increased."
        },
        {
            "name": "text-emphasis-style",
            "syntax": "none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF46",
                "S6.1",
                "C25",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style"
                }
            ],
            "description": "The text-emphasis-style CSS property defines the type of emphasis used. It can also be set, and reset, using the text-emphasis shorthand."
        },
        {
            "name": "text-size-adjust",
            "status": "experimental",
            "syntax": "none | auto | <percentage>",
            "relevance": 56,
            "browsers": [
                "E79",
                "C54",
                "O41"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-size-adjust"
                }
            ],
            "description": "The text-size-adjust CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property."
        },
        {
            "name": "text-underline-offset",
            "syntax": "auto | <length> | <percentage> ",
            "relevance": 50,
            "browsers": [
                "FF70",
                "S12.1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-underline-offset"
                }
            ],
            "description": "The text-underline-offset CSS property sets the offset distance of an underline text decoration line (applied using text-decoration) from its original position."
        },
        {
            "name": "transform-box",
            "syntax": "content-box | border-box | fill-box | stroke-box | view-box",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF55",
                "S11",
                "C64",
                "O51"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transform-box"
                }
            ],
            "description": "The transform-box CSS property defines the layout box to which the transform and transform-origin properties relate."
        },
        {
            "name": "translate",
            "syntax": "none | <length-percentage> [ <length-percentage> <length>? ]?",
            "relevance": 50,
            "browsers": [
                "FF72"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/translate"
                }
            ],
            "description": "The translate CSS property allows you to specify translation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value."
        },
        {
            "name": "speak-as",
            "syntax": "auto | bullets | numbers | words | spell-out | <counter-style-name>",
            "relevance": 50,
            "description": "The speak-as descriptor specifies how a counter symbol constructed with a given @counter-style will be represented in the spoken form. For example, an author can specify a counter symbol to be either spoken as its numerical value or just represented with an audio cue."
        },
        {
            "name": "font-display",
            "status": "experimental",
            "syntax": "[ auto | block | swap | fallback | optional ]",
            "relevance": 54,
            "description": "The font-display descriptor determines how a font face is displayed based on whether and when it is downloaded and ready to use."
        },
        {
            "name": "bleed",
            "syntax": "auto | <length>",
            "relevance": 50,
            "description": "The bleed CSS at-rule descriptor, used with the @page at-rule, specifies the extent of the page bleed area outside the page box. This property only has effect if crop marks are enabled using the marks property."
        },
        {
            "name": "marks",
            "syntax": "none | [ crop || cross ]",
            "relevance": 50,
            "description": "The marks CSS at-rule descriptor, used with the @page at-rule, adds crop and/or cross marks to the presentation of the document. Crop marks indicate where the page should be cut. Cross marks are used to align sheets."
        },
        {
            "name": "max-zoom",
            "syntax": "auto | <number> | <percentage>",
            "relevance": 50,
            "description": "The max-zoom CSS descriptor sets the maximum zoom factor of a document defined by the @viewport at-rule. The browser will not zoom in any further than this, whether automatically or at the user's request.\n\nA zoom factor of 1.0 or 100% corresponds to no zooming. Larger values are zoomed in. Smaller values are zoomed out."
        },
        {
            "name": "min-zoom",
            "syntax": "auto | <number> | <percentage>",
            "relevance": 50,
            "description": "The min-zoom CSS descriptor sets the minimum zoom factor of a document defined by the @viewport at-rule. The browser will not zoom out any further than this, whether automatically or at the user's request.\n\nA zoom factor of 1.0 or 100% corresponds to no zooming. Larger values are zoomed in. Smaller values are zoomed out."
        },
        {
            "name": "orientation",
            "syntax": "auto | portrait | landscape",
            "relevance": 50,
            "description": "The orientation CSS @media media feature can be used to apply styles based on the orientation of the viewport (or the page box, for paged media)."
        },
        {
            "name": "user-zoom",
            "syntax": "zoom | fixed",
            "relevance": 50,
            "description": "The user-zoom CSS descriptor controls whether or not the user can change the zoom factor of a document defined by @viewport."
        },
        {
            "name": "viewport-fit",
            "syntax": "auto | contain | cover",
            "relevance": 50,
            "description": "The border-block-style CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation."
        }
    ],
    "atDirectives": [
        {
            "name": "@charset",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@charset"
                }
            ],
            "description": "Defines character set of the document."
        },
        {
            "name": "@counter-style",
            "browsers": [
                "FF33"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@counter-style"
                }
            ],
            "description": "Defines a custom counter style."
        },
        {
            "name": "@font-face",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@font-face"
                }
            ],
            "description": "Allows for linking to fonts that are automatically activated when needed. This permits authors to work around the limitation of 'web-safe' fonts, allowing for consistent rendering independent of the fonts available in a given user's environment."
        },
        {
            "name": "@font-feature-values",
            "browsers": [
                "FF34",
                "S9.1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@font-feature-values"
                }
            ],
            "description": "Defines named values for the indices used to select alternate glyphs for a given font family."
        },
        {
            "name": "@import",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@import"
                }
            ],
            "description": "Includes content of another file."
        },
        {
            "name": "@keyframes",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@keyframes"
                }
            ],
            "description": "Defines set of animation key frames."
        },
        {
            "name": "@media",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@media"
                }
            ],
            "description": "Defines a stylesheet for a particular media type."
        },
        {
            "name": "@-moz-document",
            "browsers": [
                "FF1.8"
            ],
            "description": "Gecko-specific at-rule that restricts the style rules contained within it based on the URL of the document."
        },
        {
            "name": "@-moz-keyframes",
            "browsers": [
                "FF5"
            ],
            "description": "Defines set of animation key frames."
        },
        {
            "name": "@-ms-viewport",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Specifies the size, zoom factor, and orientation of the viewport."
        },
        {
            "name": "@namespace",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@namespace"
                }
            ],
            "description": "Declares a prefix and associates it with a namespace name."
        },
        {
            "name": "@-o-keyframes",
            "browsers": [
                "O12"
            ],
            "description": "Defines set of animation key frames."
        },
        {
            "name": "@-o-viewport",
            "browsers": [
                "O11"
            ],
            "description": "Specifies the size, zoom factor, and orientation of the viewport."
        },
        {
            "name": "@page",
            "browsers": [
                "E12",
                "FF19",
                "C2",
                "IE8",
                "O6"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@page"
                }
            ],
            "description": "Directive defines various page parameters."
        },
        {
            "name": "@supports",
            "browsers": [
                "E12",
                "FF22",
                "S9",
                "C28",
                "O12.1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@supports"
                }
            ],
            "description": "A conditional group rule whose condition tests whether the user agent supports CSS property:value pairs."
        },
        {
            "name": "@-webkit-keyframes",
            "browsers": [
                "C",
                "S4"
            ],
            "description": "Defines set of animation key frames."
        }
    ],
    "pseudoClasses": [
        {
            "name": ":active",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:active"
                }
            ],
            "description": "Applies while an element is being activated by the user. For example, between the times the user presses the mouse button and releases it."
        },
        {
            "name": ":any-link",
            "browsers": [
                "E79",
                "FF50",
                "S9",
                "C65",
                "O52"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:any-link"
                }
            ],
            "description": "Represents an element that acts as the source anchor of a hyperlink. Applies to both visited and unvisited links."
        },
        {
            "name": ":checked",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:checked"
                }
            ],
            "description": "Radio and checkbox elements can be toggled by the user. Some menu items are 'checked' when the user selects them. When such elements are toggled 'on' the :checked pseudo-class applies."
        },
        {
            "name": ":corner-present",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Indicates whether or not a scrollbar corner is present."
        },
        {
            "name": ":decrement",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to buttons and track pieces. Indicates whether or not the button or track piece will decrement the view’s position when used."
        },
        {
            "name": ":default",
            "browsers": [
                "E79",
                "FF4",
                "S5",
                "C10",
                "O10"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:default"
                }
            ],
            "description": "Applies to the one or more UI elements that are the default among a set of similar elements. Typically applies to context menu items, buttons, and select lists/menus."
        },
        {
            "name": ":disabled",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:disabled"
                }
            ],
            "description": "Represents user interface elements that are in a disabled state; such elements have a corresponding enabled state."
        },
        {
            "name": ":double-button",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to buttons and track pieces. Applies when both buttons are displayed together at the same end of the scrollbar."
        },
        {
            "name": ":empty",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:empty"
                }
            ],
            "description": "Represents an element that has no children at all."
        },
        {
            "name": ":enabled",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:enabled"
                }
            ],
            "description": "Represents user interface elements that are in an enabled state; such elements have a corresponding disabled state."
        },
        {
            "name": ":end",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to buttons and track pieces. Indicates whether the object is placed after the thumb."
        },
        {
            "name": ":first",
            "browsers": [
                "E12",
                "S6",
                "C18",
                "IE8",
                "O9.2"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:first"
                }
            ],
            "description": "When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context."
        },
        {
            "name": ":first-child",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:first-child"
                }
            ],
            "description": "Same as :nth-child(1). Represents an element that is the first child of some other element."
        },
        {
            "name": ":first-of-type",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:first-of-type"
                }
            ],
            "description": "Same as :nth-of-type(1). Represents an element that is the first sibling of its type in the list of children of its parent element."
        },
        {
            "name": ":focus",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:focus"
                }
            ],
            "description": "Applies while an element has the focus (accepts keyboard or mouse events, or other forms of input)."
        },
        {
            "name": ":fullscreen",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:fullscreen"
                }
            ],
            "description": "Matches any element that has its fullscreen flag set."
        },
        {
            "name": ":future",
            "browsers": [
                "C",
                "O16",
                "S6"
            ],
            "description": "Represents any element that is defined to occur entirely after a :current element."
        },
        {
            "name": ":horizontal",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to any scrollbar pieces that have a horizontal orientation."
        },
        {
            "name": ":host",
            "browsers": [
                "E79",
                "FF63",
                "S10",
                "C54",
                "O41"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:host"
                }
            ],
            "description": "When evaluated in the context of a shadow tree, matches the shadow tree’s host element."
        },
        {
            "name": ":host()",
            "browsers": [
                "C35",
                "O22"
            ],
            "description": "When evaluated in the context of a shadow tree, it matches the shadow tree’s host element if the host element, in its normal context, matches the selector argument."
        },
        {
            "name": ":host-context()",
            "browsers": [
                "C35",
                "O22"
            ],
            "description": "Tests whether there is an ancestor, outside the shadow tree, which matches a particular selector."
        },
        {
            "name": ":hover",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:hover"
                }
            ],
            "description": "Applies while the user designates an element with a pointing device, but does not necessarily activate it. For example, a visual user agent could apply this pseudo-class when the cursor (mouse pointer) hovers over a box generated by the element."
        },
        {
            "name": ":increment",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to buttons and track pieces. Indicates whether or not the button or track piece will increment the view’s position when used."
        },
        {
            "name": ":indeterminate",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:indeterminate"
                }
            ],
            "description": "Applies to UI elements whose value is in an indeterminate state."
        },
        {
            "name": ":in-range",
            "browsers": [
                "E13",
                "FF29",
                "S5.1",
                "C10",
                "O11"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:in-range"
                }
            ],
            "description": "Used in conjunction with the min and max attributes, whether on a range input, a number field, or any other types that accept those attributes."
        },
        {
            "name": ":invalid",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:invalid"
                }
            ],
            "description": "An element is :valid or :invalid when it is, respectively, valid or invalid with respect to data validity semantics defined by a different specification."
        },
        {
            "name": ":lang()",
            "browsers": [
                "E",
                "C",
                "FF1",
                "IE8",
                "O8",
                "S3"
            ],
            "description": "Represents an element that is in language specified."
        },
        {
            "name": ":last-child",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:last-child"
                }
            ],
            "description": "Same as :nth-last-child(1). Represents an element that is the last child of some other element."
        },
        {
            "name": ":last-of-type",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:last-of-type"
                }
            ],
            "description": "Same as :nth-last-of-type(1). Represents an element that is the last sibling of its type in the list of children of its parent element."
        },
        {
            "name": ":left",
            "browsers": [
                "E12",
                "S5.1",
                "C6",
                "IE8",
                "O9.2"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:left"
                }
            ],
            "description": "When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context."
        },
        {
            "name": ":link",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:link"
                }
            ],
            "description": "Applies to links that have not yet been visited."
        },
        {
            "name": ":matches()",
            "browsers": [
                "S9"
            ],
            "description": "Takes a selector list as its argument. It represents an element that is represented by its argument."
        },
        {
            "name": ":-moz-any()",
            "browsers": [
                "FF4"
            ],
            "description": "Represents an element that is represented by the selector list passed as its argument. Standardized as :matches()."
        },
        {
            "name": ":-moz-any-link",
            "browsers": [
                "FF1"
            ],
            "description": "Represents an element that acts as the source anchor of a hyperlink. Applies to both visited and unvisited links."
        },
        {
            "name": ":-moz-broken",
            "browsers": [
                "FF3"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:-moz-broken"
                }
            ],
            "description": "Non-standard. Matches elements representing broken images."
        },
        {
            "name": ":-moz-drag-over",
            "browsers": [
                "FF1"
            ],
            "description": "Non-standard. Matches elements when a drag-over event applies to it."
        },
        {
            "name": ":-moz-first-node",
            "browsers": [
                "FF1"
            ],
            "description": "Non-standard. Represents an element that is the first child node of some other element."
        },
        {
            "name": ":-moz-focusring",
            "browsers": [
                "FF4"
            ],
            "description": "Non-standard. Matches an element that has focus and focus ring drawing is enabled in the browser."
        },
        {
            "name": ":-moz-full-screen",
            "browsers": [
                "FF9"
            ],
            "description": "Matches any element that has its fullscreen flag set. Standardized as :fullscreen."
        },
        {
            "name": ":-moz-last-node",
            "browsers": [
                "FF1"
            ],
            "description": "Non-standard. Represents an element that is the last child node of some other element."
        },
        {
            "name": ":-moz-loading",
            "browsers": [
                "FF3"
            ],
            "description": "Non-standard. Matches elements, such as images, that haven’t started loading yet."
        },
        {
            "name": ":-moz-only-whitespace",
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:-moz-only-whitespace"
                }
            ],
            "description": "The same as :empty, except that it additionally matches elements that only contain code points affected by whitespace processing. Standardized as :blank."
        },
        {
            "name": ":-moz-placeholder",
            "browsers": [
                "FF4"
            ],
            "description": "Deprecated. Represents placeholder text in an input field. Use ::-moz-placeholder for Firefox 19+."
        },
        {
            "name": ":-moz-submit-invalid",
            "browsers": [
                "FF4"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:-moz-submit-invalid"
                }
            ],
            "description": "Non-standard. Represents any submit button when the contents of the associated form are not valid."
        },
        {
            "name": ":-moz-suppressed",
            "browsers": [
                "FF3"
            ],
            "description": "Non-standard. Matches elements representing images that have been blocked from loading."
        },
        {
            "name": ":-moz-ui-invalid",
            "browsers": [
                "FF4"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:-moz-ui-invalid"
                }
            ],
            "description": "Non-standard. Represents any validated form element whose value isn't valid "
        },
        {
            "name": ":-moz-ui-valid",
            "browsers": [
                "FF4"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:-moz-ui-valid"
                }
            ],
            "description": "Non-standard. Represents any validated form element whose value is valid "
        },
        {
            "name": ":-moz-user-disabled",
            "browsers": [
                "FF3"
            ],
            "description": "Non-standard. Matches elements representing images that have been disabled due to the user’s preferences."
        },
        {
            "name": ":-moz-window-inactive",
            "browsers": [
                "FF4"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:-moz-window-inactive"
                }
            ],
            "description": "Non-standard. Matches elements in an inactive window."
        },
        {
            "name": ":-ms-fullscreen",
            "browsers": [
                "IE11"
            ],
            "description": "Matches any element that has its fullscreen flag set."
        },
        {
            "name": ":-ms-input-placeholder",
            "browsers": [
                "IE10"
            ],
            "description": "Represents placeholder text in an input field. Note: for Edge use the pseudo-element ::-ms-input-placeholder. Standardized as ::placeholder."
        },
        {
            "name": ":-ms-keyboard-active",
            "browsers": [
                "IE10"
            ],
            "description": "Windows Store apps only. Applies one or more styles to an element when it has focus and the user presses the space bar."
        },
        {
            "name": ":-ms-lang()",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents an element that is in the language specified. Accepts a comma separated list of language tokens."
        },
        {
            "name": ":no-button",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to track pieces. Applies when there is no button at that end of the track."
        },
        {
            "name": ":not()",
            "browsers": [
                "E",
                "C",
                "FF1",
                "IE9",
                "O9.5",
                "S2"
            ],
            "description": "The negation pseudo-class, :not(X), is a functional notation taking a simple selector (excluding the negation pseudo-class itself) as an argument. It represents an element that is not represented by its argument."
        },
        {
            "name": ":nth-child()",
            "browsers": [
                "E",
                "C",
                "FF3.5",
                "IE9",
                "O9.5",
                "S3.1"
            ],
            "description": "Represents an element that has an+b-1 siblings before it in the document tree, for any positive integer or zero value of n, and has a parent element."
        },
        {
            "name": ":nth-last-child()",
            "browsers": [
                "E",
                "C",
                "FF3.5",
                "IE9",
                "O9.5",
                "S3.1"
            ],
            "description": "Represents an element that has an+b-1 siblings after it in the document tree, for any positive integer or zero value of n, and has a parent element."
        },
        {
            "name": ":nth-last-of-type()",
            "browsers": [
                "E",
                "C",
                "FF3.5",
                "IE9",
                "O9.5",
                "S3.1"
            ],
            "description": "Represents an element that has an+b-1 siblings with the same expanded element name after it in the document tree, for any zero or positive integer value of n, and has a parent element."
        },
        {
            "name": ":nth-of-type()",
            "browsers": [
                "E",
                "C",
                "FF3.5",
                "IE9",
                "O9.5",
                "S3.1"
            ],
            "description": "Represents an element that has an+b-1 siblings with the same expanded element name before it in the document tree, for any zero or positive integer value of n, and has a parent element."
        },
        {
            "name": ":only-child",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:only-child"
                }
            ],
            "description": "Represents an element that has a parent element and whose parent element has no other element children. Same as :first-child:last-child or :nth-child(1):nth-last-child(1), but with a lower specificity."
        },
        {
            "name": ":only-of-type",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:only-of-type"
                }
            ],
            "description": "Matches every element that is the only child of its type, of its parent. Same as :first-of-type:last-of-type or :nth-of-type(1):nth-last-of-type(1), but with a lower specificity."
        },
        {
            "name": ":optional",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:optional"
                }
            ],
            "description": "A form element is :required or :optional if a value for it is, respectively, required or optional before the form it belongs to is submitted. Elements that are not form elements are neither required nor optional."
        },
        {
            "name": ":out-of-range",
            "browsers": [
                "E13",
                "FF29",
                "S5.1",
                "C10",
                "O11"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:out-of-range"
                }
            ],
            "description": "Used in conjunction with the min and max attributes, whether on a range input, a number field, or any other types that accept those attributes."
        },
        {
            "name": ":past",
            "browsers": [
                "C",
                "O16",
                "S6"
            ],
            "description": "Represents any element that is defined to occur entirely prior to a :current element."
        },
        {
            "name": ":read-only",
            "browsers": [
                "E13",
                "FF78",
                "S4",
                "C1",
                "O9"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:read-only"
                }
            ],
            "description": "An element whose contents are not user-alterable is :read-only. However, elements whose contents are user-alterable (such as text input fields) are considered to be in a :read-write state. In typical documents, most elements are :read-only."
        },
        {
            "name": ":read-write",
            "browsers": [
                "E13",
                "FF78",
                "S4",
                "C1",
                "O9"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:read-write"
                }
            ],
            "description": "An element whose contents are not user-alterable is :read-only. However, elements whose contents are user-alterable (such as text input fields) are considered to be in a :read-write state. In typical documents, most elements are :read-only."
        },
        {
            "name": ":required",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:required"
                }
            ],
            "description": "A form element is :required or :optional if a value for it is, respectively, required or optional before the form it belongs to is submitted. Elements that are not form elements are neither required nor optional."
        },
        {
            "name": ":right",
            "browsers": [
                "E12",
                "S5.1",
                "C6",
                "IE8",
                "O9.2"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:right"
                }
            ],
            "description": "When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context."
        },
        {
            "name": ":root",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:root"
                }
            ],
            "description": "Represents an element that is the root of the document. In HTML 4, this is always the HTML element."
        },
        {
            "name": ":scope",
            "browsers": [
                "E79",
                "FF32",
                "S7",
                "C27",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:scope"
                }
            ],
            "description": "Represents any element that is in the contextual reference element set."
        },
        {
            "name": ":single-button",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to buttons and track pieces. Applies when both buttons are displayed separately at either end of the scrollbar."
        },
        {
            "name": ":start",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to buttons and track pieces. Indicates whether the object is placed before the thumb."
        },
        {
            "name": ":target",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:target"
                }
            ],
            "description": "Some URIs refer to a location within a resource. This kind of URI ends with a 'number sign' (#) followed by an anchor identifier (called the fragment identifier)."
        },
        {
            "name": ":valid",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:valid"
                }
            ],
            "description": "An element is :valid or :invalid when it is, respectively, valid or invalid with respect to data validity semantics defined by a different specification."
        },
        {
            "name": ":vertical",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to any scrollbar pieces that have a vertical orientation."
        },
        {
            "name": ":visited",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:visited"
                }
            ],
            "description": "Applies once the link has been visited by the user."
        },
        {
            "name": ":-webkit-any()",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Represents an element that is represented by the selector list passed as its argument. Standardized as :matches()."
        },
        {
            "name": ":-webkit-full-screen",
            "browsers": [
                "C",
                "S6"
            ],
            "description": "Matches any element that has its fullscreen flag set. Standardized as :fullscreen."
        },
        {
            "name": ":window-inactive",
            "browsers": [
                "C",
                "S3"
            ],
            "description": "Non-standard. Applies to all scrollbar pieces. Indicates whether or not the window containing the scrollbar is currently active."
        },
        {
            "name": ":blank",
            "status": "experimental",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:blank"
                }
            ],
            "description": "The :blank CSS pseudo-class selects empty user input elements (eg. <input> or <textarea>)."
        },
        {
            "name": ":defined",
            "status": "experimental",
            "browsers": [
                "E79",
                "FF63",
                "S10",
                "C54",
                "O41"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:defined"
                }
            ],
            "description": "The :defined CSS pseudo-class represents any element that has been defined. This includes any standard element built in to the browser, and custom elements that have been successfully defined (i.e. with the CustomElementRegistry.define() method)."
        },
        {
            "name": ":dir",
            "browsers": [
                "FF49"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:dir"
                }
            ],
            "description": "The :dir() CSS pseudo-class matches elements based on the directionality of the text contained in them."
        },
        {
            "name": ":focus-visible",
            "status": "experimental",
            "browsers": [
                "E79",
                "FF4",
                "C67",
                "O54"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:focus-visible"
                }
            ],
            "description": "The :focus-visible pseudo-class applies while an element matches the :focus pseudo-class and the UA determines via heuristics that the focus should be made evident on the element."
        },
        {
            "name": ":focus-within",
            "status": "experimental",
            "browsers": [
                "E79",
                "FF52",
                "S10.1",
                "C60",
                "O47"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:focus-within"
                }
            ],
            "description": "The :focus-within pseudo-class applies to any element for which the :focus pseudo class applies as well as to an element whose descendant in the flat tree (including non-element nodes, such as text nodes) matches the conditions for matching :focus."
        },
        {
            "name": ":has",
            "status": "experimental",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:has"
                }
            ],
            "description": ":The :has() CSS pseudo-class represents an element if any of the selectors passed as parameters (relative to the :scope of the given element), match at least one element."
        },
        {
            "name": ":is",
            "status": "experimental",
            "browsers": [
                "E79",
                "FF78",
                "S9",
                "C68",
                "O55"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:is"
                }
            ],
            "description": "The :is() CSS pseudo-class function takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list. This is useful for writing large selectors in a more compact form."
        },
        {
            "name": ":placeholder-shown",
            "status": "experimental",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:placeholder-shown"
                }
            ],
            "description": "The :placeholder-shown CSS pseudo-class represents any <input> or <textarea> element that is currently displaying placeholder text."
        },
        {
            "name": ":where",
            "status": "experimental",
            "browsers": [
                "FF78",
                "C72"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:where"
                }
            ],
            "description": "The :where() CSS pseudo-class function takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list."
        }
    ],
    "pseudoElements": [
        {
            "name": "::after",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::after"
                }
            ],
            "description": "Represents a styleable child pseudo-element immediately after the originating element’s actual content."
        },
        {
            "name": "::backdrop",
            "browsers": [
                "E12",
                "FF47",
                "C37",
                "IE11",
                "O24"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::backdrop"
                }
            ],
            "description": "Used to create a backdrop that hides the underlying document for an element in a top layer (such as an element that is displayed fullscreen)."
        },
        {
            "name": "::before",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::before"
                }
            ],
            "description": "Represents a styleable child pseudo-element immediately before the originating element’s actual content."
        },
        {
            "name": "::content",
            "browsers": [
                "C35",
                "O22"
            ],
            "description": "Deprecated. Matches the distribution list itself, on elements that have one. Use ::slotted for forward compatibility."
        },
        {
            "name": "::cue",
            "browsers": [
                "E79",
                "FF55",
                "S6.1",
                "C26",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::cue"
                }
            ]
        },
        {
            "name": "::cue()",
            "browsers": [
                "C",
                "O16",
                "S6"
            ]
        },
        {
            "name": "::cue-region",
            "browsers": [
                "C",
                "O16",
                "S6"
            ]
        },
        {
            "name": "::cue-region()",
            "browsers": [
                "C",
                "O16",
                "S6"
            ]
        },
        {
            "name": "::first-letter",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::first-letter"
                }
            ],
            "description": "Represents the first letter of an element, if it is not preceded by any other content (such as images or inline tables) on its line."
        },
        {
            "name": "::first-line",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::first-line"
                }
            ],
            "description": "Describes the contents of the first formatted line of its originating element."
        },
        {
            "name": "::-moz-focus-inner",
            "browsers": [
                "FF4"
            ]
        },
        {
            "name": "::-moz-focus-outer",
            "browsers": [
                "FF4"
            ]
        },
        {
            "name": "::-moz-list-bullet",
            "browsers": [
                "FF1"
            ],
            "description": "Used to style the bullet of a list element. Similar to the standardized ::marker."
        },
        {
            "name": "::-moz-list-number",
            "browsers": [
                "FF1"
            ],
            "description": "Used to style the numbers of a list element. Similar to the standardized ::marker."
        },
        {
            "name": "::-moz-placeholder",
            "browsers": [
                "FF19"
            ],
            "description": "Represents placeholder text in an input field"
        },
        {
            "name": "::-moz-progress-bar",
            "browsers": [
                "FF9"
            ],
            "description": "Represents the bar portion of a progress bar."
        },
        {
            "name": "::-moz-selection",
            "browsers": [
                "FF1"
            ],
            "description": "Represents the portion of a document that has been highlighted by the user."
        },
        {
            "name": "::-ms-backdrop",
            "browsers": [
                "IE11"
            ],
            "description": "Used to create a backdrop that hides the underlying document for an element in a top layer (such as an element that is displayed fullscreen)."
        },
        {
            "name": "::-ms-browse",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the browse button of an input type=file control."
        },
        {
            "name": "::-ms-check",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the check of a checkbox or radio button input control."
        },
        {
            "name": "::-ms-clear",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the clear button of a text input control"
        },
        {
            "name": "::-ms-expand",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the drop-down button of a select control."
        },
        {
            "name": "::-ms-fill",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the bar portion of a progress bar."
        },
        {
            "name": "::-ms-fill-lower",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the portion of the slider track from its smallest value up to the value currently selected by the thumb. In a left-to-right layout, this is the portion of the slider track to the left of the thumb."
        },
        {
            "name": "::-ms-fill-upper",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the portion of the slider track from the value currently selected by the thumb up to the slider's largest value. In a left-to-right layout, this is the portion of the slider track to the right of the thumb."
        },
        {
            "name": "::-ms-reveal",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the password reveal button of an input type=password control."
        },
        {
            "name": "::-ms-thumb",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the portion of range input control (also known as a slider control) that the user drags."
        },
        {
            "name": "::-ms-ticks-after",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the tick marks of a slider that begin just after the thumb and continue up to the slider's largest value. In a left-to-right layout, these are the ticks to the right of the thumb."
        },
        {
            "name": "::-ms-ticks-before",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the tick marks of a slider that represent its smallest values up to the value currently selected by the thumb. In a left-to-right layout, these are the ticks to the left of the thumb."
        },
        {
            "name": "::-ms-tooltip",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the tooltip of a slider (input type=range)."
        },
        {
            "name": "::-ms-track",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the track of a slider."
        },
        {
            "name": "::-ms-value",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the content of a text or password input control, or a select control."
        },
        {
            "name": "::selection",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::selection"
                }
            ],
            "description": "Represents the portion of a document that has been highlighted by the user."
        },
        {
            "name": "::shadow",
            "browsers": [
                "C35",
                "O22"
            ],
            "description": "Matches the shadow root if an element has a shadow tree."
        },
        {
            "name": "::-webkit-file-upload-button",
            "browsers": [
                "E79",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-file-upload-button"
                }
            ]
        },
        {
            "name": "::-webkit-inner-spin-button",
            "browsers": [
                "E79",
                "S5",
                "C6",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-inner-spin-button"
                }
            ]
        },
        {
            "name": "::-webkit-input-placeholder",
            "browsers": [
                "C",
                "S4"
            ]
        },
        {
            "name": "::-webkit-keygen-select",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-meter-bar",
            "browsers": [
                "E79",
                "S5.1",
                "C12",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-bar"
                }
            ]
        },
        {
            "name": "::-webkit-meter-even-less-good-value",
            "browsers": [
                "E79",
                "S5.1",
                "C12",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-even-less-good-value"
                }
            ]
        },
        {
            "name": "::-webkit-meter-optimum-value",
            "browsers": [
                "E79",
                "S5.1",
                "C12",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-optimum-value"
                }
            ]
        },
        {
            "name": "::-webkit-meter-suboptimum-value",
            "browsers": [
                "E79",
                "S5.1",
                "C12",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-suboptimum-value"
                }
            ]
        },
        {
            "name": "::-webkit-outer-spin-button",
            "browsers": [
                "S5",
                "C6"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-outer-spin-button"
                }
            ]
        },
        {
            "name": "::-webkit-progress-bar",
            "browsers": [
                "E79",
                "S6.1",
                "C25",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-progress-bar"
                }
            ]
        },
        {
            "name": "::-webkit-progress-inner-element",
            "browsers": [
                "E79",
                "S6.1",
                "C23",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-progress-inner-element"
                }
            ]
        },
        {
            "name": "::-webkit-progress-value",
            "browsers": [
                "E79",
                "S6.1",
                "C25",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-progress-value"
                }
            ]
        },
        {
            "name": "::-webkit-resizer",
            "browsers": [
                "E79",
                "S4",
                "C2",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
                }
            ]
        },
        {
            "name": "::-webkit-scrollbar",
            "browsers": [
                "E79",
                "S4",
                "C2",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
                }
            ]
        },
        {
            "name": "::-webkit-scrollbar-button",
            "browsers": [
                "E79",
                "S4",
                "C2",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
                }
            ]
        },
        {
            "name": "::-webkit-scrollbar-corner",
            "browsers": [
                "E79",
                "S4",
                "C2",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
                }
            ]
        },
        {
            "name": "::-webkit-scrollbar-thumb",
            "browsers": [
                "E79",
                "S4",
                "C2",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
                }
            ]
        },
        {
            "name": "::-webkit-scrollbar-track",
            "browsers": [
                "E79",
                "S4",
                "C2",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
                }
            ]
        },
        {
            "name": "::-webkit-scrollbar-track-piece",
            "browsers": [
                "E79",
                "S4",
                "C2",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
                }
            ]
        },
        {
            "name": "::-webkit-search-cancel-button",
            "browsers": [
                "E79",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-search-cancel-button"
                }
            ]
        },
        {
            "name": "::-webkit-search-decoration",
            "browsers": [
                "C",
                "S4"
            ]
        },
        {
            "name": "::-webkit-search-results-button",
            "browsers": [
                "E79",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-search-results-button"
                }
            ]
        },
        {
            "name": "::-webkit-search-results-decoration",
            "browsers": [
                "C",
                "S4"
            ]
        },
        {
            "name": "::-webkit-slider-runnable-track",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-slider-thumb",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-textfield-decoration-container",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-validation-bubble",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-validation-bubble-arrow",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-validation-bubble-arrow-clipper",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-validation-bubble-heading",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-validation-bubble-message",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-validation-bubble-text-block",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-moz-range-progress",
            "status": "nonstandard",
            "browsers": [
                "FF22"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-moz-range-progress"
                }
            ],
            "description": "The ::-moz-range-progress CSS pseudo-element is a Mozilla extension that represents the lower portion of the track (i.e., groove) in which the indicator slides in an <input> of type=\"range\". This portion corresponds to values lower than the value currently selected by the thumb (i.e., virtual knob)."
        },
        {
            "name": "::-moz-range-thumb",
            "status": "nonstandard",
            "browsers": [
                "FF21"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-moz-range-thumb"
                }
            ],
            "description": "The ::-moz-range-thumb CSS pseudo-element is a Mozilla extension that represents the thumb (i.e., virtual knob) of an <input> of type=\"range\". The user can move the thumb along the input's track to alter its numerical value."
        },
        {
            "name": "::-moz-range-track",
            "status": "nonstandard",
            "browsers": [
                "FF21"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-moz-range-track"
                }
            ],
            "description": "The ::-moz-range-track CSS pseudo-element is a Mozilla extension that represents the track (i.e., groove) in which the indicator slides in an <input> of type=\"range\"."
        },
        {
            "name": "::-webkit-progress-inner-value",
            "status": "nonstandard",
            "description": "The ::-webkit-progress-value CSS pseudo-element represents the filled-in portion of the bar of a <progress> element. It is a child of the ::-webkit-progress-bar pseudo-element.\n\nIn order to let ::-webkit-progress-value take effect, -webkit-appearance needs to be set to none on the <progress> element."
        },
        {
            "name": "::grammar-error",
            "status": "experimental",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::grammar-error"
                }
            ],
            "description": "The ::grammar-error CSS pseudo-element represents a text segment which the user agent has flagged as grammatically incorrect."
        },
        {
            "name": "::marker",
            "browsers": [
                "E80",
                "FF68",
                "S11.1",
                "C80"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::marker"
                }
            ],
            "description": "The ::marker CSS pseudo-element selects the marker box of a list item, which typically contains a bullet or number. It works on any element or pseudo-element set to display: list-item, such as the <li> and <summary> elements."
        },
        {
            "name": "::part",
            "status": "experimental",
            "browsers": [
                "E79",
                "FF72",
                "S13.1",
                "C73",
                "O60"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::part"
                }
            ],
            "description": "The ::part CSS pseudo-element represents any element within a shadow tree that has a matching part attribute."
        },
        {
            "name": "::placeholder",
            "browsers": [
                "E12",
                "FF51",
                "S10.1",
                "C57",
                "O44"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::placeholder"
                }
            ],
            "description": "The ::placeholder CSS pseudo-element represents the placeholder text of a form element."
        },
        {
            "name": "::slotted",
            "browsers": [
                "E79",
                "FF63",
                "S10",
                "C50",
                "O37"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::slotted"
                }
            ],
            "description": "The :slotted() CSS pseudo-element represents any element that has been placed into a slot inside an HTML template."
        },
        {
            "name": "::spelling-error",
            "status": "experimental",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::spelling-error"
                }
            ],
            "description": "The ::spelling-error CSS pseudo-element represents a text segment which the user agent has flagged as incorrectly spelled."
        }
    ]
};


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/builtinData.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/builtinData.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "positionKeywords": () => /* binding */ positionKeywords,
/* harmony export */   "repeatStyleKeywords": () => /* binding */ repeatStyleKeywords,
/* harmony export */   "lineStyleKeywords": () => /* binding */ lineStyleKeywords,
/* harmony export */   "lineWidthKeywords": () => /* binding */ lineWidthKeywords,
/* harmony export */   "boxKeywords": () => /* binding */ boxKeywords,
/* harmony export */   "geometryBoxKeywords": () => /* binding */ geometryBoxKeywords,
/* harmony export */   "cssWideKeywords": () => /* binding */ cssWideKeywords,
/* harmony export */   "imageFunctions": () => /* binding */ imageFunctions,
/* harmony export */   "transitionTimingFunctions": () => /* binding */ transitionTimingFunctions,
/* harmony export */   "basicShapeFunctions": () => /* binding */ basicShapeFunctions,
/* harmony export */   "units": () => /* binding */ units,
/* harmony export */   "html5Tags": () => /* binding */ html5Tags,
/* harmony export */   "svgElements": () => /* binding */ svgElements,
/* harmony export */   "pageBoxDirectives": () => /* binding */ pageBoxDirectives
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var positionKeywords = {
    'bottom': 'Computes to ‘100%’ for the vertical position if one or two values are given, otherwise specifies the bottom edge as the origin for the next offset.',
    'center': 'Computes to ‘50%’ (‘left 50%’) for the horizontal position if the horizontal position is not otherwise specified, or ‘50%’ (‘top 50%’) for the vertical position if it is.',
    'left': 'Computes to ‘0%’ for the horizontal position if one or two values are given, otherwise specifies the left edge as the origin for the next offset.',
    'right': 'Computes to ‘100%’ for the horizontal position if one or two values are given, otherwise specifies the right edge as the origin for the next offset.',
    'top': 'Computes to ‘0%’ for the vertical position if one or two values are given, otherwise specifies the top edge as the origin for the next offset.'
};
var repeatStyleKeywords = {
    'no-repeat': 'Placed once and not repeated in this direction.',
    'repeat': 'Repeated in this direction as often as needed to cover the background painting area.',
    'repeat-x': 'Computes to ‘repeat no-repeat’.',
    'repeat-y': 'Computes to ‘no-repeat repeat’.',
    'round': 'Repeated as often as will fit within the background positioning area. If it doesn’t fit a whole number of times, it is rescaled so that it does.',
    'space': 'Repeated as often as will fit within the background positioning area without being clipped and then the images are spaced out to fill the area.'
};
var lineStyleKeywords = {
    'dashed': 'A series of square-ended dashes.',
    'dotted': 'A series of round dots.',
    'double': 'Two parallel solid lines with some space between them.',
    'groove': 'Looks as if it were carved in the canvas.',
    'hidden': 'Same as ‘none’, but has different behavior in the border conflict resolution rules for border-collapsed tables.',
    'inset': 'Looks as if the content on the inside of the border is sunken into the canvas.',
    'none': 'No border. Color and width are ignored.',
    'outset': 'Looks as if the content on the inside of the border is coming out of the canvas.',
    'ridge': 'Looks as if it were coming out of the canvas.',
    'solid': 'A single line segment.'
};
var lineWidthKeywords = ['medium', 'thick', 'thin'];
var boxKeywords = {
    'border-box': 'The background is painted within (clipped to) the border box.',
    'content-box': 'The background is painted within (clipped to) the content box.',
    'padding-box': 'The background is painted within (clipped to) the padding box.'
};
var geometryBoxKeywords = {
    'margin-box': 'Uses the margin box as reference box.',
    'fill-box': 'Uses the object bounding box as reference box.',
    'stroke-box': 'Uses the stroke bounding box as reference box.',
    'view-box': 'Uses the nearest SVG viewport as reference box.'
};
var cssWideKeywords = {
    'initial': 'Represents the value specified as the property’s initial value.',
    'inherit': 'Represents the computed value of the property on the element’s parent.',
    'unset': 'Acts as either `inherit` or `initial`, depending on whether the property is inherited or not.'
};
var imageFunctions = {
    'url()': 'Reference an image file by URL',
    'image()': 'Provide image fallbacks and annotations.',
    '-webkit-image-set()': 'Provide multiple resolutions. Remember to use unprefixed image-set() in addition.',
    'image-set()': 'Provide multiple resolutions of an image and const the UA decide which is most appropriate in a given situation.',
    '-moz-element()': 'Use an element in the document as an image. Remember to use unprefixed element() in addition.',
    'element()': 'Use an element in the document as an image.',
    'cross-fade()': 'Indicates the two images to be combined and how far along in the transition the combination is.',
    '-webkit-gradient()': 'Deprecated. Use modern linear-gradient() or radial-gradient() instead.',
    '-webkit-linear-gradient()': 'Linear gradient. Remember to use unprefixed version in addition.',
    '-moz-linear-gradient()': 'Linear gradient. Remember to use unprefixed version in addition.',
    '-o-linear-gradient()': 'Linear gradient. Remember to use unprefixed version in addition.',
    'linear-gradient()': 'A linear gradient is created by specifying a straight gradient line, and then several colors placed along that line.',
    '-webkit-repeating-linear-gradient()': 'Repeating Linear gradient. Remember to use unprefixed version in addition.',
    '-moz-repeating-linear-gradient()': 'Repeating Linear gradient. Remember to use unprefixed version in addition.',
    '-o-repeating-linear-gradient()': 'Repeating Linear gradient. Remember to use unprefixed version in addition.',
    'repeating-linear-gradient()': 'Same as linear-gradient, except the color-stops are repeated infinitely in both directions, with their positions shifted by multiples of the difference between the last specified color-stop’s position and the first specified color-stop’s position.',
    '-webkit-radial-gradient()': 'Radial gradient. Remember to use unprefixed version in addition.',
    '-moz-radial-gradient()': 'Radial gradient. Remember to use unprefixed version in addition.',
    'radial-gradient()': 'Colors emerge from a single point and smoothly spread outward in a circular or elliptical shape.',
    '-webkit-repeating-radial-gradient()': 'Repeating radial gradient. Remember to use unprefixed version in addition.',
    '-moz-repeating-radial-gradient()': 'Repeating radial gradient. Remember to use unprefixed version in addition.',
    'repeating-radial-gradient()': 'Same as radial-gradient, except the color-stops are repeated infinitely in both directions, with their positions shifted by multiples of the difference between the last specified color-stop’s position and the first specified color-stop’s position.'
};
var transitionTimingFunctions = {
    'ease': 'Equivalent to cubic-bezier(0.25, 0.1, 0.25, 1.0).',
    'ease-in': 'Equivalent to cubic-bezier(0.42, 0, 1.0, 1.0).',
    'ease-in-out': 'Equivalent to cubic-bezier(0.42, 0, 0.58, 1.0).',
    'ease-out': 'Equivalent to cubic-bezier(0, 0, 0.58, 1.0).',
    'linear': 'Equivalent to cubic-bezier(0.0, 0.0, 1.0, 1.0).',
    'step-end': 'Equivalent to steps(1, end).',
    'step-start': 'Equivalent to steps(1, start).',
    'steps()': 'The first parameter specifies the number of intervals in the function. The second parameter, which is optional, is either the value “start” or “end”.',
    'cubic-bezier()': 'Specifies a cubic-bezier curve. The four values specify points P1 and P2  of the curve as (x1, y1, x2, y2).',
    'cubic-bezier(0.6, -0.28, 0.735, 0.045)': 'Ease-in Back. Overshoots.',
    'cubic-bezier(0.68, -0.55, 0.265, 1.55)': 'Ease-in-out Back. Overshoots.',
    'cubic-bezier(0.175, 0.885, 0.32, 1.275)': 'Ease-out Back. Overshoots.',
    'cubic-bezier(0.6, 0.04, 0.98, 0.335)': 'Ease-in Circular. Based on half circle.',
    'cubic-bezier(0.785, 0.135, 0.15, 0.86)': 'Ease-in-out Circular. Based on half circle.',
    'cubic-bezier(0.075, 0.82, 0.165, 1)': 'Ease-out Circular. Based on half circle.',
    'cubic-bezier(0.55, 0.055, 0.675, 0.19)': 'Ease-in Cubic. Based on power of three.',
    'cubic-bezier(0.645, 0.045, 0.355, 1)': 'Ease-in-out Cubic. Based on power of three.',
    'cubic-bezier(0.215, 0.610, 0.355, 1)': 'Ease-out Cubic. Based on power of three.',
    'cubic-bezier(0.95, 0.05, 0.795, 0.035)': 'Ease-in Exponential. Based on two to the power ten.',
    'cubic-bezier(1, 0, 0, 1)': 'Ease-in-out Exponential. Based on two to the power ten.',
    'cubic-bezier(0.19, 1, 0.22, 1)': 'Ease-out Exponential. Based on two to the power ten.',
    'cubic-bezier(0.47, 0, 0.745, 0.715)': 'Ease-in Sine.',
    'cubic-bezier(0.445, 0.05, 0.55, 0.95)': 'Ease-in-out Sine.',
    'cubic-bezier(0.39, 0.575, 0.565, 1)': 'Ease-out Sine.',
    'cubic-bezier(0.55, 0.085, 0.68, 0.53)': 'Ease-in Quadratic. Based on power of two.',
    'cubic-bezier(0.455, 0.03, 0.515, 0.955)': 'Ease-in-out Quadratic. Based on power of two.',
    'cubic-bezier(0.25, 0.46, 0.45, 0.94)': 'Ease-out Quadratic. Based on power of two.',
    'cubic-bezier(0.895, 0.03, 0.685, 0.22)': 'Ease-in Quartic. Based on power of four.',
    'cubic-bezier(0.77, 0, 0.175, 1)': 'Ease-in-out Quartic. Based on power of four.',
    'cubic-bezier(0.165, 0.84, 0.44, 1)': 'Ease-out Quartic. Based on power of four.',
    'cubic-bezier(0.755, 0.05, 0.855, 0.06)': 'Ease-in Quintic. Based on power of five.',
    'cubic-bezier(0.86, 0, 0.07, 1)': 'Ease-in-out Quintic. Based on power of five.',
    'cubic-bezier(0.23, 1, 0.320, 1)': 'Ease-out Quintic. Based on power of five.'
};
var basicShapeFunctions = {
    'circle()': 'Defines a circle.',
    'ellipse()': 'Defines an ellipse.',
    'inset()': 'Defines an inset rectangle.',
    'polygon()': 'Defines a polygon.'
};
var units = {
    'length': ['em', 'rem', 'ex', 'px', 'cm', 'mm', 'in', 'pt', 'pc', 'ch', 'vw', 'vh', 'vmin', 'vmax'],
    'angle': ['deg', 'rad', 'grad', 'turn'],
    'time': ['ms', 's'],
    'frequency': ['Hz', 'kHz'],
    'resolution': ['dpi', 'dpcm', 'dppx'],
    'percentage': ['%', 'fr']
};
var html5Tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption',
    'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer',
    'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link',
    'main', 'map', 'mark', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q',
    'rb', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td',
    'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'const', 'video', 'wbr'];
var svgElements = ['circle', 'clipPath', 'cursor', 'defs', 'desc', 'ellipse', 'feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting',
    'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology',
    'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence', 'filter', 'foreignObject', 'g', 'hatch', 'hatchpath', 'image', 'line', 'linearGradient',
    'marker', 'mask', 'mesh', 'meshpatch', 'meshrow', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'set', 'solidcolor', 'stop', 'svg', 'switch',
    'symbol', 'text', 'textPath', 'tspan', 'use', 'view'];
var pageBoxDirectives = [
    '@bottom-center', '@bottom-left', '@bottom-left-corner', '@bottom-right', '@bottom-right-corner',
    '@left-bottom', '@left-middle', '@left-top', '@right-bottom', '@right-middle', '@right-top',
    '@top-center', '@top-left', '@top-left-corner', '@top-right', '@top-right-corner'
];


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/colors.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/colors.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "colorFunctions": () => /* binding */ colorFunctions,
/* harmony export */   "colors": () => /* binding */ colors,
/* harmony export */   "colorKeywords": () => /* binding */ colorKeywords,
/* harmony export */   "isColorConstructor": () => /* binding */ isColorConstructor,
/* harmony export */   "isColorValue": () => /* binding */ isColorValue,
/* harmony export */   "hexDigit": () => /* binding */ hexDigit,
/* harmony export */   "colorFromHex": () => /* binding */ colorFromHex,
/* harmony export */   "colorFrom256RGB": () => /* binding */ colorFrom256RGB,
/* harmony export */   "colorFromHSL": () => /* binding */ colorFromHSL,
/* harmony export */   "hslFromColor": () => /* binding */ hslFromColor,
/* harmony export */   "getColorValue": () => /* binding */ getColorValue
/* harmony export */ });
/* harmony import */ var _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../fillers/vscode-nls.js */ "./node_modules/monaco-editor/esm/vs/language/css/fillers/vscode-nls.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


var localize = _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_1__.loadMessageBundle();
var colorFunctions = [
    { func: 'rgb($red, $green, $blue)', desc: localize('css.builtin.rgb', 'Creates a Color from red, green, and blue values.') },
    { func: 'rgba($red, $green, $blue, $alpha)', desc: localize('css.builtin.rgba', 'Creates a Color from red, green, blue, and alpha values.') },
    { func: 'hsl($hue, $saturation, $lightness)', desc: localize('css.builtin.hsl', 'Creates a Color from hue, saturation, and lightness values.') },
    { func: 'hsla($hue, $saturation, $lightness, $alpha)', desc: localize('css.builtin.hsla', 'Creates a Color from hue, saturation, lightness, and alpha values.') }
];
var colors = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgrey: '#a9a9a9',
    darkgreen: '#006400',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    gold: '#ffd700',
    goldenrod: '#daa520',
    gray: '#808080',
    grey: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    lavender: '#e6e6fa',
    lavenderblush: '#fff0f5',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgrey: '#d3d3d3',
    lightgreen: '#90ee90',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370d8',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#d87093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    red: '#ff0000',
    rebeccapurple: '#663399',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32'
};
var colorKeywords = {
    'currentColor': 'The value of the \'color\' property. The computed value of the \'currentColor\' keyword is the computed value of the \'color\' property. If the \'currentColor\' keyword is set on the \'color\' property itself, it is treated as \'color:inherit\' at parse time.',
    'transparent': 'Fully transparent. This keyword can be considered a shorthand for rgba(0,0,0,0) which is its computed value.',
};
function getNumericValue(node, factor) {
    var val = node.getText();
    var m = val.match(/^([-+]?[0-9]*\.?[0-9]+)(%?)$/);
    if (m) {
        if (m[2]) {
            factor = 100.0;
        }
        var result = parseFloat(m[1]) / factor;
        if (result >= 0 && result <= 1) {
            return result;
        }
    }
    throw new Error();
}
function getAngle(node) {
    var val = node.getText();
    var m = val.match(/^([-+]?[0-9]*\.?[0-9]+)(deg)?$/);
    if (m) {
        return parseFloat(val) % 360;
    }
    throw new Error();
}
function isColorConstructor(node) {
    var name = node.getName();
    if (!name) {
        return false;
    }
    return /^(rgb|rgba|hsl|hsla)$/gi.test(name);
}
/**
 * Returns true if the node is a color value - either
 * defined a hex number, as rgb or rgba function, or
 * as color name.
 */
function isColorValue(node) {
    if (node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.HexColorValue) {
        return true;
    }
    else if (node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Function) {
        return isColorConstructor(node);
    }
    else if (node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Identifier) {
        if (node.parent && node.parent.type !== _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Term) {
            return false;
        }
        var candidateColor = node.getText().toLowerCase();
        if (candidateColor === 'none') {
            return false;
        }
        if (colors[candidateColor]) {
            return true;
        }
    }
    return false;
}
var Digit0 = 48;
var Digit9 = 57;
var A = 65;
var F = 70;
var a = 97;
var f = 102;
function hexDigit(charCode) {
    if (charCode < Digit0) {
        return 0;
    }
    if (charCode <= Digit9) {
        return charCode - Digit0;
    }
    if (charCode < a) {
        charCode += (a - A);
    }
    if (charCode >= a && charCode <= f) {
        return charCode - a + 10;
    }
    return 0;
}
function colorFromHex(text) {
    if (text[0] !== '#') {
        return null;
    }
    switch (text.length) {
        case 4:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,
                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,
                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,
                alpha: 1
            };
        case 5:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,
                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,
                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,
                alpha: (hexDigit(text.charCodeAt(4)) * 0x11) / 255.0,
            };
        case 7:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,
                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,
                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,
                alpha: 1
            };
        case 9:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,
                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,
                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,
                alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0
            };
    }
    return null;
}
function colorFrom256RGB(red, green, blue, alpha) {
    if (alpha === void 0) { alpha = 1.0; }
    return {
        red: red / 255.0,
        green: green / 255.0,
        blue: blue / 255.0,
        alpha: alpha
    };
}
function colorFromHSL(hue, sat, light, alpha) {
    if (alpha === void 0) { alpha = 1.0; }
    hue = hue / 60.0;
    if (sat === 0) {
        return { red: light, green: light, blue: light, alpha: alpha };
    }
    else {
        var hueToRgb = function (t1, t2, hue) {
            while (hue < 0) {
                hue += 6;
            }
            while (hue >= 6) {
                hue -= 6;
            }
            if (hue < 1) {
                return (t2 - t1) * hue + t1;
            }
            if (hue < 3) {
                return t2;
            }
            if (hue < 4) {
                return (t2 - t1) * (4 - hue) + t1;
            }
            return t1;
        };
        var t2 = light <= 0.5 ? (light * (sat + 1)) : (light + sat - (light * sat));
        var t1 = light * 2 - t2;
        return { red: hueToRgb(t1, t2, hue + 2), green: hueToRgb(t1, t2, hue), blue: hueToRgb(t1, t2, hue - 2), alpha: alpha };
    }
}
function hslFromColor(rgba) {
    var r = rgba.red;
    var g = rgba.green;
    var b = rgba.blue;
    var a = rgba.alpha;
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var h = 0;
    var s = 0;
    var l = (min + max) / 2;
    var chroma = max - min;
    if (chroma > 0) {
        s = Math.min((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))), 1);
        switch (max) {
            case r:
                h = (g - b) / chroma + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / chroma + 2;
                break;
            case b:
                h = (r - g) / chroma + 4;
                break;
        }
        h *= 60;
        h = Math.round(h);
    }
    return { h: h, s: s, l: l, a: a };
}
function getColorValue(node) {
    if (node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.HexColorValue) {
        var text = node.getText();
        return colorFromHex(text);
    }
    else if (node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Function) {
        var functionNode = node;
        var name = functionNode.getName();
        var colorValues = functionNode.getArguments().getChildren();
        if (!name || colorValues.length < 3 || colorValues.length > 4) {
            return null;
        }
        try {
            var alpha = colorValues.length === 4 ? getNumericValue(colorValues[3], 1) : 1;
            if (name === 'rgb' || name === 'rgba') {
                return {
                    red: getNumericValue(colorValues[0], 255.0),
                    green: getNumericValue(colorValues[1], 255.0),
                    blue: getNumericValue(colorValues[2], 255.0),
                    alpha: alpha
                };
            }
            else if (name === 'hsl' || name === 'hsla') {
                var h = getAngle(colorValues[0]);
                var s = getNumericValue(colorValues[1], 100.0);
                var l = getNumericValue(colorValues[2], 100.0);
                return colorFromHSL(h, s, l, alpha);
            }
        }
        catch (e) {
            // parse error on numeric value
            return null;
        }
    }
    else if (node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Identifier) {
        if (node.parent && node.parent.type !== _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Term) {
            return null;
        }
        var term = node.parent;
        if (term && term.parent && term.parent.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.BinaryExpression) {
            var expression = term.parent;
            if (expression.parent && expression.parent.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.ListEntry && expression.parent.key === expression) {
                return null;
            }
        }
        var candidateColor = node.getText().toLowerCase();
        if (candidateColor === 'none') {
            return null;
        }
        var colorHex = colors[candidateColor];
        if (colorHex) {
            return colorFromHex(colorHex);
        }
    }
    return null;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/dataManager.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/dataManager.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSDataManager": () => /* binding */ CSSDataManager
/* harmony export */ });
/* harmony import */ var _utils_objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/objects.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/objects.js");
/* harmony import */ var _data_webCustomData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/webCustomData.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/data/webCustomData.js");
/* harmony import */ var _dataProvider_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataProvider.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/dataProvider.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/




var CSSDataManager = /** @class */ (function () {
    function CSSDataManager(options) {
        this.dataProviders = [];
        this._propertySet = {};
        this._atDirectiveSet = {};
        this._pseudoClassSet = {};
        this._pseudoElementSet = {};
        this._properties = [];
        this._atDirectives = [];
        this._pseudoClasses = [];
        this._pseudoElements = [];
        this.setDataProviders((options === null || options === void 0 ? void 0 : options.useDefaultDataProvider) !== false, (options === null || options === void 0 ? void 0 : options.customDataProviders) || []);
    }
    CSSDataManager.prototype.setDataProviders = function (builtIn, providers) {
        var _a;
        this.dataProviders = [];
        if (builtIn) {
            this.dataProviders.push(new _dataProvider_js__WEBPACK_IMPORTED_MODULE_2__.CSSDataProvider(_data_webCustomData_js__WEBPACK_IMPORTED_MODULE_1__.cssData));
        }
        (_a = this.dataProviders).push.apply(_a, providers);
        this.collectData();
    };
    /**
     * Collect all data  & handle duplicates
     */
    CSSDataManager.prototype.collectData = function () {
        var _this = this;
        this._propertySet = {};
        this._atDirectiveSet = {};
        this._pseudoClassSet = {};
        this._pseudoElementSet = {};
        this.dataProviders.forEach(function (provider) {
            provider.provideProperties().forEach(function (p) {
                if (!_this._propertySet[p.name]) {
                    _this._propertySet[p.name] = p;
                }
            });
            provider.provideAtDirectives().forEach(function (p) {
                if (!_this._atDirectiveSet[p.name]) {
                    _this._atDirectiveSet[p.name] = p;
                }
            });
            provider.providePseudoClasses().forEach(function (p) {
                if (!_this._pseudoClassSet[p.name]) {
                    _this._pseudoClassSet[p.name] = p;
                }
            });
            provider.providePseudoElements().forEach(function (p) {
                if (!_this._pseudoElementSet[p.name]) {
                    _this._pseudoElementSet[p.name] = p;
                }
            });
        });
        this._properties = _utils_objects_js__WEBPACK_IMPORTED_MODULE_0__.values(this._propertySet);
        this._atDirectives = _utils_objects_js__WEBPACK_IMPORTED_MODULE_0__.values(this._atDirectiveSet);
        this._pseudoClasses = _utils_objects_js__WEBPACK_IMPORTED_MODULE_0__.values(this._pseudoClassSet);
        this._pseudoElements = _utils_objects_js__WEBPACK_IMPORTED_MODULE_0__.values(this._pseudoElementSet);
    };
    CSSDataManager.prototype.getProperty = function (name) { return this._propertySet[name]; };
    CSSDataManager.prototype.getAtDirective = function (name) { return this._atDirectiveSet[name]; };
    CSSDataManager.prototype.getPseudoClass = function (name) { return this._pseudoClassSet[name]; };
    CSSDataManager.prototype.getPseudoElement = function (name) { return this._pseudoElementSet[name]; };
    CSSDataManager.prototype.getProperties = function () {
        return this._properties;
    };
    CSSDataManager.prototype.getAtDirectives = function () {
        return this._atDirectives;
    };
    CSSDataManager.prototype.getPseudoClasses = function () {
        return this._pseudoClasses;
    };
    CSSDataManager.prototype.getPseudoElements = function () {
        return this._pseudoElements;
    };
    CSSDataManager.prototype.isKnownProperty = function (name) {
        return name.toLowerCase() in this._propertySet;
    };
    CSSDataManager.prototype.isStandardProperty = function (name) {
        return this.isKnownProperty(name) &&
            (!this._propertySet[name.toLowerCase()].status || this._propertySet[name.toLowerCase()].status === 'standard');
    };
    return CSSDataManager;
}());



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/dataProvider.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/dataProvider.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSDataProvider": () => /* binding */ CSSDataProvider
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var CSSDataProvider = /** @class */ (function () {
    /**
     * Currently, unversioned data uses the V1 implementation
     * In the future when the provider handles multiple versions of HTML custom data,
     * use the latest implementation for unversioned data
     */
    function CSSDataProvider(data) {
        this._properties = [];
        this._atDirectives = [];
        this._pseudoClasses = [];
        this._pseudoElements = [];
        this.addData(data);
    }
    CSSDataProvider.prototype.provideProperties = function () {
        return this._properties;
    };
    CSSDataProvider.prototype.provideAtDirectives = function () {
        return this._atDirectives;
    };
    CSSDataProvider.prototype.providePseudoClasses = function () {
        return this._pseudoClasses;
    };
    CSSDataProvider.prototype.providePseudoElements = function () {
        return this._pseudoElements;
    };
    CSSDataProvider.prototype.addData = function (data) {
        if (Array.isArray(data.properties)) {
            for (var _i = 0, _a = data.properties; _i < _a.length; _i++) {
                var prop = _a[_i];
                if (isPropertyData(prop)) {
                    this._properties.push(prop);
                }
            }
        }
        if (Array.isArray(data.atDirectives)) {
            for (var _b = 0, _c = data.atDirectives; _b < _c.length; _b++) {
                var prop = _c[_b];
                if (isAtDirective(prop)) {
                    this._atDirectives.push(prop);
                }
            }
        }
        if (Array.isArray(data.pseudoClasses)) {
            for (var _d = 0, _e = data.pseudoClasses; _d < _e.length; _d++) {
                var prop = _e[_d];
                if (isPseudoClassData(prop)) {
                    this._pseudoClasses.push(prop);
                }
            }
        }
        if (Array.isArray(data.pseudoElements)) {
            for (var _f = 0, _g = data.pseudoElements; _f < _g.length; _f++) {
                var prop = _g[_f];
                if (isPseudoElementData(prop)) {
                    this._pseudoElements.push(prop);
                }
            }
        }
    };
    return CSSDataProvider;
}());

function isPropertyData(d) {
    return typeof d.name === 'string';
}
function isAtDirective(d) {
    return typeof d.name === 'string';
}
function isPseudoClassData(d) {
    return typeof d.name === 'string';
}
function isPseudoElementData(d) {
    return typeof d.name === 'string';
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/entry.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/entry.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "browserNames": () => /* binding */ browserNames,
/* harmony export */   "getEntryDescription": () => /* binding */ getEntryDescription,
/* harmony export */   "textToMarkedString": () => /* binding */ textToMarkedString,
/* harmony export */   "getBrowserLabel": () => /* binding */ getBrowserLabel
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var browserNames = {
    E: 'Edge',
    FF: 'Firefox',
    S: 'Safari',
    C: 'Chrome',
    IE: 'IE',
    O: 'Opera'
};
function getEntryStatus(status) {
    switch (status) {
        case 'experimental':
            return '⚠️ Property is experimental. Be cautious when using it.️\n\n';
        case 'nonstandard':
            return '🚨️ Property is nonstandard. Avoid using it.\n\n';
        case 'obsolete':
            return '🚨️️️ Property is obsolete. Avoid using it.\n\n';
        default:
            return '';
    }
}
function getEntryDescription(entry, doesSupportMarkdown) {
    var result;
    if (doesSupportMarkdown) {
        result = {
            kind: 'markdown',
            value: getEntryMarkdownDescription(entry)
        };
    }
    else {
        result = {
            kind: 'plaintext',
            value: getEntryStringDescription(entry)
        };
    }
    if (result.value === '') {
        return undefined;
    }
    return result;
}
function textToMarkedString(text) {
    text = text.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    return text.replace(/</g, '&lt;').replace(/>/g, '&gt;');
}
function getEntryStringDescription(entry) {
    if (!entry.description || entry.description === '') {
        return '';
    }
    if (typeof entry.description !== 'string') {
        return entry.description.value;
    }
    var result = '';
    if (entry.status) {
        result += getEntryStatus(entry.status);
    }
    result += entry.description;
    var browserLabel = getBrowserLabel(entry.browsers);
    if (browserLabel) {
        result += '\n(' + browserLabel + ')';
    }
    if ('syntax' in entry) {
        result += "\n\nSyntax: " + entry.syntax;
    }
    if (entry.references && entry.references.length > 0) {
        result += '\n\n';
        result += entry.references.map(function (r) {
            return r.name + ": " + r.url;
        }).join(' | ');
    }
    return result;
}
function getEntryMarkdownDescription(entry) {
    if (!entry.description || entry.description === '') {
        return '';
    }
    var result = '';
    if (entry.status) {
        result += getEntryStatus(entry.status);
    }
    var description = typeof entry.description === 'string' ? entry.description : entry.description.value;
    result += textToMarkedString(description);
    var browserLabel = getBrowserLabel(entry.browsers);
    if (browserLabel) {
        result += '\n\n(' + textToMarkedString(browserLabel) + ')';
    }
    if ('syntax' in entry && entry.syntax) {
        result += "\n\nSyntax: " + textToMarkedString(entry.syntax);
    }
    if (entry.references && entry.references.length > 0) {
        result += '\n\n';
        result += entry.references.map(function (r) {
            return "[" + r.name + "](" + r.url + ")";
        }).join(' | ');
    }
    return result;
}
/**
 * Input is like `["E12","FF49","C47","IE","O"]`
 * Output is like `Edge 12, Firefox 49, Chrome 47, IE, Opera`
 */
function getBrowserLabel(browsers) {
    if (browsers === void 0) { browsers = []; }
    if (browsers.length === 0) {
        return null;
    }
    return browsers
        .map(function (b) {
        var result = '';
        var matches = b.match(/([A-Z]+)(\d+)?/);
        var name = matches[1];
        var version = matches[2];
        if (name in browserNames) {
            result += browserNames[name];
        }
        if (version) {
            result += ' ' + version;
        }
        return result;
    })
        .join(', ');
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/facts.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/facts.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "browserNames": () => /* reexport safe */ _entry_js__WEBPACK_IMPORTED_MODULE_0__.browserNames,
/* harmony export */   "getBrowserLabel": () => /* reexport safe */ _entry_js__WEBPACK_IMPORTED_MODULE_0__.getBrowserLabel,
/* harmony export */   "getEntryDescription": () => /* reexport safe */ _entry_js__WEBPACK_IMPORTED_MODULE_0__.getEntryDescription,
/* harmony export */   "textToMarkedString": () => /* reexport safe */ _entry_js__WEBPACK_IMPORTED_MODULE_0__.textToMarkedString,
/* harmony export */   "colorFrom256RGB": () => /* reexport safe */ _colors_js__WEBPACK_IMPORTED_MODULE_1__.colorFrom256RGB,
/* harmony export */   "colorFromHSL": () => /* reexport safe */ _colors_js__WEBPACK_IMPORTED_MODULE_1__.colorFromHSL,
/* harmony export */   "colorFromHex": () => /* reexport safe */ _colors_js__WEBPACK_IMPORTED_MODULE_1__.colorFromHex,
/* harmony export */   "colorFunctions": () => /* reexport safe */ _colors_js__WEBPACK_IMPORTED_MODULE_1__.colorFunctions,
/* harmony export */   "colorKeywords": () => /* reexport safe */ _colors_js__WEBPACK_IMPORTED_MODULE_1__.colorKeywords,
/* harmony export */   "colors": () => /* reexport safe */ _colors_js__WEBPACK_IMPORTED_MODULE_1__.colors,
/* harmony export */   "getColorValue": () => /* reexport safe */ _colors_js__WEBPACK_IMPORTED_MODULE_1__.getColorValue,
/* harmony export */   "hexDigit": () => /* reexport safe */ _colors_js__WEBPACK_IMPORTED_MODULE_1__.hexDigit,
/* harmony export */   "hslFromColor": () => /* reexport safe */ _colors_js__WEBPACK_IMPORTED_MODULE_1__.hslFromColor,
/* harmony export */   "isColorConstructor": () => /* reexport safe */ _colors_js__WEBPACK_IMPORTED_MODULE_1__.isColorConstructor,
/* harmony export */   "isColorValue": () => /* reexport safe */ _colors_js__WEBPACK_IMPORTED_MODULE_1__.isColorValue,
/* harmony export */   "basicShapeFunctions": () => /* reexport safe */ _builtinData_js__WEBPACK_IMPORTED_MODULE_2__.basicShapeFunctions,
/* harmony export */   "boxKeywords": () => /* reexport safe */ _builtinData_js__WEBPACK_IMPORTED_MODULE_2__.boxKeywords,
/* harmony export */   "cssWideKeywords": () => /* reexport safe */ _builtinData_js__WEBPACK_IMPORTED_MODULE_2__.cssWideKeywords,
/* harmony export */   "geometryBoxKeywords": () => /* reexport safe */ _builtinData_js__WEBPACK_IMPORTED_MODULE_2__.geometryBoxKeywords,
/* harmony export */   "html5Tags": () => /* reexport safe */ _builtinData_js__WEBPACK_IMPORTED_MODULE_2__.html5Tags,
/* harmony export */   "imageFunctions": () => /* reexport safe */ _builtinData_js__WEBPACK_IMPORTED_MODULE_2__.imageFunctions,
/* harmony export */   "lineStyleKeywords": () => /* reexport safe */ _builtinData_js__WEBPACK_IMPORTED_MODULE_2__.lineStyleKeywords,
/* harmony export */   "lineWidthKeywords": () => /* reexport safe */ _builtinData_js__WEBPACK_IMPORTED_MODULE_2__.lineWidthKeywords,
/* harmony export */   "pageBoxDirectives": () => /* reexport safe */ _builtinData_js__WEBPACK_IMPORTED_MODULE_2__.pageBoxDirectives,
/* harmony export */   "positionKeywords": () => /* reexport safe */ _builtinData_js__WEBPACK_IMPORTED_MODULE_2__.positionKeywords,
/* harmony export */   "repeatStyleKeywords": () => /* reexport safe */ _builtinData_js__WEBPACK_IMPORTED_MODULE_2__.repeatStyleKeywords,
/* harmony export */   "svgElements": () => /* reexport safe */ _builtinData_js__WEBPACK_IMPORTED_MODULE_2__.svgElements,
/* harmony export */   "transitionTimingFunctions": () => /* reexport safe */ _builtinData_js__WEBPACK_IMPORTED_MODULE_2__.transitionTimingFunctions,
/* harmony export */   "units": () => /* reexport safe */ _builtinData_js__WEBPACK_IMPORTED_MODULE_2__.units
/* harmony export */ });
/* harmony import */ var _entry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./entry.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/entry.js");
/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./colors.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/colors.js");
/* harmony import */ var _builtinData_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./builtinData.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/builtinData.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/






/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssErrors.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssErrors.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSIssueType": () => /* binding */ CSSIssueType,
/* harmony export */   "ParseError": () => /* binding */ ParseError
/* harmony export */ });
/* harmony import */ var _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../fillers/vscode-nls.js */ "./node_modules/monaco-editor/esm/vs/language/css/fillers/vscode-nls.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


var localize = _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_0__.loadMessageBundle();
var CSSIssueType = /** @class */ (function () {
    function CSSIssueType(id, message) {
        this.id = id;
        this.message = message;
    }
    return CSSIssueType;
}());

var ParseError = {
    NumberExpected: new CSSIssueType('css-numberexpected', localize('expected.number', "number expected")),
    ConditionExpected: new CSSIssueType('css-conditionexpected', localize('expected.condt', "condition expected")),
    RuleOrSelectorExpected: new CSSIssueType('css-ruleorselectorexpected', localize('expected.ruleorselector', "at-rule or selector expected")),
    DotExpected: new CSSIssueType('css-dotexpected', localize('expected.dot', "dot expected")),
    ColonExpected: new CSSIssueType('css-colonexpected', localize('expected.colon', "colon expected")),
    SemiColonExpected: new CSSIssueType('css-semicolonexpected', localize('expected.semicolon', "semi-colon expected")),
    TermExpected: new CSSIssueType('css-termexpected', localize('expected.term', "term expected")),
    ExpressionExpected: new CSSIssueType('css-expressionexpected', localize('expected.expression', "expression expected")),
    OperatorExpected: new CSSIssueType('css-operatorexpected', localize('expected.operator', "operator expected")),
    IdentifierExpected: new CSSIssueType('css-identifierexpected', localize('expected.ident', "identifier expected")),
    PercentageExpected: new CSSIssueType('css-percentageexpected', localize('expected.percentage', "percentage expected")),
    URIOrStringExpected: new CSSIssueType('css-uriorstringexpected', localize('expected.uriorstring', "uri or string expected")),
    URIExpected: new CSSIssueType('css-uriexpected', localize('expected.uri', "URI expected")),
    VariableNameExpected: new CSSIssueType('css-varnameexpected', localize('expected.varname', "variable name expected")),
    VariableValueExpected: new CSSIssueType('css-varvalueexpected', localize('expected.varvalue', "variable value expected")),
    PropertyValueExpected: new CSSIssueType('css-propertyvalueexpected', localize('expected.propvalue', "property value expected")),
    LeftCurlyExpected: new CSSIssueType('css-lcurlyexpected', localize('expected.lcurly', "{ expected")),
    RightCurlyExpected: new CSSIssueType('css-rcurlyexpected', localize('expected.rcurly', "} expected")),
    LeftSquareBracketExpected: new CSSIssueType('css-rbracketexpected', localize('expected.lsquare', "[ expected")),
    RightSquareBracketExpected: new CSSIssueType('css-lbracketexpected', localize('expected.rsquare', "] expected")),
    LeftParenthesisExpected: new CSSIssueType('css-lparentexpected', localize('expected.lparen', "( expected")),
    RightParenthesisExpected: new CSSIssueType('css-rparentexpected', localize('expected.rparent', ") expected")),
    CommaExpected: new CSSIssueType('css-commaexpected', localize('expected.comma', "comma expected")),
    PageDirectiveOrDeclarationExpected: new CSSIssueType('css-pagedirordeclexpected', localize('expected.pagedirordecl', "page directive or declaraton expected")),
    UnknownAtRule: new CSSIssueType('css-unknownatrule', localize('unknown.atrule', "at-rule unknown")),
    UnknownKeyword: new CSSIssueType('css-unknownkeyword', localize('unknown.keyword', "unknown keyword")),
    SelectorExpected: new CSSIssueType('css-selectorexpected', localize('expected.selector', "selector expected")),
    StringLiteralExpected: new CSSIssueType('css-stringliteralexpected', localize('expected.stringliteral', "string literal expected")),
    WhitespaceExpected: new CSSIssueType('css-whitespaceexpected', localize('expected.whitespace', "whitespace expected")),
    MediaQueryExpected: new CSSIssueType('css-mediaqueryexpected', localize('expected.mediaquery', "media query expected")),
    IdentifierOrWildcardExpected: new CSSIssueType('css-idorwildcardexpected', localize('expected.idorwildcard', "identifier or wildcard expected")),
    WildcardExpected: new CSSIssueType('css-wildcardexpected', localize('expected.wildcard', "wildcard expected")),
    IdentifierOrVariableExpected: new CSSIssueType('css-idorvarexpected', localize('expected.idorvar', "identifier or variable expected")),
};


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NodeType": () => /* binding */ NodeType,
/* harmony export */   "ReferenceType": () => /* binding */ ReferenceType,
/* harmony export */   "getNodeAtOffset": () => /* binding */ getNodeAtOffset,
/* harmony export */   "getNodePath": () => /* binding */ getNodePath,
/* harmony export */   "getParentDeclaration": () => /* binding */ getParentDeclaration,
/* harmony export */   "Node": () => /* binding */ Node,
/* harmony export */   "Nodelist": () => /* binding */ Nodelist,
/* harmony export */   "Identifier": () => /* binding */ Identifier,
/* harmony export */   "Stylesheet": () => /* binding */ Stylesheet,
/* harmony export */   "Declarations": () => /* binding */ Declarations,
/* harmony export */   "BodyDeclaration": () => /* binding */ BodyDeclaration,
/* harmony export */   "RuleSet": () => /* binding */ RuleSet,
/* harmony export */   "Selector": () => /* binding */ Selector,
/* harmony export */   "SimpleSelector": () => /* binding */ SimpleSelector,
/* harmony export */   "AtApplyRule": () => /* binding */ AtApplyRule,
/* harmony export */   "AbstractDeclaration": () => /* binding */ AbstractDeclaration,
/* harmony export */   "CustomPropertyDeclaration": () => /* binding */ CustomPropertyDeclaration,
/* harmony export */   "CustomPropertySet": () => /* binding */ CustomPropertySet,
/* harmony export */   "Declaration": () => /* binding */ Declaration,
/* harmony export */   "Property": () => /* binding */ Property,
/* harmony export */   "Invocation": () => /* binding */ Invocation,
/* harmony export */   "Function": () => /* binding */ Function,
/* harmony export */   "FunctionParameter": () => /* binding */ FunctionParameter,
/* harmony export */   "FunctionArgument": () => /* binding */ FunctionArgument,
/* harmony export */   "IfStatement": () => /* binding */ IfStatement,
/* harmony export */   "ForStatement": () => /* binding */ ForStatement,
/* harmony export */   "EachStatement": () => /* binding */ EachStatement,
/* harmony export */   "WhileStatement": () => /* binding */ WhileStatement,
/* harmony export */   "ElseStatement": () => /* binding */ ElseStatement,
/* harmony export */   "FunctionDeclaration": () => /* binding */ FunctionDeclaration,
/* harmony export */   "ViewPort": () => /* binding */ ViewPort,
/* harmony export */   "FontFace": () => /* binding */ FontFace,
/* harmony export */   "NestedProperties": () => /* binding */ NestedProperties,
/* harmony export */   "Keyframe": () => /* binding */ Keyframe,
/* harmony export */   "KeyframeSelector": () => /* binding */ KeyframeSelector,
/* harmony export */   "Import": () => /* binding */ Import,
/* harmony export */   "Use": () => /* binding */ Use,
/* harmony export */   "ModuleConfiguration": () => /* binding */ ModuleConfiguration,
/* harmony export */   "Forward": () => /* binding */ Forward,
/* harmony export */   "ForwardVisibility": () => /* binding */ ForwardVisibility,
/* harmony export */   "Namespace": () => /* binding */ Namespace,
/* harmony export */   "Media": () => /* binding */ Media,
/* harmony export */   "Supports": () => /* binding */ Supports,
/* harmony export */   "Document": () => /* binding */ Document,
/* harmony export */   "Medialist": () => /* binding */ Medialist,
/* harmony export */   "MediaQuery": () => /* binding */ MediaQuery,
/* harmony export */   "SupportsCondition": () => /* binding */ SupportsCondition,
/* harmony export */   "Page": () => /* binding */ Page,
/* harmony export */   "PageBoxMarginBox": () => /* binding */ PageBoxMarginBox,
/* harmony export */   "Expression": () => /* binding */ Expression,
/* harmony export */   "BinaryExpression": () => /* binding */ BinaryExpression,
/* harmony export */   "Term": () => /* binding */ Term,
/* harmony export */   "AttributeSelector": () => /* binding */ AttributeSelector,
/* harmony export */   "Operator": () => /* binding */ Operator,
/* harmony export */   "HexColorValue": () => /* binding */ HexColorValue,
/* harmony export */   "NumericValue": () => /* binding */ NumericValue,
/* harmony export */   "VariableDeclaration": () => /* binding */ VariableDeclaration,
/* harmony export */   "Interpolation": () => /* binding */ Interpolation,
/* harmony export */   "Variable": () => /* binding */ Variable,
/* harmony export */   "ExtendsReference": () => /* binding */ ExtendsReference,
/* harmony export */   "MixinContentReference": () => /* binding */ MixinContentReference,
/* harmony export */   "MixinContentDeclaration": () => /* binding */ MixinContentDeclaration,
/* harmony export */   "MixinReference": () => /* binding */ MixinReference,
/* harmony export */   "MixinDeclaration": () => /* binding */ MixinDeclaration,
/* harmony export */   "UnknownAtRule": () => /* binding */ UnknownAtRule,
/* harmony export */   "ListEntry": () => /* binding */ ListEntry,
/* harmony export */   "LessGuard": () => /* binding */ LessGuard,
/* harmony export */   "GuardCondition": () => /* binding */ GuardCondition,
/* harmony export */   "Module": () => /* binding */ Module,
/* harmony export */   "Level": () => /* binding */ Level,
/* harmony export */   "Marker": () => /* binding */ Marker,
/* harmony export */   "ParseErrorCollector": () => /* binding */ ParseErrorCollector
/* harmony export */ });
/* harmony import */ var _utils_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/strings.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/strings.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/// <summary>
/// Nodes for the css 2.1 specification. See for reference:
/// http://www.w3.org/TR/CSS21/grammar.html#grammar
/// </summary>
var NodeType;
(function (NodeType) {
    NodeType[NodeType["Undefined"] = 0] = "Undefined";
    NodeType[NodeType["Identifier"] = 1] = "Identifier";
    NodeType[NodeType["Stylesheet"] = 2] = "Stylesheet";
    NodeType[NodeType["Ruleset"] = 3] = "Ruleset";
    NodeType[NodeType["Selector"] = 4] = "Selector";
    NodeType[NodeType["SimpleSelector"] = 5] = "SimpleSelector";
    NodeType[NodeType["SelectorInterpolation"] = 6] = "SelectorInterpolation";
    NodeType[NodeType["SelectorCombinator"] = 7] = "SelectorCombinator";
    NodeType[NodeType["SelectorCombinatorParent"] = 8] = "SelectorCombinatorParent";
    NodeType[NodeType["SelectorCombinatorSibling"] = 9] = "SelectorCombinatorSibling";
    NodeType[NodeType["SelectorCombinatorAllSiblings"] = 10] = "SelectorCombinatorAllSiblings";
    NodeType[NodeType["SelectorCombinatorShadowPiercingDescendant"] = 11] = "SelectorCombinatorShadowPiercingDescendant";
    NodeType[NodeType["Page"] = 12] = "Page";
    NodeType[NodeType["PageBoxMarginBox"] = 13] = "PageBoxMarginBox";
    NodeType[NodeType["ClassSelector"] = 14] = "ClassSelector";
    NodeType[NodeType["IdentifierSelector"] = 15] = "IdentifierSelector";
    NodeType[NodeType["ElementNameSelector"] = 16] = "ElementNameSelector";
    NodeType[NodeType["PseudoSelector"] = 17] = "PseudoSelector";
    NodeType[NodeType["AttributeSelector"] = 18] = "AttributeSelector";
    NodeType[NodeType["Declaration"] = 19] = "Declaration";
    NodeType[NodeType["Declarations"] = 20] = "Declarations";
    NodeType[NodeType["Property"] = 21] = "Property";
    NodeType[NodeType["Expression"] = 22] = "Expression";
    NodeType[NodeType["BinaryExpression"] = 23] = "BinaryExpression";
    NodeType[NodeType["Term"] = 24] = "Term";
    NodeType[NodeType["Operator"] = 25] = "Operator";
    NodeType[NodeType["Value"] = 26] = "Value";
    NodeType[NodeType["StringLiteral"] = 27] = "StringLiteral";
    NodeType[NodeType["URILiteral"] = 28] = "URILiteral";
    NodeType[NodeType["EscapedValue"] = 29] = "EscapedValue";
    NodeType[NodeType["Function"] = 30] = "Function";
    NodeType[NodeType["NumericValue"] = 31] = "NumericValue";
    NodeType[NodeType["HexColorValue"] = 32] = "HexColorValue";
    NodeType[NodeType["MixinDeclaration"] = 33] = "MixinDeclaration";
    NodeType[NodeType["MixinReference"] = 34] = "MixinReference";
    NodeType[NodeType["VariableName"] = 35] = "VariableName";
    NodeType[NodeType["VariableDeclaration"] = 36] = "VariableDeclaration";
    NodeType[NodeType["Prio"] = 37] = "Prio";
    NodeType[NodeType["Interpolation"] = 38] = "Interpolation";
    NodeType[NodeType["NestedProperties"] = 39] = "NestedProperties";
    NodeType[NodeType["ExtendsReference"] = 40] = "ExtendsReference";
    NodeType[NodeType["SelectorPlaceholder"] = 41] = "SelectorPlaceholder";
    NodeType[NodeType["Debug"] = 42] = "Debug";
    NodeType[NodeType["If"] = 43] = "If";
    NodeType[NodeType["Else"] = 44] = "Else";
    NodeType[NodeType["For"] = 45] = "For";
    NodeType[NodeType["Each"] = 46] = "Each";
    NodeType[NodeType["While"] = 47] = "While";
    NodeType[NodeType["MixinContentReference"] = 48] = "MixinContentReference";
    NodeType[NodeType["MixinContentDeclaration"] = 49] = "MixinContentDeclaration";
    NodeType[NodeType["Media"] = 50] = "Media";
    NodeType[NodeType["Keyframe"] = 51] = "Keyframe";
    NodeType[NodeType["FontFace"] = 52] = "FontFace";
    NodeType[NodeType["Import"] = 53] = "Import";
    NodeType[NodeType["Namespace"] = 54] = "Namespace";
    NodeType[NodeType["Invocation"] = 55] = "Invocation";
    NodeType[NodeType["FunctionDeclaration"] = 56] = "FunctionDeclaration";
    NodeType[NodeType["ReturnStatement"] = 57] = "ReturnStatement";
    NodeType[NodeType["MediaQuery"] = 58] = "MediaQuery";
    NodeType[NodeType["FunctionParameter"] = 59] = "FunctionParameter";
    NodeType[NodeType["FunctionArgument"] = 60] = "FunctionArgument";
    NodeType[NodeType["KeyframeSelector"] = 61] = "KeyframeSelector";
    NodeType[NodeType["ViewPort"] = 62] = "ViewPort";
    NodeType[NodeType["Document"] = 63] = "Document";
    NodeType[NodeType["AtApplyRule"] = 64] = "AtApplyRule";
    NodeType[NodeType["CustomPropertyDeclaration"] = 65] = "CustomPropertyDeclaration";
    NodeType[NodeType["CustomPropertySet"] = 66] = "CustomPropertySet";
    NodeType[NodeType["ListEntry"] = 67] = "ListEntry";
    NodeType[NodeType["Supports"] = 68] = "Supports";
    NodeType[NodeType["SupportsCondition"] = 69] = "SupportsCondition";
    NodeType[NodeType["NamespacePrefix"] = 70] = "NamespacePrefix";
    NodeType[NodeType["GridLine"] = 71] = "GridLine";
    NodeType[NodeType["Plugin"] = 72] = "Plugin";
    NodeType[NodeType["UnknownAtRule"] = 73] = "UnknownAtRule";
    NodeType[NodeType["Use"] = 74] = "Use";
    NodeType[NodeType["ModuleConfiguration"] = 75] = "ModuleConfiguration";
    NodeType[NodeType["Forward"] = 76] = "Forward";
    NodeType[NodeType["ForwardVisibility"] = 77] = "ForwardVisibility";
    NodeType[NodeType["Module"] = 78] = "Module";
})(NodeType || (NodeType = {}));
var ReferenceType;
(function (ReferenceType) {
    ReferenceType[ReferenceType["Mixin"] = 0] = "Mixin";
    ReferenceType[ReferenceType["Rule"] = 1] = "Rule";
    ReferenceType[ReferenceType["Variable"] = 2] = "Variable";
    ReferenceType[ReferenceType["Function"] = 3] = "Function";
    ReferenceType[ReferenceType["Keyframe"] = 4] = "Keyframe";
    ReferenceType[ReferenceType["Unknown"] = 5] = "Unknown";
    ReferenceType[ReferenceType["Module"] = 6] = "Module";
    ReferenceType[ReferenceType["Forward"] = 7] = "Forward";
    ReferenceType[ReferenceType["ForwardVisibility"] = 8] = "ForwardVisibility";
})(ReferenceType || (ReferenceType = {}));
function getNodeAtOffset(node, offset) {
    var candidate = null;
    if (!node || offset < node.offset || offset > node.end) {
        return null;
    }
    // Find the shortest node at the position
    node.accept(function (node) {
        if (node.offset === -1 && node.length === -1) {
            return true;
        }
        if (node.offset <= offset && node.end >= offset) {
            if (!candidate) {
                candidate = node;
            }
            else if (node.length <= candidate.length) {
                candidate = node;
            }
            return true;
        }
        return false;
    });
    return candidate;
}
function getNodePath(node, offset) {
    var candidate = getNodeAtOffset(node, offset);
    var path = [];
    while (candidate) {
        path.unshift(candidate);
        candidate = candidate.parent;
    }
    return path;
}
function getParentDeclaration(node) {
    var decl = node.findParent(NodeType.Declaration);
    var value = decl && decl.getValue();
    if (value && value.encloses(node)) {
        return decl;
    }
    return null;
}
var Node = /** @class */ (function () {
    function Node(offset, len, nodeType) {
        if (offset === void 0) { offset = -1; }
        if (len === void 0) { len = -1; }
        this.parent = null;
        this.offset = offset;
        this.length = len;
        if (nodeType) {
            this.nodeType = nodeType;
        }
    }
    Object.defineProperty(Node.prototype, "end", {
        get: function () { return this.offset + this.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "type", {
        get: function () {
            return this.nodeType || NodeType.Undefined;
        },
        set: function (type) {
            this.nodeType = type;
        },
        enumerable: true,
        configurable: true
    });
    Node.prototype.getTextProvider = function () {
        var node = this;
        while (node && !node.textProvider) {
            node = node.parent;
        }
        if (node) {
            return node.textProvider;
        }
        return function () { return 'unknown'; };
    };
    Node.prototype.getText = function () {
        return this.getTextProvider()(this.offset, this.length);
    };
    Node.prototype.matches = function (str) {
        return this.length === str.length && this.getTextProvider()(this.offset, this.length) === str;
    };
    Node.prototype.startsWith = function (str) {
        return this.length >= str.length && this.getTextProvider()(this.offset, str.length) === str;
    };
    Node.prototype.endsWith = function (str) {
        return this.length >= str.length && this.getTextProvider()(this.end - str.length, str.length) === str;
    };
    Node.prototype.accept = function (visitor) {
        if (visitor(this) && this.children) {
            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                var child = _a[_i];
                child.accept(visitor);
            }
        }
    };
    Node.prototype.acceptVisitor = function (visitor) {
        this.accept(visitor.visitNode.bind(visitor));
    };
    Node.prototype.adoptChild = function (node, index) {
        if (index === void 0) { index = -1; }
        if (node.parent && node.parent.children) {
            var idx = node.parent.children.indexOf(node);
            if (idx >= 0) {
                node.parent.children.splice(idx, 1);
            }
        }
        node.parent = this;
        var children = this.children;
        if (!children) {
            children = this.children = [];
        }
        if (index !== -1) {
            children.splice(index, 0, node);
        }
        else {
            children.push(node);
        }
        return node;
    };
    Node.prototype.attachTo = function (parent, index) {
        if (index === void 0) { index = -1; }
        if (parent) {
            parent.adoptChild(this, index);
        }
        return this;
    };
    Node.prototype.collectIssues = function (results) {
        if (this.issues) {
            results.push.apply(results, this.issues);
        }
    };
    Node.prototype.addIssue = function (issue) {
        if (!this.issues) {
            this.issues = [];
        }
        this.issues.push(issue);
    };
    Node.prototype.hasIssue = function (rule) {
        return Array.isArray(this.issues) && this.issues.some(function (i) { return i.getRule() === rule; });
    };
    Node.prototype.isErroneous = function (recursive) {
        if (recursive === void 0) { recursive = false; }
        if (this.issues && this.issues.length > 0) {
            return true;
        }
        return recursive && Array.isArray(this.children) && this.children.some(function (c) { return c.isErroneous(true); });
    };
    Node.prototype.setNode = function (field, node, index) {
        if (index === void 0) { index = -1; }
        if (node) {
            node.attachTo(this, index);
            this[field] = node;
            return true;
        }
        return false;
    };
    Node.prototype.addChild = function (node) {
        if (node) {
            if (!this.children) {
                this.children = [];
            }
            node.attachTo(this);
            this.updateOffsetAndLength(node);
            return true;
        }
        return false;
    };
    Node.prototype.updateOffsetAndLength = function (node) {
        if (node.offset < this.offset || this.offset === -1) {
            this.offset = node.offset;
        }
        var nodeEnd = node.end;
        if ((nodeEnd > this.end) || this.length === -1) {
            this.length = nodeEnd - this.offset;
        }
    };
    Node.prototype.hasChildren = function () {
        return !!this.children && this.children.length > 0;
    };
    Node.prototype.getChildren = function () {
        return this.children ? this.children.slice(0) : [];
    };
    Node.prototype.getChild = function (index) {
        if (this.children && index < this.children.length) {
            return this.children[index];
        }
        return null;
    };
    Node.prototype.addChildren = function (nodes) {
        for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
            var node = nodes_1[_i];
            this.addChild(node);
        }
    };
    Node.prototype.findFirstChildBeforeOffset = function (offset) {
        if (this.children) {
            var current = null;
            for (var i = this.children.length - 1; i >= 0; i--) {
                // iterate until we find a child that has a start offset smaller than the input offset
                current = this.children[i];
                if (current.offset <= offset) {
                    return current;
                }
            }
        }
        return null;
    };
    Node.prototype.findChildAtOffset = function (offset, goDeep) {
        var current = this.findFirstChildBeforeOffset(offset);
        if (current && current.end >= offset) {
            if (goDeep) {
                return current.findChildAtOffset(offset, true) || current;
            }
            return current;
        }
        return null;
    };
    Node.prototype.encloses = function (candidate) {
        return this.offset <= candidate.offset && this.offset + this.length >= candidate.offset + candidate.length;
    };
    Node.prototype.getParent = function () {
        var result = this.parent;
        while (result instanceof Nodelist) {
            result = result.parent;
        }
        return result;
    };
    Node.prototype.findParent = function (type) {
        var result = this;
        while (result && result.type !== type) {
            result = result.parent;
        }
        return result;
    };
    Node.prototype.findAParent = function () {
        var types = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            types[_i] = arguments[_i];
        }
        var result = this;
        while (result && !types.some(function (t) { return result.type === t; })) {
            result = result.parent;
        }
        return result;
    };
    Node.prototype.setData = function (key, value) {
        if (!this.options) {
            this.options = {};
        }
        this.options[key] = value;
    };
    Node.prototype.getData = function (key) {
        if (!this.options || !this.options.hasOwnProperty(key)) {
            return null;
        }
        return this.options[key];
    };
    return Node;
}());

var Nodelist = /** @class */ (function (_super) {
    __extends(Nodelist, _super);
    function Nodelist(parent, index) {
        if (index === void 0) { index = -1; }
        var _this = _super.call(this, -1, -1) || this;
        _this.attachTo(parent, index);
        _this.offset = -1;
        _this.length = -1;
        return _this;
    }
    return Nodelist;
}(Node));

var Identifier = /** @class */ (function (_super) {
    __extends(Identifier, _super);
    function Identifier(offset, length) {
        var _this = _super.call(this, offset, length) || this;
        _this.isCustomProperty = false;
        return _this;
    }
    Object.defineProperty(Identifier.prototype, "type", {
        get: function () {
            return NodeType.Identifier;
        },
        enumerable: true,
        configurable: true
    });
    Identifier.prototype.containsInterpolation = function () {
        return this.hasChildren();
    };
    return Identifier;
}(Node));

var Stylesheet = /** @class */ (function (_super) {
    __extends(Stylesheet, _super);
    function Stylesheet(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Stylesheet.prototype, "type", {
        get: function () {
            return NodeType.Stylesheet;
        },
        enumerable: true,
        configurable: true
    });
    return Stylesheet;
}(Node));

var Declarations = /** @class */ (function (_super) {
    __extends(Declarations, _super);
    function Declarations(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Declarations.prototype, "type", {
        get: function () {
            return NodeType.Declarations;
        },
        enumerable: true,
        configurable: true
    });
    return Declarations;
}(Node));

var BodyDeclaration = /** @class */ (function (_super) {
    __extends(BodyDeclaration, _super);
    function BodyDeclaration(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    BodyDeclaration.prototype.getDeclarations = function () {
        return this.declarations;
    };
    BodyDeclaration.prototype.setDeclarations = function (decls) {
        return this.setNode('declarations', decls);
    };
    return BodyDeclaration;
}(Node));

var RuleSet = /** @class */ (function (_super) {
    __extends(RuleSet, _super);
    function RuleSet(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(RuleSet.prototype, "type", {
        get: function () {
            return NodeType.Ruleset;
        },
        enumerable: true,
        configurable: true
    });
    RuleSet.prototype.getSelectors = function () {
        if (!this.selectors) {
            this.selectors = new Nodelist(this);
        }
        return this.selectors;
    };
    RuleSet.prototype.isNested = function () {
        return !!this.parent && this.parent.findParent(NodeType.Declarations) !== null;
    };
    return RuleSet;
}(BodyDeclaration));

var Selector = /** @class */ (function (_super) {
    __extends(Selector, _super);
    function Selector(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Selector.prototype, "type", {
        get: function () {
            return NodeType.Selector;
        },
        enumerable: true,
        configurable: true
    });
    return Selector;
}(Node));

var SimpleSelector = /** @class */ (function (_super) {
    __extends(SimpleSelector, _super);
    function SimpleSelector(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(SimpleSelector.prototype, "type", {
        get: function () {
            return NodeType.SimpleSelector;
        },
        enumerable: true,
        configurable: true
    });
    return SimpleSelector;
}(Node));

var AtApplyRule = /** @class */ (function (_super) {
    __extends(AtApplyRule, _super);
    function AtApplyRule(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(AtApplyRule.prototype, "type", {
        get: function () {
            return NodeType.AtApplyRule;
        },
        enumerable: true,
        configurable: true
    });
    AtApplyRule.prototype.setIdentifier = function (node) {
        return this.setNode('identifier', node, 0);
    };
    AtApplyRule.prototype.getIdentifier = function () {
        return this.identifier;
    };
    AtApplyRule.prototype.getName = function () {
        return this.identifier ? this.identifier.getText() : '';
    };
    return AtApplyRule;
}(Node));

var AbstractDeclaration = /** @class */ (function (_super) {
    __extends(AbstractDeclaration, _super);
    function AbstractDeclaration(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    return AbstractDeclaration;
}(Node));

var CustomPropertyDeclaration = /** @class */ (function (_super) {
    __extends(CustomPropertyDeclaration, _super);
    function CustomPropertyDeclaration(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(CustomPropertyDeclaration.prototype, "type", {
        get: function () {
            return NodeType.CustomPropertyDeclaration;
        },
        enumerable: true,
        configurable: true
    });
    CustomPropertyDeclaration.prototype.setProperty = function (node) {
        return this.setNode('property', node);
    };
    CustomPropertyDeclaration.prototype.getProperty = function () {
        return this.property;
    };
    CustomPropertyDeclaration.prototype.setValue = function (value) {
        return this.setNode('value', value);
    };
    CustomPropertyDeclaration.prototype.getValue = function () {
        return this.value;
    };
    CustomPropertyDeclaration.prototype.setPropertySet = function (value) {
        return this.setNode('propertySet', value);
    };
    CustomPropertyDeclaration.prototype.getPropertySet = function () {
        return this.propertySet;
    };
    return CustomPropertyDeclaration;
}(AbstractDeclaration));

var CustomPropertySet = /** @class */ (function (_super) {
    __extends(CustomPropertySet, _super);
    function CustomPropertySet(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(CustomPropertySet.prototype, "type", {
        get: function () {
            return NodeType.CustomPropertySet;
        },
        enumerable: true,
        configurable: true
    });
    return CustomPropertySet;
}(BodyDeclaration));

var Declaration = /** @class */ (function (_super) {
    __extends(Declaration, _super);
    function Declaration(offset, length) {
        var _this = _super.call(this, offset, length) || this;
        _this.property = null;
        return _this;
    }
    Object.defineProperty(Declaration.prototype, "type", {
        get: function () {
            return NodeType.Declaration;
        },
        enumerable: true,
        configurable: true
    });
    Declaration.prototype.setProperty = function (node) {
        return this.setNode('property', node);
    };
    Declaration.prototype.getProperty = function () {
        return this.property;
    };
    Declaration.prototype.getFullPropertyName = function () {
        var propertyName = this.property ? this.property.getName() : 'unknown';
        if (this.parent instanceof Declarations && this.parent.getParent() instanceof NestedProperties) {
            var parentDecl = this.parent.getParent().getParent();
            if (parentDecl instanceof Declaration) {
                return parentDecl.getFullPropertyName() + propertyName;
            }
        }
        return propertyName;
    };
    Declaration.prototype.getNonPrefixedPropertyName = function () {
        var propertyName = this.getFullPropertyName();
        if (propertyName && propertyName.charAt(0) === '-') {
            var vendorPrefixEnd = propertyName.indexOf('-', 1);
            if (vendorPrefixEnd !== -1) {
                return propertyName.substring(vendorPrefixEnd + 1);
            }
        }
        return propertyName;
    };
    Declaration.prototype.setValue = function (value) {
        return this.setNode('value', value);
    };
    Declaration.prototype.getValue = function () {
        return this.value;
    };
    Declaration.prototype.setNestedProperties = function (value) {
        return this.setNode('nestedProperties', value);
    };
    Declaration.prototype.getNestedProperties = function () {
        return this.nestedProperties;
    };
    return Declaration;
}(AbstractDeclaration));

var Property = /** @class */ (function (_super) {
    __extends(Property, _super);
    function Property(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Property.prototype, "type", {
        get: function () {
            return NodeType.Property;
        },
        enumerable: true,
        configurable: true
    });
    Property.prototype.setIdentifier = function (value) {
        return this.setNode('identifier', value);
    };
    Property.prototype.getIdentifier = function () {
        return this.identifier;
    };
    Property.prototype.getName = function () {
        return (0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_0__.trim)(this.getText(), /[_\+]+$/); /* +_: less merge */
    };
    Property.prototype.isCustomProperty = function () {
        return !!this.identifier && this.identifier.isCustomProperty;
    };
    return Property;
}(Node));

var Invocation = /** @class */ (function (_super) {
    __extends(Invocation, _super);
    function Invocation(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Invocation.prototype, "type", {
        get: function () {
            return NodeType.Invocation;
        },
        enumerable: true,
        configurable: true
    });
    Invocation.prototype.getArguments = function () {
        if (!this.arguments) {
            this.arguments = new Nodelist(this);
        }
        return this.arguments;
    };
    return Invocation;
}(Node));

var Function = /** @class */ (function (_super) {
    __extends(Function, _super);
    function Function(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Function.prototype, "type", {
        get: function () {
            return NodeType.Function;
        },
        enumerable: true,
        configurable: true
    });
    Function.prototype.setIdentifier = function (node) {
        return this.setNode('identifier', node, 0);
    };
    Function.prototype.getIdentifier = function () {
        return this.identifier;
    };
    Function.prototype.getName = function () {
        return this.identifier ? this.identifier.getText() : '';
    };
    return Function;
}(Invocation));

var FunctionParameter = /** @class */ (function (_super) {
    __extends(FunctionParameter, _super);
    function FunctionParameter(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(FunctionParameter.prototype, "type", {
        get: function () {
            return NodeType.FunctionParameter;
        },
        enumerable: true,
        configurable: true
    });
    FunctionParameter.prototype.setIdentifier = function (node) {
        return this.setNode('identifier', node, 0);
    };
    FunctionParameter.prototype.getIdentifier = function () {
        return this.identifier;
    };
    FunctionParameter.prototype.getName = function () {
        return this.identifier ? this.identifier.getText() : '';
    };
    FunctionParameter.prototype.setDefaultValue = function (node) {
        return this.setNode('defaultValue', node, 0);
    };
    FunctionParameter.prototype.getDefaultValue = function () {
        return this.defaultValue;
    };
    return FunctionParameter;
}(Node));

var FunctionArgument = /** @class */ (function (_super) {
    __extends(FunctionArgument, _super);
    function FunctionArgument(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(FunctionArgument.prototype, "type", {
        get: function () {
            return NodeType.FunctionArgument;
        },
        enumerable: true,
        configurable: true
    });
    FunctionArgument.prototype.setIdentifier = function (node) {
        return this.setNode('identifier', node, 0);
    };
    FunctionArgument.prototype.getIdentifier = function () {
        return this.identifier;
    };
    FunctionArgument.prototype.getName = function () {
        return this.identifier ? this.identifier.getText() : '';
    };
    FunctionArgument.prototype.setValue = function (node) {
        return this.setNode('value', node, 0);
    };
    FunctionArgument.prototype.getValue = function () {
        return this.value;
    };
    return FunctionArgument;
}(Node));

var IfStatement = /** @class */ (function (_super) {
    __extends(IfStatement, _super);
    function IfStatement(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(IfStatement.prototype, "type", {
        get: function () {
            return NodeType.If;
        },
        enumerable: true,
        configurable: true
    });
    IfStatement.prototype.setExpression = function (node) {
        return this.setNode('expression', node, 0);
    };
    IfStatement.prototype.setElseClause = function (elseClause) {
        return this.setNode('elseClause', elseClause);
    };
    return IfStatement;
}(BodyDeclaration));

var ForStatement = /** @class */ (function (_super) {
    __extends(ForStatement, _super);
    function ForStatement(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(ForStatement.prototype, "type", {
        get: function () {
            return NodeType.For;
        },
        enumerable: true,
        configurable: true
    });
    ForStatement.prototype.setVariable = function (node) {
        return this.setNode('variable', node, 0);
    };
    return ForStatement;
}(BodyDeclaration));

var EachStatement = /** @class */ (function (_super) {
    __extends(EachStatement, _super);
    function EachStatement(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(EachStatement.prototype, "type", {
        get: function () {
            return NodeType.Each;
        },
        enumerable: true,
        configurable: true
    });
    EachStatement.prototype.getVariables = function () {
        if (!this.variables) {
            this.variables = new Nodelist(this);
        }
        return this.variables;
    };
    return EachStatement;
}(BodyDeclaration));

var WhileStatement = /** @class */ (function (_super) {
    __extends(WhileStatement, _super);
    function WhileStatement(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(WhileStatement.prototype, "type", {
        get: function () {
            return NodeType.While;
        },
        enumerable: true,
        configurable: true
    });
    return WhileStatement;
}(BodyDeclaration));

var ElseStatement = /** @class */ (function (_super) {
    __extends(ElseStatement, _super);
    function ElseStatement(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(ElseStatement.prototype, "type", {
        get: function () {
            return NodeType.Else;
        },
        enumerable: true,
        configurable: true
    });
    return ElseStatement;
}(BodyDeclaration));

var FunctionDeclaration = /** @class */ (function (_super) {
    __extends(FunctionDeclaration, _super);
    function FunctionDeclaration(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(FunctionDeclaration.prototype, "type", {
        get: function () {
            return NodeType.FunctionDeclaration;
        },
        enumerable: true,
        configurable: true
    });
    FunctionDeclaration.prototype.setIdentifier = function (node) {
        return this.setNode('identifier', node, 0);
    };
    FunctionDeclaration.prototype.getIdentifier = function () {
        return this.identifier;
    };
    FunctionDeclaration.prototype.getName = function () {
        return this.identifier ? this.identifier.getText() : '';
    };
    FunctionDeclaration.prototype.getParameters = function () {
        if (!this.parameters) {
            this.parameters = new Nodelist(this);
        }
        return this.parameters;
    };
    return FunctionDeclaration;
}(BodyDeclaration));

var ViewPort = /** @class */ (function (_super) {
    __extends(ViewPort, _super);
    function ViewPort(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(ViewPort.prototype, "type", {
        get: function () {
            return NodeType.ViewPort;
        },
        enumerable: true,
        configurable: true
    });
    return ViewPort;
}(BodyDeclaration));

var FontFace = /** @class */ (function (_super) {
    __extends(FontFace, _super);
    function FontFace(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(FontFace.prototype, "type", {
        get: function () {
            return NodeType.FontFace;
        },
        enumerable: true,
        configurable: true
    });
    return FontFace;
}(BodyDeclaration));

var NestedProperties = /** @class */ (function (_super) {
    __extends(NestedProperties, _super);
    function NestedProperties(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(NestedProperties.prototype, "type", {
        get: function () {
            return NodeType.NestedProperties;
        },
        enumerable: true,
        configurable: true
    });
    return NestedProperties;
}(BodyDeclaration));

var Keyframe = /** @class */ (function (_super) {
    __extends(Keyframe, _super);
    function Keyframe(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Keyframe.prototype, "type", {
        get: function () {
            return NodeType.Keyframe;
        },
        enumerable: true,
        configurable: true
    });
    Keyframe.prototype.setKeyword = function (keyword) {
        return this.setNode('keyword', keyword, 0);
    };
    Keyframe.prototype.getKeyword = function () {
        return this.keyword;
    };
    Keyframe.prototype.setIdentifier = function (node) {
        return this.setNode('identifier', node, 0);
    };
    Keyframe.prototype.getIdentifier = function () {
        return this.identifier;
    };
    Keyframe.prototype.getName = function () {
        return this.identifier ? this.identifier.getText() : '';
    };
    return Keyframe;
}(BodyDeclaration));

var KeyframeSelector = /** @class */ (function (_super) {
    __extends(KeyframeSelector, _super);
    function KeyframeSelector(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(KeyframeSelector.prototype, "type", {
        get: function () {
            return NodeType.KeyframeSelector;
        },
        enumerable: true,
        configurable: true
    });
    return KeyframeSelector;
}(BodyDeclaration));

var Import = /** @class */ (function (_super) {
    __extends(Import, _super);
    function Import(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Import.prototype, "type", {
        get: function () {
            return NodeType.Import;
        },
        enumerable: true,
        configurable: true
    });
    Import.prototype.setMedialist = function (node) {
        if (node) {
            node.attachTo(this);
            return true;
        }
        return false;
    };
    return Import;
}(Node));

var Use = /** @class */ (function (_super) {
    __extends(Use, _super);
    function Use() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Use.prototype, "type", {
        get: function () {
            return NodeType.Use;
        },
        enumerable: true,
        configurable: true
    });
    Use.prototype.getParameters = function () {
        if (!this.parameters) {
            this.parameters = new Nodelist(this);
        }
        return this.parameters;
    };
    Use.prototype.setIdentifier = function (node) {
        return this.setNode('identifier', node, 0);
    };
    Use.prototype.getIdentifier = function () {
        return this.identifier;
    };
    return Use;
}(Node));

var ModuleConfiguration = /** @class */ (function (_super) {
    __extends(ModuleConfiguration, _super);
    function ModuleConfiguration() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ModuleConfiguration.prototype, "type", {
        get: function () {
            return NodeType.ModuleConfiguration;
        },
        enumerable: true,
        configurable: true
    });
    ModuleConfiguration.prototype.setIdentifier = function (node) {
        return this.setNode('identifier', node, 0);
    };
    ModuleConfiguration.prototype.getIdentifier = function () {
        return this.identifier;
    };
    ModuleConfiguration.prototype.getName = function () {
        return this.identifier ? this.identifier.getText() : '';
    };
    ModuleConfiguration.prototype.setValue = function (node) {
        return this.setNode('value', node, 0);
    };
    ModuleConfiguration.prototype.getValue = function () {
        return this.value;
    };
    return ModuleConfiguration;
}(Node));

var Forward = /** @class */ (function (_super) {
    __extends(Forward, _super);
    function Forward() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Forward.prototype, "type", {
        get: function () {
            return NodeType.Forward;
        },
        enumerable: true,
        configurable: true
    });
    Forward.prototype.setIdentifier = function (node) {
        return this.setNode('identifier', node, 0);
    };
    Forward.prototype.getIdentifier = function () {
        return this.identifier;
    };
    return Forward;
}(Node));

var ForwardVisibility = /** @class */ (function (_super) {
    __extends(ForwardVisibility, _super);
    function ForwardVisibility() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ForwardVisibility.prototype, "type", {
        get: function () {
            return NodeType.ForwardVisibility;
        },
        enumerable: true,
        configurable: true
    });
    ForwardVisibility.prototype.setIdentifier = function (node) {
        return this.setNode('identifier', node, 0);
    };
    ForwardVisibility.prototype.getIdentifier = function () {
        return this.identifier;
    };
    return ForwardVisibility;
}(Node));

var Namespace = /** @class */ (function (_super) {
    __extends(Namespace, _super);
    function Namespace(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Namespace.prototype, "type", {
        get: function () {
            return NodeType.Namespace;
        },
        enumerable: true,
        configurable: true
    });
    return Namespace;
}(Node));

var Media = /** @class */ (function (_super) {
    __extends(Media, _super);
    function Media(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Media.prototype, "type", {
        get: function () {
            return NodeType.Media;
        },
        enumerable: true,
        configurable: true
    });
    return Media;
}(BodyDeclaration));

var Supports = /** @class */ (function (_super) {
    __extends(Supports, _super);
    function Supports(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Supports.prototype, "type", {
        get: function () {
            return NodeType.Supports;
        },
        enumerable: true,
        configurable: true
    });
    return Supports;
}(BodyDeclaration));

var Document = /** @class */ (function (_super) {
    __extends(Document, _super);
    function Document(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Document.prototype, "type", {
        get: function () {
            return NodeType.Document;
        },
        enumerable: true,
        configurable: true
    });
    return Document;
}(BodyDeclaration));

var Medialist = /** @class */ (function (_super) {
    __extends(Medialist, _super);
    function Medialist(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Medialist.prototype.getMediums = function () {
        if (!this.mediums) {
            this.mediums = new Nodelist(this);
        }
        return this.mediums;
    };
    return Medialist;
}(Node));

var MediaQuery = /** @class */ (function (_super) {
    __extends(MediaQuery, _super);
    function MediaQuery(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(MediaQuery.prototype, "type", {
        get: function () {
            return NodeType.MediaQuery;
        },
        enumerable: true,
        configurable: true
    });
    return MediaQuery;
}(Node));

var SupportsCondition = /** @class */ (function (_super) {
    __extends(SupportsCondition, _super);
    function SupportsCondition(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(SupportsCondition.prototype, "type", {
        get: function () {
            return NodeType.SupportsCondition;
        },
        enumerable: true,
        configurable: true
    });
    return SupportsCondition;
}(Node));

var Page = /** @class */ (function (_super) {
    __extends(Page, _super);
    function Page(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Page.prototype, "type", {
        get: function () {
            return NodeType.Page;
        },
        enumerable: true,
        configurable: true
    });
    return Page;
}(BodyDeclaration));

var PageBoxMarginBox = /** @class */ (function (_super) {
    __extends(PageBoxMarginBox, _super);
    function PageBoxMarginBox(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(PageBoxMarginBox.prototype, "type", {
        get: function () {
            return NodeType.PageBoxMarginBox;
        },
        enumerable: true,
        configurable: true
    });
    return PageBoxMarginBox;
}(BodyDeclaration));

var Expression = /** @class */ (function (_super) {
    __extends(Expression, _super);
    function Expression(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Expression.prototype, "type", {
        get: function () {
            return NodeType.Expression;
        },
        enumerable: true,
        configurable: true
    });
    return Expression;
}(Node));

var BinaryExpression = /** @class */ (function (_super) {
    __extends(BinaryExpression, _super);
    function BinaryExpression(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(BinaryExpression.prototype, "type", {
        get: function () {
            return NodeType.BinaryExpression;
        },
        enumerable: true,
        configurable: true
    });
    BinaryExpression.prototype.setLeft = function (left) {
        return this.setNode('left', left);
    };
    BinaryExpression.prototype.getLeft = function () {
        return this.left;
    };
    BinaryExpression.prototype.setRight = function (right) {
        return this.setNode('right', right);
    };
    BinaryExpression.prototype.getRight = function () {
        return this.right;
    };
    BinaryExpression.prototype.setOperator = function (value) {
        return this.setNode('operator', value);
    };
    BinaryExpression.prototype.getOperator = function () {
        return this.operator;
    };
    return BinaryExpression;
}(Node));

var Term = /** @class */ (function (_super) {
    __extends(Term, _super);
    function Term(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Term.prototype, "type", {
        get: function () {
            return NodeType.Term;
        },
        enumerable: true,
        configurable: true
    });
    Term.prototype.setOperator = function (value) {
        return this.setNode('operator', value);
    };
    Term.prototype.getOperator = function () {
        return this.operator;
    };
    Term.prototype.setExpression = function (value) {
        return this.setNode('expression', value);
    };
    Term.prototype.getExpression = function () {
        return this.expression;
    };
    return Term;
}(Node));

var AttributeSelector = /** @class */ (function (_super) {
    __extends(AttributeSelector, _super);
    function AttributeSelector(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(AttributeSelector.prototype, "type", {
        get: function () {
            return NodeType.AttributeSelector;
        },
        enumerable: true,
        configurable: true
    });
    AttributeSelector.prototype.setNamespacePrefix = function (value) {
        return this.setNode('namespacePrefix', value);
    };
    AttributeSelector.prototype.getNamespacePrefix = function () {
        return this.namespacePrefix;
    };
    AttributeSelector.prototype.setIdentifier = function (value) {
        return this.setNode('identifier', value);
    };
    AttributeSelector.prototype.getIdentifier = function () {
        return this.identifier;
    };
    AttributeSelector.prototype.setOperator = function (operator) {
        return this.setNode('operator', operator);
    };
    AttributeSelector.prototype.getOperator = function () {
        return this.operator;
    };
    AttributeSelector.prototype.setValue = function (value) {
        return this.setNode('value', value);
    };
    AttributeSelector.prototype.getValue = function () {
        return this.value;
    };
    return AttributeSelector;
}(Node));

var Operator = /** @class */ (function (_super) {
    __extends(Operator, _super);
    function Operator(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Operator.prototype, "type", {
        get: function () {
            return NodeType.Operator;
        },
        enumerable: true,
        configurable: true
    });
    return Operator;
}(Node));

var HexColorValue = /** @class */ (function (_super) {
    __extends(HexColorValue, _super);
    function HexColorValue(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(HexColorValue.prototype, "type", {
        get: function () {
            return NodeType.HexColorValue;
        },
        enumerable: true,
        configurable: true
    });
    return HexColorValue;
}(Node));

var _dot = '.'.charCodeAt(0), _0 = '0'.charCodeAt(0), _9 = '9'.charCodeAt(0);
var NumericValue = /** @class */ (function (_super) {
    __extends(NumericValue, _super);
    function NumericValue(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(NumericValue.prototype, "type", {
        get: function () {
            return NodeType.NumericValue;
        },
        enumerable: true,
        configurable: true
    });
    NumericValue.prototype.getValue = function () {
        var raw = this.getText();
        var unitIdx = 0;
        var code;
        for (var i = 0, len = raw.length; i < len; i++) {
            code = raw.charCodeAt(i);
            if (!(_0 <= code && code <= _9 || code === _dot)) {
                break;
            }
            unitIdx += 1;
        }
        return {
            value: raw.substring(0, unitIdx),
            unit: unitIdx < raw.length ? raw.substring(unitIdx) : undefined
        };
    };
    return NumericValue;
}(Node));

var VariableDeclaration = /** @class */ (function (_super) {
    __extends(VariableDeclaration, _super);
    function VariableDeclaration(offset, length) {
        var _this = _super.call(this, offset, length) || this;
        _this.variable = null;
        _this.value = null;
        _this.needsSemicolon = true;
        return _this;
    }
    Object.defineProperty(VariableDeclaration.prototype, "type", {
        get: function () {
            return NodeType.VariableDeclaration;
        },
        enumerable: true,
        configurable: true
    });
    VariableDeclaration.prototype.setVariable = function (node) {
        if (node) {
            node.attachTo(this);
            this.variable = node;
            return true;
        }
        return false;
    };
    VariableDeclaration.prototype.getVariable = function () {
        return this.variable;
    };
    VariableDeclaration.prototype.getName = function () {
        return this.variable ? this.variable.getName() : '';
    };
    VariableDeclaration.prototype.setValue = function (node) {
        if (node) {
            node.attachTo(this);
            this.value = node;
            return true;
        }
        return false;
    };
    VariableDeclaration.prototype.getValue = function () {
        return this.value;
    };
    return VariableDeclaration;
}(AbstractDeclaration));

var Interpolation = /** @class */ (function (_super) {
    __extends(Interpolation, _super);
    // private _interpolations: void; // workaround for https://github.com/Microsoft/TypeScript/issues/18276
    function Interpolation(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Interpolation.prototype, "type", {
        get: function () {
            return NodeType.Interpolation;
        },
        enumerable: true,
        configurable: true
    });
    return Interpolation;
}(Node));

var Variable = /** @class */ (function (_super) {
    __extends(Variable, _super);
    function Variable(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(Variable.prototype, "type", {
        get: function () {
            return NodeType.VariableName;
        },
        enumerable: true,
        configurable: true
    });
    Variable.prototype.getName = function () {
        return this.getText();
    };
    return Variable;
}(Node));

var ExtendsReference = /** @class */ (function (_super) {
    __extends(ExtendsReference, _super);
    function ExtendsReference(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(ExtendsReference.prototype, "type", {
        get: function () {
            return NodeType.ExtendsReference;
        },
        enumerable: true,
        configurable: true
    });
    ExtendsReference.prototype.getSelectors = function () {
        if (!this.selectors) {
            this.selectors = new Nodelist(this);
        }
        return this.selectors;
    };
    return ExtendsReference;
}(Node));

var MixinContentReference = /** @class */ (function (_super) {
    __extends(MixinContentReference, _super);
    function MixinContentReference(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(MixinContentReference.prototype, "type", {
        get: function () {
            return NodeType.MixinContentReference;
        },
        enumerable: true,
        configurable: true
    });
    MixinContentReference.prototype.getArguments = function () {
        if (!this.arguments) {
            this.arguments = new Nodelist(this);
        }
        return this.arguments;
    };
    return MixinContentReference;
}(Node));

var MixinContentDeclaration = /** @class */ (function (_super) {
    __extends(MixinContentDeclaration, _super);
    function MixinContentDeclaration(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(MixinContentDeclaration.prototype, "type", {
        get: function () {
            return NodeType.MixinContentReference;
        },
        enumerable: true,
        configurable: true
    });
    MixinContentDeclaration.prototype.getParameters = function () {
        if (!this.parameters) {
            this.parameters = new Nodelist(this);
        }
        return this.parameters;
    };
    return MixinContentDeclaration;
}(BodyDeclaration));

var MixinReference = /** @class */ (function (_super) {
    __extends(MixinReference, _super);
    function MixinReference(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(MixinReference.prototype, "type", {
        get: function () {
            return NodeType.MixinReference;
        },
        enumerable: true,
        configurable: true
    });
    MixinReference.prototype.getNamespaces = function () {
        if (!this.namespaces) {
            this.namespaces = new Nodelist(this);
        }
        return this.namespaces;
    };
    MixinReference.prototype.setIdentifier = function (node) {
        return this.setNode('identifier', node, 0);
    };
    MixinReference.prototype.getIdentifier = function () {
        return this.identifier;
    };
    MixinReference.prototype.getName = function () {
        return this.identifier ? this.identifier.getText() : '';
    };
    MixinReference.prototype.getArguments = function () {
        if (!this.arguments) {
            this.arguments = new Nodelist(this);
        }
        return this.arguments;
    };
    MixinReference.prototype.setContent = function (node) {
        return this.setNode('content', node);
    };
    MixinReference.prototype.getContent = function () {
        return this.content;
    };
    return MixinReference;
}(Node));

var MixinDeclaration = /** @class */ (function (_super) {
    __extends(MixinDeclaration, _super);
    function MixinDeclaration(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(MixinDeclaration.prototype, "type", {
        get: function () {
            return NodeType.MixinDeclaration;
        },
        enumerable: true,
        configurable: true
    });
    MixinDeclaration.prototype.setIdentifier = function (node) {
        return this.setNode('identifier', node, 0);
    };
    MixinDeclaration.prototype.getIdentifier = function () {
        return this.identifier;
    };
    MixinDeclaration.prototype.getName = function () {
        return this.identifier ? this.identifier.getText() : '';
    };
    MixinDeclaration.prototype.getParameters = function () {
        if (!this.parameters) {
            this.parameters = new Nodelist(this);
        }
        return this.parameters;
    };
    MixinDeclaration.prototype.setGuard = function (node) {
        if (node) {
            node.attachTo(this);
            this.guard = node;
        }
        return false;
    };
    return MixinDeclaration;
}(BodyDeclaration));

var UnknownAtRule = /** @class */ (function (_super) {
    __extends(UnknownAtRule, _super);
    function UnknownAtRule(offset, length) {
        return _super.call(this, offset, length) || this;
    }
    Object.defineProperty(UnknownAtRule.prototype, "type", {
        get: function () {
            return NodeType.UnknownAtRule;
        },
        enumerable: true,
        configurable: true
    });
    UnknownAtRule.prototype.setAtRuleName = function (atRuleName) {
        this.atRuleName = atRuleName;
    };
    UnknownAtRule.prototype.getAtRuleName = function () {
        return this.atRuleName;
    };
    return UnknownAtRule;
}(BodyDeclaration));

var ListEntry = /** @class */ (function (_super) {
    __extends(ListEntry, _super);
    function ListEntry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ListEntry.prototype, "type", {
        get: function () {
            return NodeType.ListEntry;
        },
        enumerable: true,
        configurable: true
    });
    ListEntry.prototype.setKey = function (node) {
        return this.setNode('key', node, 0);
    };
    ListEntry.prototype.setValue = function (node) {
        return this.setNode('value', node, 1);
    };
    return ListEntry;
}(Node));

var LessGuard = /** @class */ (function (_super) {
    __extends(LessGuard, _super);
    function LessGuard() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LessGuard.prototype.getConditions = function () {
        if (!this.conditions) {
            this.conditions = new Nodelist(this);
        }
        return this.conditions;
    };
    return LessGuard;
}(Node));

var GuardCondition = /** @class */ (function (_super) {
    __extends(GuardCondition, _super);
    function GuardCondition() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GuardCondition.prototype.setVariable = function (node) {
        return this.setNode('variable', node);
    };
    return GuardCondition;
}(Node));

var Module = /** @class */ (function (_super) {
    __extends(Module, _super);
    function Module() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Module.prototype, "type", {
        get: function () {
            return NodeType.Module;
        },
        enumerable: true,
        configurable: true
    });
    Module.prototype.setIdentifier = function (node) {
        return this.setNode('identifier', node, 0);
    };
    Module.prototype.getIdentifier = function () {
        return this.identifier;
    };
    return Module;
}(Node));

var Level;
(function (Level) {
    Level[Level["Ignore"] = 1] = "Ignore";
    Level[Level["Warning"] = 2] = "Warning";
    Level[Level["Error"] = 4] = "Error";
})(Level || (Level = {}));
var Marker = /** @class */ (function () {
    function Marker(node, rule, level, message, offset, length) {
        if (offset === void 0) { offset = node.offset; }
        if (length === void 0) { length = node.length; }
        this.node = node;
        this.rule = rule;
        this.level = level;
        this.message = message || rule.message;
        this.offset = offset;
        this.length = length;
    }
    Marker.prototype.getRule = function () {
        return this.rule;
    };
    Marker.prototype.getLevel = function () {
        return this.level;
    };
    Marker.prototype.getOffset = function () {
        return this.offset;
    };
    Marker.prototype.getLength = function () {
        return this.length;
    };
    Marker.prototype.getNode = function () {
        return this.node;
    };
    Marker.prototype.getMessage = function () {
        return this.message;
    };
    return Marker;
}());

/*
export class DefaultVisitor implements IVisitor {

    public visitNode(node:Node):boolean {
        switch (node.type) {
            case NodeType.Stylesheet:
                return this.visitStylesheet(<Stylesheet> node);
            case NodeType.FontFace:
                return this.visitFontFace(<FontFace> node);
            case NodeType.Ruleset:
                return this.visitRuleSet(<RuleSet> node);
            case NodeType.Selector:
                return this.visitSelector(<Selector> node);
            case NodeType.SimpleSelector:
                return this.visitSimpleSelector(<SimpleSelector> node);
            case NodeType.Declaration:
                return this.visitDeclaration(<Declaration> node);
            case NodeType.Function:
                return this.visitFunction(<Function> node);
            case NodeType.FunctionDeclaration:
                return this.visitFunctionDeclaration(<FunctionDeclaration> node);
            case NodeType.FunctionParameter:
                return this.visitFunctionParameter(<FunctionParameter> node);
            case NodeType.FunctionArgument:
                return this.visitFunctionArgument(<FunctionArgument> node);
            case NodeType.Term:
                return this.visitTerm(<Term> node);
            case NodeType.Declaration:
                return this.visitExpression(<Expression> node);
            case NodeType.NumericValue:
                return this.visitNumericValue(<NumericValue> node);
            case NodeType.Page:
                return this.visitPage(<Page> node);
            case NodeType.PageBoxMarginBox:
                return this.visitPageBoxMarginBox(<PageBoxMarginBox> node);
            case NodeType.Property:
                return this.visitProperty(<Property> node);
            case NodeType.NumericValue:
                return this.visitNodelist(<Nodelist> node);
            case NodeType.Import:
                return this.visitImport(<Import> node);
            case NodeType.Namespace:
                return this.visitNamespace(<Namespace> node);
            case NodeType.Keyframe:
                return this.visitKeyframe(<Keyframe> node);
            case NodeType.KeyframeSelector:
                return this.visitKeyframeSelector(<KeyframeSelector> node);
            case NodeType.MixinDeclaration:
                return this.visitMixinDeclaration(<MixinDeclaration> node);
            case NodeType.MixinReference:
                return this.visitMixinReference(<MixinReference> node);
            case NodeType.Variable:
                return this.visitVariable(<Variable> node);
            case NodeType.VariableDeclaration:
                return this.visitVariableDeclaration(<VariableDeclaration> node);
        }
        return this.visitUnknownNode(node);
    }

    public visitFontFace(node:FontFace):boolean {
        return true;
    }

    public visitKeyframe(node:Keyframe):boolean {
        return true;
    }

    public visitKeyframeSelector(node:KeyframeSelector):boolean {
        return true;
    }

    public visitStylesheet(node:Stylesheet):boolean {
        return true;
    }

    public visitProperty(Node:Property):boolean {
        return true;
    }

    public visitRuleSet(node:RuleSet):boolean {
        return true;
    }

    public visitSelector(node:Selector):boolean {
        return true;
    }

    public visitSimpleSelector(node:SimpleSelector):boolean {
        return true;
    }

    public visitDeclaration(node:Declaration):boolean {
        return true;
    }

    public visitFunction(node:Function):boolean {
        return true;
    }

    public visitFunctionDeclaration(node:FunctionDeclaration):boolean {
        return true;
    }

    public visitInvocation(node:Invocation):boolean {
        return true;
    }

    public visitTerm(node:Term):boolean {
        return true;
    }

    public visitImport(node:Import):boolean {
        return true;
    }

    public visitNamespace(node:Namespace):boolean {
        return true;
    }

    public visitExpression(node:Expression):boolean {
        return true;
    }

    public visitNumericValue(node:NumericValue):boolean {
        return true;
    }

    public visitPage(node:Page):boolean {
        return true;
    }

    public visitPageBoxMarginBox(node:PageBoxMarginBox):boolean {
        return true;
    }

    public visitNodelist(node:Nodelist):boolean {
        return true;
    }

    public visitVariableDeclaration(node:VariableDeclaration):boolean {
        return true;
    }

    public visitVariable(node:Variable):boolean {
        return true;
    }

    public visitMixinDeclaration(node:MixinDeclaration):boolean {
        return true;
    }

    public visitMixinReference(node:MixinReference):boolean {
        return true;
    }

    public visitUnknownNode(node:Node):boolean {
        return true;
    }
}
*/
var ParseErrorCollector = /** @class */ (function () {
    function ParseErrorCollector() {
        this.entries = [];
    }
    ParseErrorCollector.entries = function (node) {
        var visitor = new ParseErrorCollector();
        node.acceptVisitor(visitor);
        return visitor.entries;
    };
    ParseErrorCollector.prototype.visitNode = function (node) {
        if (node.isErroneous()) {
            node.collectIssues(this.entries);
        }
        return true;
    };
    return ParseErrorCollector;
}());



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssParser.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssParser.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Parser": () => /* binding */ Parser
/* harmony export */ });
/* harmony import */ var _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssScanner.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssScanner.js");
/* harmony import */ var _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cssErrors.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssErrors.js");
/* harmony import */ var _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../languageFacts/facts.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/facts.js");
/* harmony import */ var _utils_objects_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/objects.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/objects.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};





/// <summary>
/// A parser for the css core specification. See for reference:
/// https://www.w3.org/TR/CSS21/grammar.html
/// http://www.w3.org/TR/CSS21/syndata.html#tokenization
/// </summary>
var Parser = /** @class */ (function () {
    function Parser(scnr) {
        if (scnr === void 0) { scnr = new _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.Scanner(); }
        this.keyframeRegex = /^@(\-(webkit|ms|moz|o)\-)?keyframes$/i;
        this.scanner = scnr;
        this.token = { type: _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF, offset: -1, len: 0, text: '' };
        this.prevToken = undefined;
    }
    Parser.prototype.peekIdent = function (text) {
        return _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident === this.token.type && text.length === this.token.text.length && text === this.token.text.toLowerCase();
    };
    Parser.prototype.peekKeyword = function (text) {
        return _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword === this.token.type && text.length === this.token.text.length && text === this.token.text.toLowerCase();
    };
    Parser.prototype.peekDelim = function (text) {
        return _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Delim === this.token.type && text === this.token.text;
    };
    Parser.prototype.peek = function (type) {
        return type === this.token.type;
    };
    Parser.prototype.peekRegExp = function (type, regEx) {
        if (type !== this.token.type) {
            return false;
        }
        return regEx.test(this.token.text);
    };
    Parser.prototype.hasWhitespace = function () {
        return !!this.prevToken && (this.prevToken.offset + this.prevToken.len !== this.token.offset);
    };
    Parser.prototype.consumeToken = function () {
        this.prevToken = this.token;
        this.token = this.scanner.scan();
    };
    Parser.prototype.mark = function () {
        return {
            prev: this.prevToken,
            curr: this.token,
            pos: this.scanner.pos()
        };
    };
    Parser.prototype.restoreAtMark = function (mark) {
        this.prevToken = mark.prev;
        this.token = mark.curr;
        this.scanner.goBackTo(mark.pos);
    };
    Parser.prototype.try = function (func) {
        var pos = this.mark();
        var node = func();
        if (!node) {
            this.restoreAtMark(pos);
            return null;
        }
        return node;
    };
    Parser.prototype.acceptOneKeyword = function (keywords) {
        if (_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword === this.token.type) {
            for (var _i = 0, keywords_1 = keywords; _i < keywords_1.length; _i++) {
                var keyword = keywords_1[_i];
                if (keyword.length === this.token.text.length && keyword === this.token.text.toLowerCase()) {
                    this.consumeToken();
                    return true;
                }
            }
        }
        return false;
    };
    Parser.prototype.accept = function (type) {
        if (type === this.token.type) {
            this.consumeToken();
            return true;
        }
        return false;
    };
    Parser.prototype.acceptIdent = function (text) {
        if (this.peekIdent(text)) {
            this.consumeToken();
            return true;
        }
        return false;
    };
    Parser.prototype.acceptKeyword = function (text) {
        if (this.peekKeyword(text)) {
            this.consumeToken();
            return true;
        }
        return false;
    };
    Parser.prototype.acceptDelim = function (text) {
        if (this.peekDelim(text)) {
            this.consumeToken();
            return true;
        }
        return false;
    };
    Parser.prototype.acceptRegexp = function (regEx) {
        if (regEx.test(this.token.text)) {
            this.consumeToken();
            return true;
        }
        return false;
    };
    Parser.prototype._parseRegexp = function (regEx) {
        var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Identifier);
        do { } while (this.acceptRegexp(regEx));
        return this.finish(node);
    };
    Parser.prototype.acceptUnquotedString = function () {
        var pos = this.scanner.pos();
        this.scanner.goBackTo(this.token.offset);
        var unquoted = this.scanner.scanUnquotedString();
        if (unquoted) {
            this.token = unquoted;
            this.consumeToken();
            return true;
        }
        this.scanner.goBackTo(pos);
        return false;
    };
    Parser.prototype.resync = function (resyncTokens, resyncStopTokens) {
        while (true) {
            if (resyncTokens && resyncTokens.indexOf(this.token.type) !== -1) {
                this.consumeToken();
                return true;
            }
            else if (resyncStopTokens && resyncStopTokens.indexOf(this.token.type) !== -1) {
                return true;
            }
            else {
                if (this.token.type === _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF) {
                    return false;
                }
                this.token = this.scanner.scan();
            }
        }
    };
    Parser.prototype.createNode = function (nodeType) {
        return new _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node(this.token.offset, this.token.len, nodeType);
    };
    Parser.prototype.create = function (ctor) {
        return new ctor(this.token.offset, this.token.len);
    };
    Parser.prototype.finish = function (node, error, resyncTokens, resyncStopTokens) {
        // parseNumeric misuses error for boolean flagging (however the real error mustn't be a false)
        // + nodelist offsets mustn't be modified, because there is a offset hack in rulesets for smartselection
        if (!(node instanceof _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Nodelist)) {
            if (error) {
                this.markError(node, error, resyncTokens, resyncStopTokens);
            }
            // set the node end position
            if (this.prevToken) {
                // length with more elements belonging together
                var prevEnd = this.prevToken.offset + this.prevToken.len;
                node.length = prevEnd > node.offset ? prevEnd - node.offset : 0; // offset is taken from current token, end from previous: Use 0 for empty nodes
            }
        }
        return node;
    };
    Parser.prototype.markError = function (node, error, resyncTokens, resyncStopTokens) {
        if (this.token !== this.lastErrorToken) { // do not report twice on the same token
            node.addIssue(new _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Marker(node, error, _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Level.Error, undefined, this.token.offset, this.token.len));
            this.lastErrorToken = this.token;
        }
        if (resyncTokens || resyncStopTokens) {
            this.resync(resyncTokens, resyncStopTokens);
        }
    };
    Parser.prototype.parseStylesheet = function (textDocument) {
        var versionId = textDocument.version;
        var text = textDocument.getText();
        var textProvider = function (offset, length) {
            if (textDocument.version !== versionId) {
                throw new Error('Underlying model has changed, AST is no longer valid');
            }
            return text.substr(offset, length);
        };
        return this.internalParse(text, this._parseStylesheet, textProvider);
    };
    Parser.prototype.internalParse = function (input, parseFunc, textProvider) {
        this.scanner.setSource(input);
        this.token = this.scanner.scan();
        var node = parseFunc.bind(this)();
        if (node) {
            if (textProvider) {
                node.textProvider = textProvider;
            }
            else {
                node.textProvider = function (offset, length) { return input.substr(offset, length); };
            }
        }
        return node;
    };
    Parser.prototype._parseStylesheet = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Stylesheet);
        while (node.addChild(this._parseStylesheetStart())) {
            // Parse statements only valid at the beginning of stylesheets.
        }
        var inRecovery = false;
        do {
            var hasMatch = false;
            do {
                hasMatch = false;
                var statement = this._parseStylesheetStatement();
                if (statement) {
                    node.addChild(statement);
                    hasMatch = true;
                    inRecovery = false;
                    if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF) && this._needsSemicolonAfter(statement) && !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                        this.markError(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.SemiColonExpected);
                    }
                }
                while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon) || this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CDO) || this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CDC)) {
                    // accept empty statements
                    hasMatch = true;
                    inRecovery = false;
                }
            } while (hasMatch);
            if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF)) {
                break;
            }
            if (!inRecovery) {
                if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
                    this.markError(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.UnknownAtRule);
                }
                else {
                    this.markError(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RuleOrSelectorExpected);
                }
                inRecovery = true;
            }
            this.consumeToken();
        } while (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF));
        return this.finish(node);
    };
    Parser.prototype._parseStylesheetStart = function () {
        return this._parseCharset();
    };
    Parser.prototype._parseStylesheetStatement = function (isNested) {
        if (isNested === void 0) { isNested = false; }
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return this._parseStylesheetAtStatement(isNested);
        }
        return this._parseRuleset(isNested);
    };
    Parser.prototype._parseStylesheetAtStatement = function (isNested) {
        if (isNested === void 0) { isNested = false; }
        return this._parseImport()
            || this._parseMedia(isNested)
            || this._parsePage()
            || this._parseFontFace()
            || this._parseKeyframe()
            || this._parseSupports(isNested)
            || this._parseViewPort()
            || this._parseNamespace()
            || this._parseDocument()
            || this._parseUnknownAtRule();
    };
    Parser.prototype._tryParseRuleset = function (isNested) {
        var mark = this.mark();
        if (this._parseSelector(isNested)) {
            while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma) && this._parseSelector(isNested)) {
                // loop
            }
            if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL)) {
                this.restoreAtMark(mark);
                return this._parseRuleset(isNested);
            }
        }
        this.restoreAtMark(mark);
        return null;
    };
    Parser.prototype._parseRuleset = function (isNested) {
        if (isNested === void 0) { isNested = false; }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.RuleSet);
        var selectors = node.getSelectors();
        if (!selectors.addChild(this._parseSelector(isNested))) {
            return null;
        }
        while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
            if (!selectors.addChild(this._parseSelector(isNested))) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.SelectorExpected);
            }
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    };
    Parser.prototype._parseRuleSetDeclarationAtStatement = function () {
        return this._parseAtApply()
            || this._parseUnknownAtRule();
    };
    Parser.prototype._parseRuleSetDeclaration = function () {
        // https://www.w3.org/TR/css-syntax-3/#consume-a-list-of-declarations0
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return this._parseRuleSetDeclarationAtStatement();
        }
        return this._tryParseCustomPropertyDeclaration()
            || this._parseDeclaration();
    };
    /**
     * Parses declarations like:
     *   @apply --my-theme;
     *
     * Follows https://tabatkins.github.io/specs/css-apply-rule/#using
     */
    Parser.prototype._parseAtApply = function () {
        if (!this.peekKeyword('@apply')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.AtApplyRule);
        this.consumeToken();
        if (!node.setIdentifier(this._parseIdent([_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceType.Variable]))) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        return this.finish(node);
    };
    Parser.prototype._needsSemicolonAfter = function (node) {
        switch (node.type) {
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Keyframe:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.ViewPort:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Media:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Ruleset:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Namespace:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.If:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.For:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Each:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.While:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.MixinDeclaration:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.FunctionDeclaration:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.MixinContentDeclaration:
                return false;
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.ExtendsReference:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.MixinContentReference:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.ReturnStatement:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.MediaQuery:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Debug:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Import:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.AtApplyRule:
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.CustomPropertyDeclaration:
                return true;
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.VariableDeclaration:
                return node.needsSemicolon;
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.MixinReference:
                return !node.getContent();
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Declaration:
                return !node.getNestedProperties();
        }
        return false;
    };
    Parser.prototype._parseDeclarations = function (parseDeclaration) {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Declarations);
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL)) {
            return null;
        }
        var decl = parseDeclaration();
        while (node.addChild(decl)) {
            if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR)) {
                break;
            }
            if (this._needsSemicolonAfter(decl) && !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.SemiColonExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon, _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR]);
            }
            // We accepted semicolon token. Link it to declaration.
            if (decl && this.prevToken && this.prevToken.type === _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon) {
                decl.semicolonPosition = this.prevToken.offset;
            }
            while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                // accept empty statements
            }
            decl = parseDeclaration();
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightCurlyExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR, _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon]);
        }
        return this.finish(node);
    };
    Parser.prototype._parseBody = function (node, parseDeclaration) {
        if (!node.setDeclarations(this._parseDeclarations(parseDeclaration))) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftCurlyExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR, _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon]);
        }
        return this.finish(node);
    };
    Parser.prototype._parseSelector = function (isNested) {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Selector);
        var hasContent = false;
        if (isNested) {
            // nested selectors can start with a combinator
            hasContent = node.addChild(this._parseCombinator());
        }
        while (node.addChild(this._parseSimpleSelector())) {
            hasContent = true;
            node.addChild(this._parseCombinator()); // optional
        }
        return hasContent ? this.finish(node) : null;
    };
    Parser.prototype._parseDeclaration = function (resyncStopTokens) {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Declaration);
        if (!node.setProperty(this._parseProperty())) {
            return null;
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            var stopTokens = resyncStopTokens ? __spreadArrays(resyncStopTokens, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon]) : [_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon];
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.ColonExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon], stopTokens);
        }
        if (this.prevToken) {
            node.colonPosition = this.prevToken.offset;
        }
        if (!node.setValue(this._parseExpr())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.PropertyValueExpected);
        }
        node.addChild(this._parsePrio());
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
            node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
        }
        return this.finish(node);
    };
    Parser.prototype._tryParseCustomPropertyDeclaration = function () {
        if (!this.peekRegExp(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident, /^--/)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.CustomPropertyDeclaration);
        if (!node.setProperty(this._parseProperty())) {
            return null;
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.ColonExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon]);
        }
        if (this.prevToken) {
            node.colonPosition = this.prevToken.offset;
        }
        var mark = this.mark();
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL)) {
            // try to parse it as nested declaration
            var propertySet = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.CustomPropertySet);
            var declarations = this._parseDeclarations(this._parseRuleSetDeclaration.bind(this));
            if (propertySet.setDeclarations(declarations) && !declarations.isErroneous(true)) {
                propertySet.addChild(this._parsePrio());
                if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                    this.finish(propertySet);
                    node.setPropertySet(propertySet);
                    node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
                    return this.finish(node);
                }
            }
            this.restoreAtMark(mark);
        }
        // try tp parse as expression
        var expression = this._parseExpr();
        if (expression && !expression.isErroneous(true)) {
            this._parsePrio();
            if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                node.setValue(expression);
                node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
                return this.finish(node);
            }
        }
        this.restoreAtMark(mark);
        node.addChild(this._parseCustomPropertyValue());
        node.addChild(this._parsePrio());
        if ((0,_utils_objects_js__WEBPACK_IMPORTED_MODULE_4__.isDefined)(node.colonPosition) && this.token.offset === node.colonPosition + 1) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.PropertyValueExpected);
        }
        return this.finish(node);
    };
    /**
     * Parse custom property values.
     *
     * Based on https://www.w3.org/TR/css-variables/#syntax
     *
     * This code is somewhat unusual, as the allowed syntax is incredibly broad,
     * parsing almost any sequence of tokens, save for a small set of exceptions.
     * Unbalanced delimitors, invalid tokens, and declaration
     * terminators like semicolons and !important directives (when not inside
     * of delimitors).
     */
    Parser.prototype._parseCustomPropertyValue = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node);
        var isTopLevel = function () { return curlyDepth === 0 && parensDepth === 0 && bracketsDepth === 0; };
        var curlyDepth = 0;
        var parensDepth = 0;
        var bracketsDepth = 0;
        done: while (true) {
            switch (this.token.type) {
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon:
                    // A semicolon only ends things if we're not inside a delimitor.
                    if (isTopLevel()) {
                        break done;
                    }
                    break;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Exclamation:
                    // An exclamation ends the value if we're not inside delims.
                    if (isTopLevel()) {
                        break done;
                    }
                    break;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL:
                    curlyDepth++;
                    break;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR:
                    curlyDepth--;
                    if (curlyDepth < 0) {
                        // The property value has been terminated without a semicolon, and
                        // this is the last declaration in the ruleset.
                        if (parensDepth === 0 && bracketsDepth === 0) {
                            break done;
                        }
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftCurlyExpected);
                    }
                    break;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL:
                    parensDepth++;
                    break;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR:
                    parensDepth--;
                    if (parensDepth < 0) {
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected);
                    }
                    break;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketL:
                    bracketsDepth++;
                    break;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketR:
                    bracketsDepth--;
                    if (bracketsDepth < 0) {
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftSquareBracketExpected);
                    }
                    break;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.BadString: // fall through
                    break done;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF:
                    // We shouldn't have reached the end of input, something is
                    // unterminated.
                    var error = _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightCurlyExpected;
                    if (bracketsDepth > 0) {
                        error = _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected;
                    }
                    else if (parensDepth > 0) {
                        error = _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected;
                    }
                    return this.finish(node, error);
            }
            this.consumeToken();
        }
        return this.finish(node);
    };
    Parser.prototype._tryToParseDeclaration = function () {
        var mark = this.mark();
        if (this._parseProperty() && this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            // looks like a declaration, go ahead
            this.restoreAtMark(mark);
            return this._parseDeclaration();
        }
        this.restoreAtMark(mark);
        return null;
    };
    Parser.prototype._parseProperty = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Property);
        var mark = this.mark();
        if (this.acceptDelim('*') || this.acceptDelim('_')) {
            // support for  IE 5.x, 6 and 7 star hack: see http://en.wikipedia.org/wiki/CSS_filter#Star_hack
            if (this.hasWhitespace()) {
                this.restoreAtMark(mark);
                return null;
            }
        }
        if (node.setIdentifier(this._parsePropertyIdentifier())) {
            return this.finish(node);
        }
        return null;
    };
    Parser.prototype._parsePropertyIdentifier = function () {
        return this._parseIdent();
    };
    Parser.prototype._parseCharset = function () {
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Charset)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node);
        this.consumeToken(); // charset
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.String)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.SemiColonExpected);
        }
        return this.finish(node);
    };
    Parser.prototype._parseImport = function () {
        if (!this.peekKeyword('@import')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Import);
        this.consumeToken(); // @import
        if (!node.addChild(this._parseURILiteral()) && !node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.URIOrStringExpected);
        }
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon) && !this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF)) {
            node.setMedialist(this._parseMediaQueryList());
        }
        return this.finish(node);
    };
    Parser.prototype._parseNamespace = function () {
        // http://www.w3.org/TR/css3-namespace/
        // namespace  : NAMESPACE_SYM S* [IDENT S*]? [STRING|URI] S* ';' S*
        if (!this.peekKeyword('@namespace')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Namespace);
        this.consumeToken(); // @namespace
        if (!node.addChild(this._parseURILiteral())) { // url literal also starts with ident
            node.addChild(this._parseIdent()); // optional prefix
            if (!node.addChild(this._parseURILiteral()) && !node.addChild(this._parseStringLiteral())) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.URIExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon]);
            }
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.SemiColonExpected);
        }
        return this.finish(node);
    };
    Parser.prototype._parseFontFace = function () {
        if (!this.peekKeyword('@font-face')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.FontFace);
        this.consumeToken(); // @font-face
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    };
    Parser.prototype._parseViewPort = function () {
        if (!this.peekKeyword('@-ms-viewport') &&
            !this.peekKeyword('@-o-viewport') &&
            !this.peekKeyword('@viewport')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.ViewPort);
        this.consumeToken(); // @-ms-viewport
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    };
    Parser.prototype._parseKeyframe = function () {
        if (!this.peekRegExp(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword, this.keyframeRegex)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Keyframe);
        var atNode = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node);
        this.consumeToken(); // atkeyword
        node.setKeyword(this.finish(atNode));
        if (atNode.matches('@-ms-keyframes')) { // -ms-keyframes never existed
            this.markError(atNode, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.UnknownKeyword);
        }
        if (!node.setIdentifier(this._parseKeyframeIdent())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR]);
        }
        return this._parseBody(node, this._parseKeyframeSelector.bind(this));
    };
    Parser.prototype._parseKeyframeIdent = function () {
        return this._parseIdent([_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceType.Keyframe]);
    };
    Parser.prototype._parseKeyframeSelector = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.KeyframeSelector);
        if (!node.addChild(this._parseIdent()) && !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage)) {
            return null;
        }
        while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
            if (!node.addChild(this._parseIdent()) && !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.PercentageExpected);
            }
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    };
    Parser.prototype._tryParseKeyframeSelector = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.KeyframeSelector);
        var pos = this.mark();
        if (!node.addChild(this._parseIdent()) && !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage)) {
            return null;
        }
        while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
            if (!node.addChild(this._parseIdent()) && !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage)) {
                this.restoreAtMark(pos);
                return null;
            }
        }
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL)) {
            this.restoreAtMark(pos);
            return null;
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    };
    Parser.prototype._parseSupports = function (isNested) {
        if (isNested === void 0) { isNested = false; }
        // SUPPORTS_SYM S* supports_condition '{' S* ruleset* '}' S*
        if (!this.peekKeyword('@supports')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Supports);
        this.consumeToken(); // @supports
        node.addChild(this._parseSupportsCondition());
        return this._parseBody(node, this._parseSupportsDeclaration.bind(this, isNested));
    };
    Parser.prototype._parseSupportsDeclaration = function (isNested) {
        if (isNested === void 0) { isNested = false; }
        if (isNested) {
            // if nested, the body can contain rulesets, but also declarations
            return this._tryParseRuleset(true)
                || this._tryToParseDeclaration()
                || this._parseStylesheetStatement(true);
        }
        return this._parseStylesheetStatement(false);
    };
    Parser.prototype._parseSupportsCondition = function () {
        // supports_condition : supports_negation | supports_conjunction | supports_disjunction | supports_condition_in_parens ;
        // supports_condition_in_parens: ( '(' S* supports_condition S* ')' ) | supports_declaration_condition | general_enclosed ;
        // supports_negation: NOT S+ supports_condition_in_parens ;
        // supports_conjunction: supports_condition_in_parens ( S+ AND S+ supports_condition_in_parens )+;
        // supports_disjunction: supports_condition_in_parens ( S+ OR S+ supports_condition_in_parens )+;
        // supports_declaration_condition: '(' S* declaration ')';
        // general_enclosed: ( FUNCTION | '(' ) ( any | unused )* ')' ;
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.SupportsCondition);
        if (this.acceptIdent('not')) {
            node.addChild(this._parseSupportsConditionInParens());
        }
        else {
            node.addChild(this._parseSupportsConditionInParens());
            if (this.peekRegExp(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident, /^(and|or)$/i)) {
                var text = this.token.text.toLowerCase();
                while (this.acceptIdent(text)) {
                    node.addChild(this._parseSupportsConditionInParens());
                }
            }
        }
        return this.finish(node);
    };
    Parser.prototype._parseSupportsConditionInParens = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.SupportsCondition);
        if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            if (this.prevToken) {
                node.lParent = this.prevToken.offset;
            }
            if (!node.addChild(this._tryToParseDeclaration())) {
                if (!this._parseSupportsCondition()) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.ConditionExpected);
                }
            }
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR], []);
            }
            if (this.prevToken) {
                node.rParent = this.prevToken.offset;
            }
            return this.finish(node);
        }
        else if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident)) {
            var pos = this.mark();
            this.consumeToken();
            if (!this.hasWhitespace() && this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                var openParentCount = 1;
                while (this.token.type !== _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF && openParentCount !== 0) {
                    if (this.token.type === _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL) {
                        openParentCount++;
                    }
                    else if (this.token.type === _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR) {
                        openParentCount--;
                    }
                    this.consumeToken();
                }
                return this.finish(node);
            }
            else {
                this.restoreAtMark(pos);
            }
        }
        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected, [], [_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL]);
    };
    Parser.prototype._parseMediaDeclaration = function (isNested) {
        if (isNested === void 0) { isNested = false; }
        if (isNested) {
            // if nested, the body can contain rulesets, but also declarations
            return this._tryParseRuleset(true)
                || this._tryToParseDeclaration()
                || this._parseStylesheetStatement(true);
        }
        return this._parseStylesheetStatement(false);
    };
    Parser.prototype._parseMedia = function (isNested) {
        if (isNested === void 0) { isNested = false; }
        // MEDIA_SYM S* media_query_list '{' S* ruleset* '}' S*
        // media_query_list : S* [media_query [ ',' S* media_query ]* ]?
        if (!this.peekKeyword('@media')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Media);
        this.consumeToken(); // @media
        if (!node.addChild(this._parseMediaQueryList())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.MediaQueryExpected);
        }
        return this._parseBody(node, this._parseMediaDeclaration.bind(this, isNested));
    };
    Parser.prototype._parseMediaQueryList = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Medialist);
        if (!node.addChild(this._parseMediaQuery([_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL]))) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.MediaQueryExpected);
        }
        while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
            if (!node.addChild(this._parseMediaQuery([_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL]))) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.MediaQueryExpected);
            }
        }
        return this.finish(node);
    };
    Parser.prototype._parseMediaQuery = function (resyncStopToken) {
        // http://www.w3.org/TR/css3-mediaqueries/
        // media_query : [ONLY | NOT]? S* IDENT S* [ AND S* expression ]* | expression [ AND S* expression ]*
        // expression : '(' S* IDENT S* [ ':' S* expr ]? ')' S*
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.MediaQuery);
        var parseExpression = true;
        var hasContent = false;
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            if (this.acceptIdent('only') || this.acceptIdent('not')) {
                // optional
            }
            if (!node.addChild(this._parseIdent())) {
                return null;
            }
            hasContent = true;
            parseExpression = this.acceptIdent('and');
        }
        while (parseExpression) {
            // Allow short-circuting for other language constructs.
            if (node.addChild(this._parseMediaContentStart())) {
                parseExpression = this.acceptIdent('and');
                continue;
            }
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                if (hasContent) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected, [], resyncStopToken);
                }
                return null;
            }
            if (!node.addChild(this._parseMediaFeatureName())) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected, [], resyncStopToken);
            }
            if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
                if (!node.addChild(this._parseExpr())) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.TermExpected, [], resyncStopToken);
                }
            }
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [], resyncStopToken);
            }
            parseExpression = this.acceptIdent('and');
        }
        return this.finish(node);
    };
    Parser.prototype._parseMediaContentStart = function () {
        return null;
    };
    Parser.prototype._parseMediaFeatureName = function () {
        return this._parseIdent();
    };
    Parser.prototype._parseMedium = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (node.addChild(this._parseIdent())) {
            return this.finish(node);
        }
        else {
            return null;
        }
    };
    Parser.prototype._parsePageDeclaration = function () {
        return this._parsePageMarginBox() || this._parseRuleSetDeclaration();
    };
    Parser.prototype._parsePage = function () {
        // http://www.w3.org/TR/css3-page/
        // page_rule : PAGE_SYM S* page_selector_list '{' S* page_body '}' S*
        // page_body :  /* Can be empty */ declaration? [ ';' S* page_body ]? | page_margin_box page_body
        if (!this.peekKeyword('@page')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Page);
        this.consumeToken();
        if (node.addChild(this._parsePageSelector())) {
            while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
                if (!node.addChild(this._parsePageSelector())) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
                }
            }
        }
        return this._parseBody(node, this._parsePageDeclaration.bind(this));
    };
    Parser.prototype._parsePageMarginBox = function () {
        // page_margin_box :  margin_sym S* '{' S* declaration? [ ';' S* declaration? ]* '}' S*
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.PageBoxMarginBox);
        if (!this.acceptOneKeyword(_languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_3__.pageBoxDirectives)) {
            this.markError(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.UnknownAtRule, [], [_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL]);
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    };
    Parser.prototype._parsePageSelector = function () {
        // page_selector : pseudo_page+ | IDENT pseudo_page*
        // pseudo_page :  ':' [ "left" | "right" | "first" | "blank" ];
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident) && !this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node);
        node.addChild(this._parseIdent()); // optional ident
        if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            if (!node.addChild(this._parseIdent())) { // optional ident
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
            }
        }
        return this.finish(node);
    };
    Parser.prototype._parseDocument = function () {
        // -moz-document is experimental but has been pushed to css4
        if (!this.peekKeyword('@-moz-document')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Document);
        this.consumeToken(); // @-moz-document
        this.resync([], [_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL]); // ignore all the rules
        return this._parseBody(node, this._parseStylesheetStatement.bind(this));
    };
    // https://www.w3.org/TR/css-syntax-3/#consume-an-at-rule
    Parser.prototype._parseUnknownAtRule = function () {
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.UnknownAtRule);
        node.addChild(this._parseUnknownAtRuleName());
        var isTopLevel = function () { return curlyDepth === 0 && parensDepth === 0 && bracketsDepth === 0; };
        var curlyLCount = 0;
        var curlyDepth = 0;
        var parensDepth = 0;
        var bracketsDepth = 0;
        done: while (true) {
            switch (this.token.type) {
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon:
                    if (isTopLevel()) {
                        break done;
                    }
                    break;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF:
                    if (curlyDepth > 0) {
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightCurlyExpected);
                    }
                    else if (bracketsDepth > 0) {
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected);
                    }
                    else if (parensDepth > 0) {
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
                    }
                    else {
                        return this.finish(node);
                    }
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL:
                    curlyLCount++;
                    curlyDepth++;
                    break;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR:
                    curlyDepth--;
                    // End of at-rule, consume CurlyR and return node
                    if (curlyLCount > 0 && curlyDepth === 0) {
                        this.consumeToken();
                        if (bracketsDepth > 0) {
                            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected);
                        }
                        else if (parensDepth > 0) {
                            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
                        }
                        break done;
                    }
                    if (curlyDepth < 0) {
                        // The property value has been terminated without a semicolon, and
                        // this is the last declaration in the ruleset.
                        if (parensDepth === 0 && bracketsDepth === 0) {
                            break done;
                        }
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftCurlyExpected);
                    }
                    break;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL:
                    parensDepth++;
                    break;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR:
                    parensDepth--;
                    if (parensDepth < 0) {
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected);
                    }
                    break;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketL:
                    bracketsDepth++;
                    break;
                case _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketR:
                    bracketsDepth--;
                    if (bracketsDepth < 0) {
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftSquareBracketExpected);
                    }
                    break;
            }
            this.consumeToken();
        }
        return node;
    };
    Parser.prototype._parseUnknownAtRuleName = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return this.finish(node);
        }
        return node;
    };
    Parser.prototype._parseOperator = function () {
        // these are operators for binary expressions
        if (this.peekDelim('/') ||
            this.peekDelim('*') ||
            this.peekDelim('+') ||
            this.peekDelim('-') ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dashmatch) ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Includes) ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SubstringOperator) ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.PrefixOperator) ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.SuffixOperator) ||
            this.peekDelim('=')) { // doesn't stick to the standard here
            var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Operator);
            this.consumeToken();
            return this.finish(node);
        }
        else {
            return null;
        }
    };
    Parser.prototype._parseUnaryOperator = function () {
        if (!this.peekDelim('+') && !this.peekDelim('-')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node);
        this.consumeToken();
        return this.finish(node);
    };
    Parser.prototype._parseCombinator = function () {
        if (this.peekDelim('>')) {
            var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node);
            this.consumeToken();
            var mark = this.mark();
            if (!this.hasWhitespace() && this.acceptDelim('>')) {
                if (!this.hasWhitespace() && this.acceptDelim('>')) {
                    node.type = _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorShadowPiercingDescendant;
                    return this.finish(node);
                }
                this.restoreAtMark(mark);
            }
            node.type = _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorParent;
            return this.finish(node);
        }
        else if (this.peekDelim('+')) {
            var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node);
            this.consumeToken();
            node.type = _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorSibling;
            return this.finish(node);
        }
        else if (this.peekDelim('~')) {
            var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node);
            this.consumeToken();
            node.type = _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorAllSiblings;
            return this.finish(node);
        }
        else if (this.peekDelim('/')) {
            var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node);
            this.consumeToken();
            var mark = this.mark();
            if (!this.hasWhitespace() && this.acceptIdent('deep') && !this.hasWhitespace() && this.acceptDelim('/')) {
                node.type = _cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorShadowPiercingDescendant;
                return this.finish(node);
            }
            this.restoreAtMark(mark);
        }
        return null;
    };
    Parser.prototype._parseSimpleSelector = function () {
        // simple_selector
        //  : element_name [ HASH | class | attrib | pseudo ]* | [ HASH | class | attrib | pseudo ]+ ;
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.SimpleSelector);
        var c = 0;
        if (node.addChild(this._parseElementName())) {
            c++;
        }
        while ((c === 0 || !this.hasWhitespace()) && node.addChild(this._parseSimpleSelectorBody())) {
            c++;
        }
        return c > 0 ? this.finish(node) : null;
    };
    Parser.prototype._parseSimpleSelectorBody = function () {
        return this._parsePseudo() || this._parseHash() || this._parseClass() || this._parseAttrib();
    };
    Parser.prototype._parseSelectorIdent = function () {
        return this._parseIdent();
    };
    Parser.prototype._parseHash = function () {
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Hash) && !this.peekDelim('#')) {
            return null;
        }
        var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.IdentifierSelector);
        if (this.acceptDelim('#')) {
            if (this.hasWhitespace() || !node.addChild(this._parseSelectorIdent())) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
            }
        }
        else {
            this.consumeToken(); // TokenType.Hash
        }
        return this.finish(node);
    };
    Parser.prototype._parseClass = function () {
        // class: '.' IDENT ;
        if (!this.peekDelim('.')) {
            return null;
        }
        var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.ClassSelector);
        this.consumeToken(); // '.'
        if (this.hasWhitespace() || !node.addChild(this._parseSelectorIdent())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        return this.finish(node);
    };
    Parser.prototype._parseElementName = function () {
        // element_name: (ns? '|')? IDENT | '*';
        var pos = this.mark();
        var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.ElementNameSelector);
        node.addChild(this._parseNamespacePrefix());
        if (!node.addChild(this._parseSelectorIdent()) && !this.acceptDelim('*')) {
            this.restoreAtMark(pos);
            return null;
        }
        return this.finish(node);
    };
    Parser.prototype._parseNamespacePrefix = function () {
        var pos = this.mark();
        var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.NamespacePrefix);
        if (!node.addChild(this._parseIdent()) && !this.acceptDelim('*')) {
            // ns is optional
        }
        if (!this.acceptDelim('|')) {
            this.restoreAtMark(pos);
            return null;
        }
        return this.finish(node);
    };
    Parser.prototype._parseAttrib = function () {
        // attrib : '[' S* IDENT S* [ [ '=' | INCLUDES | DASHMATCH ] S*   [ IDENT | STRING ] S* ]? ']'
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketL)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.AttributeSelector);
        this.consumeToken(); // BracketL
        // Optional attrib namespace
        node.setNamespacePrefix(this._parseNamespacePrefix());
        if (!node.setIdentifier(this._parseIdent())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        if (node.setOperator(this._parseOperator())) {
            node.setValue(this._parseBinaryExpr());
            this.acceptIdent('i'); // case insensitive matching
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketR)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected);
        }
        return this.finish(node);
    };
    Parser.prototype._parsePseudo = function () {
        var _this = this;
        // pseudo: ':' [ IDENT | FUNCTION S* [IDENT S*]? ')' ]
        var node = this._tryParsePseudoIdentifier();
        if (node) {
            if (!this.hasWhitespace() && this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                var tryAsSelector = function () {
                    var selectors = _this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node);
                    if (!selectors.addChild(_this._parseSelector(false))) {
                        return null;
                    }
                    while (_this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma) && selectors.addChild(_this._parseSelector(false))) {
                        // loop
                    }
                    if (_this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                        return _this.finish(selectors);
                    }
                    return null;
                };
                node.addChild(this.try(tryAsSelector) || this._parseBinaryExpr());
                if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
                }
            }
            return this.finish(node);
        }
        return null;
    };
    Parser.prototype._tryParsePseudoIdentifier = function () {
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            return null;
        }
        var pos = this.mark();
        var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.PseudoSelector);
        this.consumeToken(); // Colon
        if (this.hasWhitespace()) {
            this.restoreAtMark(pos);
            return null;
        }
        // optional, support ::
        if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon) && this.hasWhitespace()) {
            this.markError(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        if (!node.addChild(this._parseIdent())) {
            this.markError(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        return node;
    };
    Parser.prototype._tryParsePrio = function () {
        var mark = this.mark();
        var prio = this._parsePrio();
        if (prio) {
            return prio;
        }
        this.restoreAtMark(mark);
        return null;
    };
    Parser.prototype._parsePrio = function () {
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Exclamation)) {
            return null;
        }
        var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Prio);
        if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Exclamation) && this.acceptIdent('important')) {
            return this.finish(node);
        }
        return null;
    };
    Parser.prototype._parseExpr = function (stopOnComma) {
        if (stopOnComma === void 0) { stopOnComma = false; }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Expression);
        if (!node.addChild(this._parseBinaryExpr())) {
            return null;
        }
        while (true) {
            if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) { // optional
                if (stopOnComma) {
                    return this.finish(node);
                }
                this.consumeToken();
            }
            if (!node.addChild(this._parseBinaryExpr())) {
                break;
            }
        }
        return this.finish(node);
    };
    Parser.prototype._parseNamedLine = function () {
        // https://www.w3.org/TR/css-grid-1/#named-lines
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketL)) {
            return null;
        }
        var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.GridLine);
        this.consumeToken();
        while (node.addChild(this._parseIdent())) {
            // repeat
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketR)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected);
        }
        return this.finish(node);
    };
    Parser.prototype._parseBinaryExpr = function (preparsedLeft, preparsedOper) {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.BinaryExpression);
        if (!node.setLeft((preparsedLeft || this._parseTerm()))) {
            return null;
        }
        if (!node.setOperator(preparsedOper || this._parseOperator())) {
            return this.finish(node);
        }
        if (!node.setRight(this._parseTerm())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.TermExpected);
        }
        // things needed for multiple binary expressions
        node = this.finish(node);
        var operator = this._parseOperator();
        if (operator) {
            node = this._parseBinaryExpr(node, operator);
        }
        return this.finish(node);
    };
    Parser.prototype._parseTerm = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Term);
        node.setOperator(this._parseUnaryOperator()); // optional
        if (node.setExpression(this._parseTermExpression())) {
            return this.finish(node);
        }
        return null;
    };
    Parser.prototype._parseTermExpression = function () {
        return this._parseURILiteral() || // url before function
            this._parseFunction() || // function before ident
            this._parseIdent() ||
            this._parseStringLiteral() ||
            this._parseNumeric() ||
            this._parseHexColor() ||
            this._parseOperation() ||
            this._parseNamedLine();
    };
    Parser.prototype._parseOperation = function () {
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node);
        this.consumeToken(); // ParenthesisL
        node.addChild(this._parseExpr());
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    };
    Parser.prototype._parseNumeric = function () {
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Num) ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage) ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Resolution) ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Length) ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.EMS) ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.EXS) ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Angle) ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Time) ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dimension) ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Freq)) {
            var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NumericValue);
            this.consumeToken();
            return this.finish(node);
        }
        return null;
    };
    Parser.prototype._parseStringLiteral = function () {
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.String) && !this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.BadString)) {
            return null;
        }
        var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.StringLiteral);
        this.consumeToken();
        return this.finish(node);
    };
    Parser.prototype._parseURILiteral = function () {
        if (!this.peekRegExp(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident, /^url(-prefix)?$/i)) {
            return null;
        }
        var pos = this.mark();
        var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.URILiteral);
        this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident);
        if (this.hasWhitespace() || !this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            this.restoreAtMark(pos);
            return null;
        }
        this.scanner.inURL = true;
        this.consumeToken(); // consume ()
        node.addChild(this._parseURLArgument()); // argument is optional
        this.scanner.inURL = false;
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    };
    Parser.prototype._parseURLArgument = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.String) && !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.BadString) && !this.acceptUnquotedString()) {
            return null;
        }
        return this.finish(node);
    };
    Parser.prototype._parseIdent = function (referenceTypes) {
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Identifier);
        if (referenceTypes) {
            node.referenceTypes = referenceTypes;
        }
        node.isCustomProperty = this.peekRegExp(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident, /^--/);
        this.consumeToken();
        return this.finish(node);
    };
    Parser.prototype._parseFunction = function () {
        var pos = this.mark();
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Function);
        if (!node.setIdentifier(this._parseFunctionIdentifier())) {
            return null;
        }
        if (this.hasWhitespace() || !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            this.restoreAtMark(pos);
            return null;
        }
        if (node.getArguments().addChild(this._parseFunctionArgument())) {
            while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
                if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                    break;
                }
                if (!node.getArguments().addChild(this._parseFunctionArgument())) {
                    this.markError(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.ExpressionExpected);
                }
            }
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    };
    Parser.prototype._parseFunctionIdentifier = function () {
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.Identifier);
        node.referenceTypes = [_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceType.Function];
        if (this.acceptIdent('progid')) {
            // support for IE7 specific filters: 'progid:DXImageTransform.Microsoft.MotionBlur(strength=13, direction=310)'
            if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
                while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident) && this.acceptDelim('.')) {
                    // loop
                }
            }
            return this.finish(node);
        }
        this.consumeToken();
        return this.finish(node);
    };
    Parser.prototype._parseFunctionArgument = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.FunctionArgument);
        if (node.setValue(this._parseExpr(true))) {
            return this.finish(node);
        }
        return null;
    };
    Parser.prototype._parseHexColor = function () {
        if (this.peekRegExp(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Hash, /^#([A-Fa-f0-9]{3}|[A-Fa-f0-9]{4}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{8})$/g)) {
            var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.HexColorValue);
            this.consumeToken();
            return this.finish(node);
        }
        else {
            return null;
        }
    };
    return Parser;
}());



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssScanner.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssScanner.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TokenType": () => /* binding */ TokenType,
/* harmony export */   "MultiLineStream": () => /* binding */ MultiLineStream,
/* harmony export */   "Scanner": () => /* binding */ Scanner
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var TokenType;
(function (TokenType) {
    TokenType[TokenType["Ident"] = 0] = "Ident";
    TokenType[TokenType["AtKeyword"] = 1] = "AtKeyword";
    TokenType[TokenType["String"] = 2] = "String";
    TokenType[TokenType["BadString"] = 3] = "BadString";
    TokenType[TokenType["UnquotedString"] = 4] = "UnquotedString";
    TokenType[TokenType["Hash"] = 5] = "Hash";
    TokenType[TokenType["Num"] = 6] = "Num";
    TokenType[TokenType["Percentage"] = 7] = "Percentage";
    TokenType[TokenType["Dimension"] = 8] = "Dimension";
    TokenType[TokenType["UnicodeRange"] = 9] = "UnicodeRange";
    TokenType[TokenType["CDO"] = 10] = "CDO";
    TokenType[TokenType["CDC"] = 11] = "CDC";
    TokenType[TokenType["Colon"] = 12] = "Colon";
    TokenType[TokenType["SemiColon"] = 13] = "SemiColon";
    TokenType[TokenType["CurlyL"] = 14] = "CurlyL";
    TokenType[TokenType["CurlyR"] = 15] = "CurlyR";
    TokenType[TokenType["ParenthesisL"] = 16] = "ParenthesisL";
    TokenType[TokenType["ParenthesisR"] = 17] = "ParenthesisR";
    TokenType[TokenType["BracketL"] = 18] = "BracketL";
    TokenType[TokenType["BracketR"] = 19] = "BracketR";
    TokenType[TokenType["Whitespace"] = 20] = "Whitespace";
    TokenType[TokenType["Includes"] = 21] = "Includes";
    TokenType[TokenType["Dashmatch"] = 22] = "Dashmatch";
    TokenType[TokenType["SubstringOperator"] = 23] = "SubstringOperator";
    TokenType[TokenType["PrefixOperator"] = 24] = "PrefixOperator";
    TokenType[TokenType["SuffixOperator"] = 25] = "SuffixOperator";
    TokenType[TokenType["Delim"] = 26] = "Delim";
    TokenType[TokenType["EMS"] = 27] = "EMS";
    TokenType[TokenType["EXS"] = 28] = "EXS";
    TokenType[TokenType["Length"] = 29] = "Length";
    TokenType[TokenType["Angle"] = 30] = "Angle";
    TokenType[TokenType["Time"] = 31] = "Time";
    TokenType[TokenType["Freq"] = 32] = "Freq";
    TokenType[TokenType["Exclamation"] = 33] = "Exclamation";
    TokenType[TokenType["Resolution"] = 34] = "Resolution";
    TokenType[TokenType["Comma"] = 35] = "Comma";
    TokenType[TokenType["Charset"] = 36] = "Charset";
    TokenType[TokenType["EscapedJavaScript"] = 37] = "EscapedJavaScript";
    TokenType[TokenType["BadEscapedJavaScript"] = 38] = "BadEscapedJavaScript";
    TokenType[TokenType["Comment"] = 39] = "Comment";
    TokenType[TokenType["SingleLineComment"] = 40] = "SingleLineComment";
    TokenType[TokenType["EOF"] = 41] = "EOF";
    TokenType[TokenType["CustomToken"] = 42] = "CustomToken";
})(TokenType || (TokenType = {}));
var MultiLineStream = /** @class */ (function () {
    function MultiLineStream(source) {
        this.source = source;
        this.len = source.length;
        this.position = 0;
    }
    MultiLineStream.prototype.substring = function (from, to) {
        if (to === void 0) { to = this.position; }
        return this.source.substring(from, to);
    };
    MultiLineStream.prototype.eos = function () {
        return this.len <= this.position;
    };
    MultiLineStream.prototype.pos = function () {
        return this.position;
    };
    MultiLineStream.prototype.goBackTo = function (pos) {
        this.position = pos;
    };
    MultiLineStream.prototype.goBack = function (n) {
        this.position -= n;
    };
    MultiLineStream.prototype.advance = function (n) {
        this.position += n;
    };
    MultiLineStream.prototype.nextChar = function () {
        return this.source.charCodeAt(this.position++) || 0;
    };
    MultiLineStream.prototype.peekChar = function (n) {
        if (n === void 0) { n = 0; }
        return this.source.charCodeAt(this.position + n) || 0;
    };
    MultiLineStream.prototype.lookbackChar = function (n) {
        if (n === void 0) { n = 0; }
        return this.source.charCodeAt(this.position - n) || 0;
    };
    MultiLineStream.prototype.advanceIfChar = function (ch) {
        if (ch === this.source.charCodeAt(this.position)) {
            this.position++;
            return true;
        }
        return false;
    };
    MultiLineStream.prototype.advanceIfChars = function (ch) {
        if (this.position + ch.length > this.source.length) {
            return false;
        }
        var i = 0;
        for (; i < ch.length; i++) {
            if (this.source.charCodeAt(this.position + i) !== ch[i]) {
                return false;
            }
        }
        this.advance(i);
        return true;
    };
    MultiLineStream.prototype.advanceWhileChar = function (condition) {
        var posNow = this.position;
        while (this.position < this.len && condition(this.source.charCodeAt(this.position))) {
            this.position++;
        }
        return this.position - posNow;
    };
    return MultiLineStream;
}());

var _a = 'a'.charCodeAt(0);
var _f = 'f'.charCodeAt(0);
var _z = 'z'.charCodeAt(0);
var _A = 'A'.charCodeAt(0);
var _F = 'F'.charCodeAt(0);
var _Z = 'Z'.charCodeAt(0);
var _0 = '0'.charCodeAt(0);
var _9 = '9'.charCodeAt(0);
var _TLD = '~'.charCodeAt(0);
var _HAT = '^'.charCodeAt(0);
var _EQS = '='.charCodeAt(0);
var _PIP = '|'.charCodeAt(0);
var _MIN = '-'.charCodeAt(0);
var _USC = '_'.charCodeAt(0);
var _PRC = '%'.charCodeAt(0);
var _MUL = '*'.charCodeAt(0);
var _LPA = '('.charCodeAt(0);
var _RPA = ')'.charCodeAt(0);
var _LAN = '<'.charCodeAt(0);
var _RAN = '>'.charCodeAt(0);
var _ATS = '@'.charCodeAt(0);
var _HSH = '#'.charCodeAt(0);
var _DLR = '$'.charCodeAt(0);
var _BSL = '\\'.charCodeAt(0);
var _FSL = '/'.charCodeAt(0);
var _NWL = '\n'.charCodeAt(0);
var _CAR = '\r'.charCodeAt(0);
var _LFD = '\f'.charCodeAt(0);
var _DQO = '"'.charCodeAt(0);
var _SQO = '\''.charCodeAt(0);
var _WSP = ' '.charCodeAt(0);
var _TAB = '\t'.charCodeAt(0);
var _SEM = ';'.charCodeAt(0);
var _COL = ':'.charCodeAt(0);
var _CUL = '{'.charCodeAt(0);
var _CUR = '}'.charCodeAt(0);
var _BRL = '['.charCodeAt(0);
var _BRR = ']'.charCodeAt(0);
var _CMA = ','.charCodeAt(0);
var _DOT = '.'.charCodeAt(0);
var _BNG = '!'.charCodeAt(0);
var staticTokenTable = {};
staticTokenTable[_SEM] = TokenType.SemiColon;
staticTokenTable[_COL] = TokenType.Colon;
staticTokenTable[_CUL] = TokenType.CurlyL;
staticTokenTable[_CUR] = TokenType.CurlyR;
staticTokenTable[_BRR] = TokenType.BracketR;
staticTokenTable[_BRL] = TokenType.BracketL;
staticTokenTable[_LPA] = TokenType.ParenthesisL;
staticTokenTable[_RPA] = TokenType.ParenthesisR;
staticTokenTable[_CMA] = TokenType.Comma;
var staticUnitTable = {};
staticUnitTable['em'] = TokenType.EMS;
staticUnitTable['ex'] = TokenType.EXS;
staticUnitTable['px'] = TokenType.Length;
staticUnitTable['cm'] = TokenType.Length;
staticUnitTable['mm'] = TokenType.Length;
staticUnitTable['in'] = TokenType.Length;
staticUnitTable['pt'] = TokenType.Length;
staticUnitTable['pc'] = TokenType.Length;
staticUnitTable['deg'] = TokenType.Angle;
staticUnitTable['rad'] = TokenType.Angle;
staticUnitTable['grad'] = TokenType.Angle;
staticUnitTable['ms'] = TokenType.Time;
staticUnitTable['s'] = TokenType.Time;
staticUnitTable['hz'] = TokenType.Freq;
staticUnitTable['khz'] = TokenType.Freq;
staticUnitTable['%'] = TokenType.Percentage;
staticUnitTable['fr'] = TokenType.Percentage;
staticUnitTable['dpi'] = TokenType.Resolution;
staticUnitTable['dpcm'] = TokenType.Resolution;
var Scanner = /** @class */ (function () {
    function Scanner() {
        this.stream = new MultiLineStream('');
        this.ignoreComment = true;
        this.ignoreWhitespace = true;
        this.inURL = false;
    }
    Scanner.prototype.setSource = function (input) {
        this.stream = new MultiLineStream(input);
    };
    Scanner.prototype.finishToken = function (offset, type, text) {
        return {
            offset: offset,
            len: this.stream.pos() - offset,
            type: type,
            text: text || this.stream.substring(offset)
        };
    };
    Scanner.prototype.substring = function (offset, len) {
        return this.stream.substring(offset, offset + len);
    };
    Scanner.prototype.pos = function () {
        return this.stream.pos();
    };
    Scanner.prototype.goBackTo = function (pos) {
        this.stream.goBackTo(pos);
    };
    Scanner.prototype.scanUnquotedString = function () {
        var offset = this.stream.pos();
        var content = [];
        if (this._unquotedString(content)) {
            return this.finishToken(offset, TokenType.UnquotedString, content.join(''));
        }
        return null;
    };
    Scanner.prototype.scan = function () {
        // processes all whitespaces and comments
        var triviaToken = this.trivia();
        if (triviaToken !== null) {
            return triviaToken;
        }
        var offset = this.stream.pos();
        // End of file/input
        if (this.stream.eos()) {
            return this.finishToken(offset, TokenType.EOF);
        }
        return this.scanNext(offset);
    };
    Scanner.prototype.scanNext = function (offset) {
        // CDO <!--
        if (this.stream.advanceIfChars([_LAN, _BNG, _MIN, _MIN])) {
            return this.finishToken(offset, TokenType.CDO);
        }
        // CDC -->
        if (this.stream.advanceIfChars([_MIN, _MIN, _RAN])) {
            return this.finishToken(offset, TokenType.CDC);
        }
        var content = [];
        if (this.ident(content)) {
            return this.finishToken(offset, TokenType.Ident, content.join(''));
        }
        // at-keyword
        if (this.stream.advanceIfChar(_ATS)) {
            content = ['@'];
            if (this._name(content)) {
                var keywordText = content.join('');
                if (keywordText === '@charset') {
                    return this.finishToken(offset, TokenType.Charset, keywordText);
                }
                return this.finishToken(offset, TokenType.AtKeyword, keywordText);
            }
            else {
                return this.finishToken(offset, TokenType.Delim);
            }
        }
        // hash
        if (this.stream.advanceIfChar(_HSH)) {
            content = ['#'];
            if (this._name(content)) {
                return this.finishToken(offset, TokenType.Hash, content.join(''));
            }
            else {
                return this.finishToken(offset, TokenType.Delim);
            }
        }
        // Important
        if (this.stream.advanceIfChar(_BNG)) {
            return this.finishToken(offset, TokenType.Exclamation);
        }
        // Numbers
        if (this._number()) {
            var pos = this.stream.pos();
            content = [this.stream.substring(offset, pos)];
            if (this.stream.advanceIfChar(_PRC)) {
                // Percentage 43%
                return this.finishToken(offset, TokenType.Percentage);
            }
            else if (this.ident(content)) {
                var dim = this.stream.substring(pos).toLowerCase();
                var tokenType_1 = staticUnitTable[dim];
                if (typeof tokenType_1 !== 'undefined') {
                    // Known dimension 43px
                    return this.finishToken(offset, tokenType_1, content.join(''));
                }
                else {
                    // Unknown dimension 43ft
                    return this.finishToken(offset, TokenType.Dimension, content.join(''));
                }
            }
            return this.finishToken(offset, TokenType.Num);
        }
        // String, BadString
        content = [];
        var tokenType = this._string(content);
        if (tokenType !== null) {
            return this.finishToken(offset, tokenType, content.join(''));
        }
        // single character tokens
        tokenType = staticTokenTable[this.stream.peekChar()];
        if (typeof tokenType !== 'undefined') {
            this.stream.advance(1);
            return this.finishToken(offset, tokenType);
        }
        // includes ~=
        if (this.stream.peekChar(0) === _TLD && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.Includes);
        }
        // DashMatch |=
        if (this.stream.peekChar(0) === _PIP && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.Dashmatch);
        }
        // Substring operator *=
        if (this.stream.peekChar(0) === _MUL && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.SubstringOperator);
        }
        // Substring operator ^=
        if (this.stream.peekChar(0) === _HAT && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.PrefixOperator);
        }
        // Substring operator $=
        if (this.stream.peekChar(0) === _DLR && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.SuffixOperator);
        }
        // Delim
        this.stream.nextChar();
        return this.finishToken(offset, TokenType.Delim);
    };
    Scanner.prototype.trivia = function () {
        while (true) {
            var offset = this.stream.pos();
            if (this._whitespace()) {
                if (!this.ignoreWhitespace) {
                    return this.finishToken(offset, TokenType.Whitespace);
                }
            }
            else if (this.comment()) {
                if (!this.ignoreComment) {
                    return this.finishToken(offset, TokenType.Comment);
                }
            }
            else {
                return null;
            }
        }
    };
    Scanner.prototype.comment = function () {
        if (this.stream.advanceIfChars([_FSL, _MUL])) {
            var success_1 = false, hot_1 = false;
            this.stream.advanceWhileChar(function (ch) {
                if (hot_1 && ch === _FSL) {
                    success_1 = true;
                    return false;
                }
                hot_1 = ch === _MUL;
                return true;
            });
            if (success_1) {
                this.stream.advance(1);
            }
            return true;
        }
        return false;
    };
    Scanner.prototype._number = function () {
        var npeek = 0, ch;
        if (this.stream.peekChar() === _DOT) {
            npeek = 1;
        }
        ch = this.stream.peekChar(npeek);
        if (ch >= _0 && ch <= _9) {
            this.stream.advance(npeek + 1);
            this.stream.advanceWhileChar(function (ch) {
                return ch >= _0 && ch <= _9 || npeek === 0 && ch === _DOT;
            });
            return true;
        }
        return false;
    };
    Scanner.prototype._newline = function (result) {
        var ch = this.stream.peekChar();
        switch (ch) {
            case _CAR:
            case _LFD:
            case _NWL:
                this.stream.advance(1);
                result.push(String.fromCharCode(ch));
                if (ch === _CAR && this.stream.advanceIfChar(_NWL)) {
                    result.push('\n');
                }
                return true;
        }
        return false;
    };
    Scanner.prototype._escape = function (result, includeNewLines) {
        var ch = this.stream.peekChar();
        if (ch === _BSL) {
            this.stream.advance(1);
            ch = this.stream.peekChar();
            var hexNumCount = 0;
            while (hexNumCount < 6 && (ch >= _0 && ch <= _9 || ch >= _a && ch <= _f || ch >= _A && ch <= _F)) {
                this.stream.advance(1);
                ch = this.stream.peekChar();
                hexNumCount++;
            }
            if (hexNumCount > 0) {
                try {
                    var hexVal = parseInt(this.stream.substring(this.stream.pos() - hexNumCount), 16);
                    if (hexVal) {
                        result.push(String.fromCharCode(hexVal));
                    }
                }
                catch (e) {
                    // ignore
                }
                // optional whitespace or new line, not part of result text
                if (ch === _WSP || ch === _TAB) {
                    this.stream.advance(1);
                }
                else {
                    this._newline([]);
                }
                return true;
            }
            if (ch !== _CAR && ch !== _LFD && ch !== _NWL) {
                this.stream.advance(1);
                result.push(String.fromCharCode(ch));
                return true;
            }
            else if (includeNewLines) {
                return this._newline(result);
            }
        }
        return false;
    };
    Scanner.prototype._stringChar = function (closeQuote, result) {
        // not closeQuote, not backslash, not newline
        var ch = this.stream.peekChar();
        if (ch !== 0 && ch !== closeQuote && ch !== _BSL && ch !== _CAR && ch !== _LFD && ch !== _NWL) {
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    };
    Scanner.prototype._string = function (result) {
        if (this.stream.peekChar() === _SQO || this.stream.peekChar() === _DQO) {
            var closeQuote = this.stream.nextChar();
            result.push(String.fromCharCode(closeQuote));
            while (this._stringChar(closeQuote, result) || this._escape(result, true)) {
                // loop
            }
            if (this.stream.peekChar() === closeQuote) {
                this.stream.nextChar();
                result.push(String.fromCharCode(closeQuote));
                return TokenType.String;
            }
            else {
                return TokenType.BadString;
            }
        }
        return null;
    };
    Scanner.prototype._unquotedChar = function (result) {
        // not closeQuote, not backslash, not newline
        var ch = this.stream.peekChar();
        if (ch !== 0 && ch !== _BSL && ch !== _SQO && ch !== _DQO && ch !== _LPA && ch !== _RPA && ch !== _WSP && ch !== _TAB && ch !== _NWL && ch !== _LFD && ch !== _CAR) {
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    };
    Scanner.prototype._unquotedString = function (result) {
        var hasContent = false;
        while (this._unquotedChar(result) || this._escape(result)) {
            hasContent = true;
        }
        return hasContent;
    };
    Scanner.prototype._whitespace = function () {
        var n = this.stream.advanceWhileChar(function (ch) {
            return ch === _WSP || ch === _TAB || ch === _NWL || ch === _LFD || ch === _CAR;
        });
        return n > 0;
    };
    Scanner.prototype._name = function (result) {
        var matched = false;
        while (this._identChar(result) || this._escape(result)) {
            matched = true;
        }
        return matched;
    };
    Scanner.prototype.ident = function (result) {
        var pos = this.stream.pos();
        var hasMinus = this._minus(result);
        if (hasMinus && this._minus(result) /* -- */) {
            if (this._identFirstChar(result) || this._escape(result)) {
                while (this._identChar(result) || this._escape(result)) {
                    // loop
                }
                return true;
            }
        }
        else if (this._identFirstChar(result) || this._escape(result)) {
            while (this._identChar(result) || this._escape(result)) {
                // loop
            }
            return true;
        }
        this.stream.goBackTo(pos);
        return false;
    };
    Scanner.prototype._identFirstChar = function (result) {
        var ch = this.stream.peekChar();
        if (ch === _USC || // _
            ch >= _a && ch <= _z || // a-z
            ch >= _A && ch <= _Z || // A-Z
            ch >= 0x80 && ch <= 0xFFFF) { // nonascii
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    };
    Scanner.prototype._minus = function (result) {
        var ch = this.stream.peekChar();
        if (ch === _MIN) {
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    };
    Scanner.prototype._identChar = function (result) {
        var ch = this.stream.peekChar();
        if (ch === _USC || // _
            ch === _MIN || // -
            ch >= _a && ch <= _z || // a-z
            ch >= _A && ch <= _Z || // A-Z
            ch >= _0 && ch <= _9 || // 0/9
            ch >= 0x80 && ch <= 0xFFFF) { // nonascii
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    };
    return Scanner;
}());



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssSymbolScope.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssSymbolScope.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Scope": () => /* binding */ Scope,
/* harmony export */   "GlobalScope": () => /* binding */ GlobalScope,
/* harmony export */   "Symbol": () => /* binding */ Symbol,
/* harmony export */   "ScopeBuilder": () => /* binding */ ScopeBuilder,
/* harmony export */   "Symbols": () => /* binding */ Symbols
/* harmony export */ });
/* harmony import */ var _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _utils_arrays_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/arrays.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/arrays.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var Scope = /** @class */ (function () {
    function Scope(offset, length) {
        this.offset = offset;
        this.length = length;
        this.symbols = [];
        this.parent = null;
        this.children = [];
    }
    Scope.prototype.addChild = function (scope) {
        this.children.push(scope);
        scope.setParent(this);
    };
    Scope.prototype.setParent = function (scope) {
        this.parent = scope;
    };
    Scope.prototype.findScope = function (offset, length) {
        if (length === void 0) { length = 0; }
        if (this.offset <= offset && this.offset + this.length > offset + length || this.offset === offset && this.length === length) {
            return this.findInScope(offset, length);
        }
        return null;
    };
    Scope.prototype.findInScope = function (offset, length) {
        if (length === void 0) { length = 0; }
        // find the first scope child that has an offset larger than offset + length
        var end = offset + length;
        var idx = (0,_utils_arrays_js__WEBPACK_IMPORTED_MODULE_1__.findFirst)(this.children, function (s) { return s.offset > end; });
        if (idx === 0) {
            // all scopes have offsets larger than our end
            return this;
        }
        var res = this.children[idx - 1];
        if (res.offset <= offset && res.offset + res.length >= offset + length) {
            return res.findInScope(offset, length);
        }
        return this;
    };
    Scope.prototype.addSymbol = function (symbol) {
        this.symbols.push(symbol);
    };
    Scope.prototype.getSymbol = function (name, type) {
        for (var index = 0; index < this.symbols.length; index++) {
            var symbol = this.symbols[index];
            if (symbol.name === name && symbol.type === type) {
                return symbol;
            }
        }
        return null;
    };
    Scope.prototype.getSymbols = function () {
        return this.symbols;
    };
    return Scope;
}());

var GlobalScope = /** @class */ (function (_super) {
    __extends(GlobalScope, _super);
    function GlobalScope() {
        return _super.call(this, 0, Number.MAX_VALUE) || this;
    }
    return GlobalScope;
}(Scope));

var Symbol = /** @class */ (function () {
    function Symbol(name, value, node, type) {
        this.name = name;
        this.value = value;
        this.node = node;
        this.type = type;
    }
    return Symbol;
}());

var ScopeBuilder = /** @class */ (function () {
    function ScopeBuilder(scope) {
        this.scope = scope;
    }
    ScopeBuilder.prototype.addSymbol = function (node, name, value, type) {
        if (node.offset !== -1) {
            var current = this.scope.findScope(node.offset, node.length);
            if (current) {
                current.addSymbol(new Symbol(name, value, node, type));
            }
        }
    };
    ScopeBuilder.prototype.addScope = function (node) {
        if (node.offset !== -1) {
            var current = this.scope.findScope(node.offset, node.length);
            if (current && (current.offset !== node.offset || current.length !== node.length)) { // scope already known?
                var newScope = new Scope(node.offset, node.length);
                current.addChild(newScope);
                return newScope;
            }
            return current;
        }
        return null;
    };
    ScopeBuilder.prototype.addSymbolToChildScope = function (scopeNode, node, name, value, type) {
        if (scopeNode && scopeNode.offset !== -1) {
            var current = this.addScope(scopeNode); // create the scope or gets the existing one
            if (current) {
                current.addSymbol(new Symbol(name, value, node, type));
            }
        }
    };
    ScopeBuilder.prototype.visitNode = function (node) {
        switch (node.type) {
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Keyframe:
                this.addSymbol(node, node.getName(), void 0, _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Keyframe);
                return true;
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.CustomPropertyDeclaration:
                return this.visitCustomPropertyDeclarationNode(node);
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.VariableDeclaration:
                return this.visitVariableDeclarationNode(node);
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Ruleset:
                return this.visitRuleSet(node);
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.MixinDeclaration:
                this.addSymbol(node, node.getName(), void 0, _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Mixin);
                return true;
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.FunctionDeclaration:
                this.addSymbol(node, node.getName(), void 0, _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Function);
                return true;
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.FunctionParameter: {
                return this.visitFunctionParameterNode(node);
            }
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Declarations:
                this.addScope(node);
                return true;
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.For:
                var forNode = node;
                var scopeNode = forNode.getDeclarations();
                if (scopeNode && forNode.variable) {
                    this.addSymbolToChildScope(scopeNode, forNode.variable, forNode.variable.getName(), void 0, _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
                }
                return true;
            case _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Each: {
                var eachNode = node;
                var scopeNode_1 = eachNode.getDeclarations();
                if (scopeNode_1) {
                    var variables = eachNode.getVariables().getChildren();
                    for (var _i = 0, variables_1 = variables; _i < variables_1.length; _i++) {
                        var variable = variables_1[_i];
                        this.addSymbolToChildScope(scopeNode_1, variable, variable.getName(), void 0, _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
                    }
                }
                return true;
            }
        }
        return true;
    };
    ScopeBuilder.prototype.visitRuleSet = function (node) {
        var current = this.scope.findScope(node.offset, node.length);
        if (current) {
            for (var _i = 0, _a = node.getSelectors().getChildren(); _i < _a.length; _i++) {
                var child = _a[_i];
                if (child instanceof _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Selector) {
                    if (child.getChildren().length === 1) { // only selectors with a single element can be extended
                        current.addSymbol(new Symbol(child.getChild(0).getText(), void 0, child, _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Rule));
                    }
                }
            }
        }
        return true;
    };
    ScopeBuilder.prototype.visitVariableDeclarationNode = function (node) {
        var value = node.getValue() ? node.getValue().getText() : void 0;
        this.addSymbol(node, node.getName(), value, _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        return true;
    };
    ScopeBuilder.prototype.visitFunctionParameterNode = function (node) {
        // parameters are part of the body scope
        var scopeNode = node.getParent().getDeclarations();
        if (scopeNode) {
            var valueNode = node.getDefaultValue();
            var value = valueNode ? valueNode.getText() : void 0;
            this.addSymbolToChildScope(scopeNode, node, node.getName(), value, _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        }
        return true;
    };
    ScopeBuilder.prototype.visitCustomPropertyDeclarationNode = function (node) {
        var value = node.getValue() ? node.getValue().getText() : '';
        this.addCSSVariable(node.getProperty(), node.getProperty().getName(), value, _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        return true;
    };
    ScopeBuilder.prototype.addCSSVariable = function (node, name, value, type) {
        if (node.offset !== -1) {
            this.scope.addSymbol(new Symbol(name, value, node, type));
        }
    };
    return ScopeBuilder;
}());

var Symbols = /** @class */ (function () {
    function Symbols(node) {
        this.global = new GlobalScope();
        node.acceptVisitor(new ScopeBuilder(this.global));
    }
    Symbols.prototype.findSymbolsAtOffset = function (offset, referenceType) {
        var scope = this.global.findScope(offset, 0);
        var result = [];
        var names = {};
        while (scope) {
            var symbols = scope.getSymbols();
            for (var i = 0; i < symbols.length; i++) {
                var symbol = symbols[i];
                if (symbol.type === referenceType && !names[symbol.name]) {
                    result.push(symbol);
                    names[symbol.name] = true;
                }
            }
            scope = scope.parent;
        }
        return result;
    };
    Symbols.prototype.internalFindSymbol = function (node, referenceTypes) {
        var scopeNode = node;
        if (node.parent instanceof _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.FunctionParameter && node.parent.getParent() instanceof _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.BodyDeclaration) {
            scopeNode = node.parent.getParent().getDeclarations();
        }
        if (node.parent instanceof _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.FunctionArgument && node.parent.getParent() instanceof _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Function) {
            var funcId = node.parent.getParent().getIdentifier();
            if (funcId) {
                var functionSymbol = this.internalFindSymbol(funcId, [_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Function]);
                if (functionSymbol) {
                    scopeNode = functionSymbol.node.getDeclarations();
                }
            }
        }
        if (!scopeNode) {
            return null;
        }
        var name = node.getText();
        var scope = this.global.findScope(scopeNode.offset, scopeNode.length);
        while (scope) {
            for (var index = 0; index < referenceTypes.length; index++) {
                var type = referenceTypes[index];
                var symbol = scope.getSymbol(name, type);
                if (symbol) {
                    return symbol;
                }
            }
            scope = scope.parent;
        }
        return null;
    };
    Symbols.prototype.evaluateReferenceTypes = function (node) {
        if (node instanceof _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Identifier) {
            var referenceTypes = node.referenceTypes;
            if (referenceTypes) {
                return referenceTypes;
            }
            else {
                if (node.isCustomProperty) {
                    return [_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable];
                }
                // are a reference to a keyframe?
                var decl = _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.getParentDeclaration(node);
                if (decl) {
                    var propertyName = decl.getNonPrefixedPropertyName();
                    if ((propertyName === 'animation' || propertyName === 'animation-name')
                        && decl.getValue() && decl.getValue().offset === node.offset) {
                        return [_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Keyframe];
                    }
                }
            }
        }
        else if (node instanceof _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Variable) {
            return [_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable];
        }
        var selector = node.findAParent(_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Selector, _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.ExtendsReference);
        if (selector) {
            return [_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Rule];
        }
        return null;
    };
    Symbols.prototype.findSymbolFromNode = function (node) {
        if (!node) {
            return null;
        }
        while (node.type === _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Interpolation) {
            node = node.getParent();
        }
        var referenceTypes = this.evaluateReferenceTypes(node);
        if (referenceTypes) {
            return this.internalFindSymbol(node, referenceTypes);
        }
        return null;
    };
    Symbols.prototype.matchesSymbol = function (node, symbol) {
        if (!node) {
            return false;
        }
        while (node.type === _cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Interpolation) {
            node = node.getParent();
        }
        if (!node.matches(symbol.name)) {
            return false;
        }
        var referenceTypes = this.evaluateReferenceTypes(node);
        if (!referenceTypes || referenceTypes.indexOf(symbol.type) === -1) {
            return false;
        }
        var nodeSymbol = this.internalFindSymbol(node, referenceTypes);
        return nodeSymbol === symbol;
    };
    Symbols.prototype.findSymbol = function (name, type, offset) {
        var scope = this.global.findScope(offset);
        while (scope) {
            var symbol = scope.getSymbol(name, type);
            if (symbol) {
                return symbol;
            }
            scope = scope.parent;
        }
        return null;
    };
    return Symbols;
}());



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/lessParser.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/lessParser.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LESSParser": () => /* binding */ LESSParser
/* harmony export */ });
/* harmony import */ var _lessScanner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lessScanner.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/lessScanner.js");
/* harmony import */ var _cssScanner_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cssScanner.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssScanner.js");
/* harmony import */ var _cssParser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cssParser.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssParser.js");
/* harmony import */ var _cssNodes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cssErrors.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssErrors.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





/// <summary>
/// A parser for LESS
/// http://lesscss.org/
/// </summary>
var LESSParser = /** @class */ (function (_super) {
    __extends(LESSParser, _super);
    function LESSParser() {
        return _super.call(this, new _lessScanner_js__WEBPACK_IMPORTED_MODULE_0__.LESSScanner()) || this;
    }
    LESSParser.prototype._parseStylesheetStatement = function (isNested) {
        if (isNested === void 0) { isNested = false; }
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return this._parseVariableDeclaration()
                || this._parsePlugin()
                || _super.prototype._parseStylesheetAtStatement.call(this, isNested);
        }
        return this._tryParseMixinDeclaration()
            || this._tryParseMixinReference()
            || this._parseFunction()
            || this._parseRuleset(true);
    };
    LESSParser.prototype._parseImport = function () {
        if (!this.peekKeyword('@import') && !this.peekKeyword('@import-once') /* deprecated in less 1.4.1 */) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Import);
        this.consumeToken();
        // less 1.4.1: @import (css) "lib"
        if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.IdentifierExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon]);
            }
            do {
                if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    break;
                }
            } while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident));
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.RightParenthesisExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon]);
            }
        }
        if (!node.addChild(this._parseURILiteral()) && !node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.URIOrStringExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon]);
        }
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
            node.setMedialist(this._parseMediaQueryList());
        }
        return this.finish(node);
    };
    LESSParser.prototype._parsePlugin = function () {
        if (!this.peekKeyword('@plugin')) {
            return null;
        }
        var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.Plugin);
        this.consumeToken(); // @import
        if (!node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.StringLiteralExpected);
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.SemiColonExpected);
        }
        return this.finish(node);
    };
    LESSParser.prototype._parseMediaQuery = function (resyncStopToken) {
        var node = _super.prototype._parseMediaQuery.call(this, resyncStopToken);
        if (!node) {
            var node_1 = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.MediaQuery);
            if (node_1.addChild(this._parseVariable())) {
                return this.finish(node_1);
            }
            return null;
        }
        return node;
    };
    LESSParser.prototype._parseMediaDeclaration = function (isNested) {
        if (isNested === void 0) { isNested = false; }
        return this._tryParseRuleset(isNested)
            || this._tryToParseDeclaration()
            || this._tryParseMixinDeclaration()
            || this._tryParseMixinReference()
            || this._parseDetachedRuleSetMixin()
            || this._parseStylesheetStatement(isNested);
    };
    LESSParser.prototype._parseMediaFeatureName = function () {
        return this._parseIdent() || this._parseVariable();
    };
    LESSParser.prototype._parseVariableDeclaration = function (panic) {
        if (panic === void 0) { panic = []; }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.VariableDeclaration);
        var mark = this.mark();
        if (!node.setVariable(this._parseVariable(true))) {
            return null;
        }
        if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            if (this.prevToken) {
                node.colonPosition = this.prevToken.offset;
            }
            if (node.setValue(this._parseDetachedRuleSet())) {
                node.needsSemicolon = false;
            }
            else if (!node.setValue(this._parseExpr())) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.VariableValueExpected, [], panic);
            }
            node.addChild(this._parsePrio());
        }
        else {
            this.restoreAtMark(mark);
            return null; // at keyword, but no ':', not a variable declaration but some at keyword
        }
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
            node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
        }
        return this.finish(node);
    };
    LESSParser.prototype._parseDetachedRuleSet = function () {
        var mark = this.mark();
        // "Anonymous mixin" used in each() and possibly a generic type in the future
        if (this.peekDelim('#') || this.peekDelim('.')) {
            this.consumeToken();
            if (!this.hasWhitespace() && this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
                var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.MixinDeclaration);
                if (node.getParameters().addChild(this._parseMixinParameter())) {
                    while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma) || this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
                        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                            break;
                        }
                        if (!node.getParameters().addChild(this._parseMixinParameter())) {
                            this.markError(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.IdentifierExpected, [], [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
                        }
                    }
                }
                if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                    this.restoreAtMark(mark);
                    return null;
                }
            }
            else {
                this.restoreAtMark(mark);
                return null;
            }
        }
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
            return null;
        }
        var content = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.BodyDeclaration);
        this._parseBody(content, this._parseDetachedRuleSetBody.bind(this));
        return this.finish(content);
    };
    LESSParser.prototype._parseDetachedRuleSetBody = function () {
        return this._tryParseKeyframeSelector() || this._parseRuleSetDeclaration();
    };
    LESSParser.prototype._addLookupChildren = function (node) {
        if (!node.addChild(this._parseLookupValue())) {
            return false;
        }
        var expectsValue = false;
        while (true) {
            if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.BracketL)) {
                expectsValue = true;
            }
            if (!node.addChild(this._parseLookupValue())) {
                break;
            }
            expectsValue = false;
        }
        return !expectsValue;
    };
    LESSParser.prototype._parseLookupValue = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Node);
        var mark = this.mark();
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.BracketL)) {
            this.restoreAtMark(mark);
            return null;
        }
        if (((node.addChild(this._parseVariable(false, true)) ||
            node.addChild(this._parsePropertyIdentifier())) &&
            this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.BracketR)) || this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.BracketR)) {
            return node;
        }
        this.restoreAtMark(mark);
        return null;
    };
    LESSParser.prototype._parseVariable = function (declaration, insideLookup) {
        if (declaration === void 0) { declaration = false; }
        if (insideLookup === void 0) { insideLookup = false; }
        var isPropertyReference = !declaration && this.peekDelim('$');
        if (!this.peekDelim('@') && !isPropertyReference && !this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Variable);
        var mark = this.mark();
        while (this.acceptDelim('@') || (!declaration && this.acceptDelim('$'))) {
            if (this.hasWhitespace()) {
                this.restoreAtMark(mark);
                return null;
            }
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword) && !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident)) {
            this.restoreAtMark(mark);
            return null;
        }
        if (!insideLookup && this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.BracketL)) {
            if (!this._addLookupChildren(node)) {
                this.restoreAtMark(mark);
                return null;
            }
        }
        return node;
    };
    LESSParser.prototype._parseTermExpression = function () {
        return this._parseVariable() ||
            this._parseEscaped() ||
            _super.prototype._parseTermExpression.call(this) || // preference for colors before mixin references
            this._tryParseMixinReference(false);
    };
    LESSParser.prototype._parseEscaped = function () {
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.EscapedJavaScript) ||
            this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.BadEscapedJavaScript)) {
            var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.EscapedValue);
            this.consumeToken();
            return this.finish(node);
        }
        if (this.peekDelim('~')) {
            var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.EscapedValue);
            this.consumeToken();
            if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.String) || this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.EscapedJavaScript)) {
                return this.finish(node);
            }
            else {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.TermExpected);
            }
        }
        return null;
    };
    LESSParser.prototype._parseOperator = function () {
        var node = this._parseGuardOperator();
        if (node) {
            return node;
        }
        else {
            return _super.prototype._parseOperator.call(this);
        }
    };
    LESSParser.prototype._parseGuardOperator = function () {
        if (this.peekDelim('>')) {
            var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.Operator);
            this.consumeToken();
            this.acceptDelim('=');
            return node;
        }
        else if (this.peekDelim('=')) {
            var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.Operator);
            this.consumeToken();
            this.acceptDelim('<');
            return node;
        }
        else if (this.peekDelim('<')) {
            var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.Operator);
            this.consumeToken();
            this.acceptDelim('=');
            return node;
        }
        return null;
    };
    LESSParser.prototype._parseRuleSetDeclaration = function () {
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return this._parseKeyframe()
                || this._parseMedia(true)
                || this._parseImport()
                || this._parseSupports(true) // @supports
                || this._parseDetachedRuleSetMixin() // less detached ruleset mixin
                || this._parseVariableDeclaration() // Variable declarations
                || _super.prototype._parseRuleSetDeclarationAtStatement.call(this);
        }
        return this._tryParseMixinDeclaration()
            || this._tryParseRuleset(true) // nested ruleset
            || this._tryParseMixinReference() // less mixin reference
            || this._parseFunction()
            || this._parseExtend() // less extend declaration
            || _super.prototype._parseRuleSetDeclaration.call(this); // try css ruleset declaration as the last option
    };
    LESSParser.prototype._parseKeyframeIdent = function () {
        return this._parseIdent([_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Keyframe]) || this._parseVariable();
    };
    LESSParser.prototype._parseKeyframeSelector = function () {
        return this._parseDetachedRuleSetMixin() // less detached ruleset mixin
            || _super.prototype._parseKeyframeSelector.call(this);
    };
    LESSParser.prototype._parseSimpleSelectorBody = function () {
        return this._parseSelectorCombinator() || _super.prototype._parseSimpleSelectorBody.call(this);
    };
    LESSParser.prototype._parseSelector = function (isNested) {
        // CSS Guards
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Selector);
        var hasContent = false;
        if (isNested) {
            // nested selectors can start with a combinator
            hasContent = node.addChild(this._parseCombinator());
        }
        while (node.addChild(this._parseSimpleSelector())) {
            hasContent = true;
            var mark = this.mark();
            if (node.addChild(this._parseGuard()) && this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
                break;
            }
            this.restoreAtMark(mark);
            node.addChild(this._parseCombinator()); // optional
        }
        return hasContent ? this.finish(node) : null;
    };
    LESSParser.prototype._parseSelectorCombinator = function () {
        if (this.peekDelim('&')) {
            var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.SelectorCombinator);
            this.consumeToken();
            while (!this.hasWhitespace() && (this.acceptDelim('-') || this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Num) || this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Dimension) || node.addChild(this._parseIdent()) || this.acceptDelim('&'))) {
                //  support &-foo
            }
            return this.finish(node);
        }
        return null;
    };
    LESSParser.prototype._parseSelectorIdent = function () {
        if (!this.peekInterpolatedIdent()) {
            return null;
        }
        var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.SelectorInterpolation);
        var hasContent = this._acceptInterpolatedIdent(node);
        return hasContent ? this.finish(node) : null;
    };
    LESSParser.prototype._parsePropertyIdentifier = function (inLookup) {
        if (inLookup === void 0) { inLookup = false; }
        var propertyRegex = /^[\w-]+/;
        if (!this.peekInterpolatedIdent() && !this.peekRegExp(this.token.type, propertyRegex)) {
            return null;
        }
        var mark = this.mark();
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Identifier);
        node.isCustomProperty = this.acceptDelim('-') && this.acceptDelim('-');
        var childAdded = false;
        if (!inLookup) {
            if (node.isCustomProperty) {
                childAdded = this._acceptInterpolatedIdent(node);
            }
            else {
                childAdded = this._acceptInterpolatedIdent(node, propertyRegex);
            }
        }
        else {
            if (node.isCustomProperty) {
                childAdded = node.addChild(this._parseIdent());
            }
            else {
                childAdded = node.addChild(this._parseRegexp(propertyRegex));
            }
        }
        if (!childAdded) {
            this.restoreAtMark(mark);
            return null;
        }
        if (!inLookup && !this.hasWhitespace()) {
            this.acceptDelim('+');
            if (!this.hasWhitespace()) {
                this.acceptIdent('_');
            }
        }
        return this.finish(node);
    };
    LESSParser.prototype.peekInterpolatedIdent = function () {
        return this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident) ||
            this.peekDelim('@') ||
            this.peekDelim('$') ||
            this.peekDelim('-');
    };
    LESSParser.prototype._acceptInterpolatedIdent = function (node, identRegex) {
        var _this = this;
        var hasContent = false;
        var indentInterpolation = function () {
            var pos = _this.mark();
            if (_this.acceptDelim('-')) {
                if (!_this.hasWhitespace()) {
                    _this.acceptDelim('-');
                }
                if (_this.hasWhitespace()) {
                    _this.restoreAtMark(pos);
                    return null;
                }
            }
            return _this._parseInterpolation();
        };
        var accept = identRegex ?
            function () { return _this.acceptRegexp(identRegex); } :
            function () { return _this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident); };
        while (accept() ||
            node.addChild(this._parseInterpolation() ||
                this.try(indentInterpolation))) {
            hasContent = true;
            if (this.hasWhitespace()) {
                break;
            }
        }
        return hasContent;
    };
    LESSParser.prototype._parseInterpolation = function () {
        // @{name} Variable or
        // ${name} Property
        var mark = this.mark();
        if (this.peekDelim('@') || this.peekDelim('$')) {
            var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.Interpolation);
            this.consumeToken();
            if (this.hasWhitespace() || !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
                this.restoreAtMark(mark);
                return null;
            }
            if (!node.addChild(this._parseIdent())) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.IdentifierExpected);
            }
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.RightCurlyExpected);
            }
            return this.finish(node);
        }
        return null;
    };
    LESSParser.prototype._tryParseMixinDeclaration = function () {
        var mark = this.mark();
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.MixinDeclaration);
        if (!node.setIdentifier(this._parseMixinDeclarationIdentifier()) || !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            this.restoreAtMark(mark);
            return null;
        }
        if (node.getParameters().addChild(this._parseMixinParameter())) {
            while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma) || this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
                if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                    break;
                }
                if (!node.getParameters().addChild(this._parseMixinParameter())) {
                    this.markError(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.IdentifierExpected, [], [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
                }
            }
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            this.restoreAtMark(mark);
            return null;
        }
        node.setGuard(this._parseGuard());
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
            this.restoreAtMark(mark);
            return null;
        }
        return this._parseBody(node, this._parseMixInBodyDeclaration.bind(this));
    };
    LESSParser.prototype._parseMixInBodyDeclaration = function () {
        return this._parseFontFace() || this._parseRuleSetDeclaration();
    };
    LESSParser.prototype._parseMixinDeclarationIdentifier = function () {
        var identifier;
        if (this.peekDelim('#') || this.peekDelim('.')) {
            identifier = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Identifier);
            this.consumeToken(); // # or .
            if (this.hasWhitespace() || !identifier.addChild(this._parseIdent())) {
                return null;
            }
        }
        else if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Hash)) {
            identifier = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Identifier);
            this.consumeToken(); // TokenType.Hash
        }
        else {
            return null;
        }
        identifier.referenceTypes = [_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin];
        return this.finish(identifier);
    };
    LESSParser.prototype._parsePseudo = function () {
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            return null;
        }
        var mark = this.mark();
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ExtendsReference);
        this.consumeToken(); // :
        if (this.acceptIdent('extend')) {
            return this._completeExtends(node);
        }
        this.restoreAtMark(mark);
        return _super.prototype._parsePseudo.call(this);
    };
    LESSParser.prototype._parseExtend = function () {
        if (!this.peekDelim('&')) {
            return null;
        }
        var mark = this.mark();
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ExtendsReference);
        this.consumeToken(); // &
        if (this.hasWhitespace() || !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon) || !this.acceptIdent('extend')) {
            this.restoreAtMark(mark);
            return null;
        }
        return this._completeExtends(node);
    };
    LESSParser.prototype._completeExtends = function (node) {
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.LeftParenthesisExpected);
        }
        var selectors = node.getSelectors();
        if (!selectors.addChild(this._parseSelector(true))) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.SelectorExpected);
        }
        while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
            if (!selectors.addChild(this._parseSelector(true))) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.SelectorExpected);
            }
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    };
    LESSParser.prototype._parseDetachedRuleSetMixin = function () {
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return null;
        }
        var mark = this.mark();
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.MixinReference);
        if (node.addChild(this._parseVariable(true)) && (this.hasWhitespace() || !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL))) {
            this.restoreAtMark(mark);
            return null;
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    };
    LESSParser.prototype._tryParseMixinReference = function (atRoot) {
        if (atRoot === void 0) { atRoot = true; }
        var mark = this.mark();
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.MixinReference);
        var identifier = this._parseMixinDeclarationIdentifier();
        while (identifier) {
            this.acceptDelim('>');
            var nextId = this._parseMixinDeclarationIdentifier();
            if (nextId) {
                node.getNamespaces().addChild(identifier);
                identifier = nextId;
            }
            else {
                break;
            }
        }
        if (!node.setIdentifier(identifier)) {
            this.restoreAtMark(mark);
            return null;
        }
        var hasArguments = false;
        if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            hasArguments = true;
            if (node.getArguments().addChild(this._parseMixinArgument())) {
                while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma) || this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
                    if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getArguments().addChild(this._parseMixinArgument())) {
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.ExpressionExpected);
                    }
                }
            }
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.RightParenthesisExpected);
            }
            identifier.referenceTypes = [_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin];
        }
        else {
            identifier.referenceTypes = [_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin, _cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Rule];
        }
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.BracketL)) {
            if (!atRoot) {
                this._addLookupChildren(node);
            }
        }
        else {
            node.addChild(this._parsePrio());
        }
        if (!hasArguments && !this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR) && !this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
            this.restoreAtMark(mark);
            return null;
        }
        return this.finish(node);
    };
    LESSParser.prototype._parseMixinArgument = function () {
        // [variableName ':'] expression | variableName '...'
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.FunctionArgument);
        var pos = this.mark();
        var argument = this._parseVariable();
        if (argument) {
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
                this.restoreAtMark(pos);
            }
            else {
                node.setIdentifier(argument);
            }
        }
        if (node.setValue(this._parseDetachedRuleSet() || this._parseExpr(true))) {
            return this.finish(node);
        }
        this.restoreAtMark(pos);
        return null;
    };
    LESSParser.prototype._parseMixinParameter = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.FunctionParameter);
        // special rest variable: @rest...
        if (this.peekKeyword('@rest')) {
            var restNode = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Node);
            this.consumeToken();
            if (!this.accept(_lessScanner_js__WEBPACK_IMPORTED_MODULE_0__.Ellipsis)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.DotExpected, [], [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma, _cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
            }
            node.setIdentifier(this.finish(restNode));
            return this.finish(node);
        }
        // special const args: ...
        if (this.peek(_lessScanner_js__WEBPACK_IMPORTED_MODULE_0__.Ellipsis)) {
            var varargsNode = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Node);
            this.consumeToken();
            node.setIdentifier(this.finish(varargsNode));
            return this.finish(node);
        }
        var hasContent = false;
        // default variable declaration: @param: 12 or @name
        if (node.setIdentifier(this._parseVariable())) {
            this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon);
            hasContent = true;
        }
        if (!node.setDefaultValue(this._parseDetachedRuleSet() || this._parseExpr(true)) && !hasContent) {
            return null;
        }
        return this.finish(node);
    };
    LESSParser.prototype._parseGuard = function () {
        if (!this.peekIdent('when')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.LessGuard);
        this.consumeToken(); // when
        node.isNegated = this.acceptIdent('not');
        if (!node.getConditions().addChild(this._parseGuardCondition())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.ConditionExpected);
        }
        while (this.acceptIdent('and') || this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
            if (!node.getConditions().addChild(this._parseGuardCondition())) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.ConditionExpected);
            }
        }
        return this.finish(node);
    };
    LESSParser.prototype._parseGuardCondition = function () {
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.GuardCondition);
        this.consumeToken(); // ParenthesisL
        if (!node.addChild(this._parseExpr())) {
            // empty (?)
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    };
    LESSParser.prototype._parseFunction = function () {
        var pos = this.mark();
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Function);
        if (!node.setIdentifier(this._parseFunctionIdentifier())) {
            return null;
        }
        if (this.hasWhitespace() || !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            this.restoreAtMark(pos);
            return null;
        }
        if (node.getArguments().addChild(this._parseMixinArgument())) {
            while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma) || this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
                if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                    break;
                }
                if (!node.getArguments().addChild(this._parseMixinArgument())) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.ExpressionExpected);
                }
            }
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_4__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    };
    LESSParser.prototype._parseFunctionIdentifier = function () {
        if (this.peekDelim('%')) {
            var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Identifier);
            node.referenceTypes = [_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Function];
            this.consumeToken();
            return this.finish(node);
        }
        return _super.prototype._parseFunctionIdentifier.call(this);
    };
    LESSParser.prototype._parseURLArgument = function () {
        var pos = this.mark();
        var node = _super.prototype._parseURLArgument.call(this);
        if (!node || !this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            this.restoreAtMark(pos);
            var node_2 = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Node);
            node_2.addChild(this._parseBinaryExpr());
            return this.finish(node_2);
        }
        return node;
    };
    return LESSParser;
}(_cssParser_js__WEBPACK_IMPORTED_MODULE_2__.Parser));



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/lessScanner.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/lessScanner.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Ellipsis": () => /* binding */ Ellipsis,
/* harmony export */   "LESSScanner": () => /* binding */ LESSScanner
/* harmony export */ });
/* harmony import */ var _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssScanner.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssScanner.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var _FSL = '/'.charCodeAt(0);
var _NWL = '\n'.charCodeAt(0);
var _CAR = '\r'.charCodeAt(0);
var _LFD = '\f'.charCodeAt(0);
var _TIC = '`'.charCodeAt(0);
var _DOT = '.'.charCodeAt(0);
var customTokenValue = _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CustomToken;
var Ellipsis = customTokenValue++;
var LESSScanner = /** @class */ (function (_super) {
    __extends(LESSScanner, _super);
    function LESSScanner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LESSScanner.prototype.scanNext = function (offset) {
        // LESS: escaped JavaScript code `const a = "dddd"`
        var tokenType = this.escapedJavaScript();
        if (tokenType !== null) {
            return this.finishToken(offset, tokenType);
        }
        if (this.stream.advanceIfChars([_DOT, _DOT, _DOT])) {
            return this.finishToken(offset, Ellipsis);
        }
        return _super.prototype.scanNext.call(this, offset);
    };
    LESSScanner.prototype.comment = function () {
        if (_super.prototype.comment.call(this)) {
            return true;
        }
        if (!this.inURL && this.stream.advanceIfChars([_FSL, _FSL])) {
            this.stream.advanceWhileChar(function (ch) {
                switch (ch) {
                    case _NWL:
                    case _CAR:
                    case _LFD:
                        return false;
                    default:
                        return true;
                }
            });
            return true;
        }
        else {
            return false;
        }
    };
    LESSScanner.prototype.escapedJavaScript = function () {
        var ch = this.stream.peekChar();
        if (ch === _TIC) {
            this.stream.advance(1);
            this.stream.advanceWhileChar(function (ch) { return ch !== _TIC; });
            return this.stream.advanceIfChar(_TIC) ? _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.EscapedJavaScript : _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.BadEscapedJavaScript;
        }
        return null;
    };
    return LESSScanner;
}(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.Scanner));



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/scssErrors.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/scssErrors.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SCSSIssueType": () => /* binding */ SCSSIssueType,
/* harmony export */   "SCSSParseError": () => /* binding */ SCSSParseError
/* harmony export */ });
/* harmony import */ var _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../fillers/vscode-nls.js */ "./node_modules/monaco-editor/esm/vs/language/css/fillers/vscode-nls.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


var localize = _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_0__.loadMessageBundle();
var SCSSIssueType = /** @class */ (function () {
    function SCSSIssueType(id, message) {
        this.id = id;
        this.message = message;
    }
    return SCSSIssueType;
}());

var SCSSParseError = {
    FromExpected: new SCSSIssueType('scss-fromexpected', localize('expected.from', "'from' expected")),
    ThroughOrToExpected: new SCSSIssueType('scss-throughexpected', localize('expected.through', "'through' or 'to' expected")),
    InExpected: new SCSSIssueType('scss-fromexpected', localize('expected.in', "'in' expected")),
};


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/scssParser.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/scssParser.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SCSSParser": () => /* binding */ SCSSParser
/* harmony export */ });
/* harmony import */ var _scssScanner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scssScanner.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/scssScanner.js");
/* harmony import */ var _cssScanner_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cssScanner.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssScanner.js");
/* harmony import */ var _cssParser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cssParser.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssParser.js");
/* harmony import */ var _cssNodes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _scssErrors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scssErrors.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/scssErrors.js");
/* harmony import */ var _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cssErrors.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssErrors.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






/// <summary>
/// A parser for scss
/// http://sass-lang.com/documentation/file.SASS_REFERENCE.html
/// </summary>
var SCSSParser = /** @class */ (function (_super) {
    __extends(SCSSParser, _super);
    function SCSSParser() {
        return _super.call(this, new _scssScanner_js__WEBPACK_IMPORTED_MODULE_0__.SCSSScanner()) || this;
    }
    SCSSParser.prototype._parseStylesheetStatement = function (isNested) {
        if (isNested === void 0) { isNested = false; }
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return this._parseWarnAndDebug() // @warn, @debug and @error statements
                || this._parseControlStatement() // @if, @while, @for, @each
                || this._parseMixinDeclaration() // @mixin
                || this._parseMixinContent() // @content
                || this._parseMixinReference() // @include
                || this._parseFunctionDeclaration() // @function
                || this._parseForward() // @forward
                || this._parseUse() // @use
                || this._parseRuleset(isNested) // @at-rule
                || _super.prototype._parseStylesheetAtStatement.call(this, isNested);
        }
        return this._parseRuleset(true) || this._parseVariableDeclaration();
    };
    SCSSParser.prototype._parseImport = function () {
        if (!this.peekKeyword('@import')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Import);
        this.consumeToken();
        if (!node.addChild(this._parseURILiteral()) && !node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.URIOrStringExpected);
        }
        while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
            if (!node.addChild(this._parseURILiteral()) && !node.addChild(this._parseStringLiteral())) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.URIOrStringExpected);
            }
        }
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
            node.setMedialist(this._parseMediaQueryList());
        }
        return this.finish(node);
    };
    // scss variables: $font-size: 12px;
    SCSSParser.prototype._parseVariableDeclaration = function (panic) {
        if (panic === void 0) { panic = []; }
        if (!this.peek(_scssScanner_js__WEBPACK_IMPORTED_MODULE_0__.VariableName)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.VariableDeclaration);
        if (!node.setVariable(this._parseVariable())) {
            return null;
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.ColonExpected);
        }
        if (this.prevToken) {
            node.colonPosition = this.prevToken.offset;
        }
        if (!node.setValue(this._parseExpr())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableValueExpected, [], panic);
        }
        while (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Exclamation)) {
            if (node.addChild(this._tryParsePrio())) {
                // !important
            }
            else {
                this.consumeToken();
                if (!this.peekRegExp(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident, /^(default|global)$/)) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnknownKeyword);
                }
                this.consumeToken();
            }
        }
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
            node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
        }
        return this.finish(node);
    };
    SCSSParser.prototype._parseMediaContentStart = function () {
        return this._parseInterpolation();
    };
    SCSSParser.prototype._parseMediaFeatureName = function () {
        return this._parseModuleMember()
            || this._parseFunction() // function before ident
            || this._parseIdent()
            || this._parseVariable();
    };
    SCSSParser.prototype._parseKeyframeSelector = function () {
        return this._tryParseKeyframeSelector()
            || this._parseControlStatement(this._parseKeyframeSelector.bind(this))
            || this._parseVariableDeclaration()
            || this._parseMixinContent();
    };
    SCSSParser.prototype._parseVariable = function () {
        if (!this.peek(_scssScanner_js__WEBPACK_IMPORTED_MODULE_0__.VariableName)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Variable);
        this.consumeToken();
        return node;
    };
    SCSSParser.prototype._parseModuleMember = function () {
        var pos = this.mark();
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Module);
        if (!node.setIdentifier(this._parseIdent([_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Module]))) {
            return null;
        }
        if (this.hasWhitespace()
            || !this.acceptDelim('.')
            || this.hasWhitespace()) {
            this.restoreAtMark(pos);
            return null;
        }
        if (!node.addChild(this._parseVariable() || this._parseFunction())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierOrVariableExpected);
        }
        return node;
    };
    SCSSParser.prototype._parseIdent = function (referenceTypes) {
        var _this = this;
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident) && !this.peek(_scssScanner_js__WEBPACK_IMPORTED_MODULE_0__.InterpolationFunction) && !this.peekDelim('-')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Identifier);
        node.referenceTypes = referenceTypes;
        node.isCustomProperty = this.peekRegExp(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident, /^--/);
        var hasContent = false;
        var indentInterpolation = function () {
            var pos = _this.mark();
            if (_this.acceptDelim('-')) {
                if (!_this.hasWhitespace()) {
                    _this.acceptDelim('-');
                }
                if (_this.hasWhitespace()) {
                    _this.restoreAtMark(pos);
                    return null;
                }
            }
            return _this._parseInterpolation();
        };
        while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident) || node.addChild(indentInterpolation()) || (hasContent && this.acceptRegexp(/[\w-]/))) {
            hasContent = true;
            if (this.hasWhitespace()) {
                break;
            }
        }
        return hasContent ? this.finish(node) : null;
    };
    SCSSParser.prototype._parseTermExpression = function () {
        return this._parseModuleMember() ||
            this._parseVariable() ||
            this._parseSelectorCombinator() ||
            //this._tryParsePrio() ||
            _super.prototype._parseTermExpression.call(this);
    };
    SCSSParser.prototype._parseInterpolation = function () {
        if (this.peek(_scssScanner_js__WEBPACK_IMPORTED_MODULE_0__.InterpolationFunction)) {
            var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Interpolation);
            this.consumeToken();
            if (!node.addChild(this._parseExpr()) && !this._parseSelectorCombinator()) {
                if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR)) {
                    return this.finish(node);
                }
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
            }
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightCurlyExpected);
            }
            return this.finish(node);
        }
        return null;
    };
    SCSSParser.prototype._parseOperator = function () {
        if (this.peek(_scssScanner_js__WEBPACK_IMPORTED_MODULE_0__.EqualsOperator) || this.peek(_scssScanner_js__WEBPACK_IMPORTED_MODULE_0__.NotEqualsOperator)
            || this.peek(_scssScanner_js__WEBPACK_IMPORTED_MODULE_0__.GreaterEqualsOperator) || this.peek(_scssScanner_js__WEBPACK_IMPORTED_MODULE_0__.SmallerEqualsOperator)
            || this.peekDelim('>') || this.peekDelim('<')
            || this.peekIdent('and') || this.peekIdent('or')
            || this.peekDelim('%')) {
            var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.Operator);
            this.consumeToken();
            return this.finish(node);
        }
        return _super.prototype._parseOperator.call(this);
    };
    SCSSParser.prototype._parseUnaryOperator = function () {
        if (this.peekIdent('not')) {
            var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Node);
            this.consumeToken();
            return this.finish(node);
        }
        return _super.prototype._parseUnaryOperator.call(this);
    };
    SCSSParser.prototype._parseRuleSetDeclaration = function () {
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return this._parseKeyframe() // nested @keyframe
                || this._parseImport() // nested @import
                || this._parseMedia(true) // nested @media
                || this._parseFontFace() // nested @font-face
                || this._parseWarnAndDebug() // @warn, @debug and @error statements
                || this._parseControlStatement() // @if, @while, @for, @each
                || this._parseFunctionDeclaration() // @function
                || this._parseExtends() // @extends
                || this._parseMixinReference() // @include
                || this._parseMixinContent() // @content
                || this._parseMixinDeclaration() // nested @mixin
                || this._parseRuleset(true) // @at-rule
                || this._parseSupports(true) // @supports
                || _super.prototype._parseRuleSetDeclarationAtStatement.call(this);
        }
        return this._parseVariableDeclaration() // variable declaration
            || this._tryParseRuleset(true) // nested ruleset
            || _super.prototype._parseRuleSetDeclaration.call(this); // try css ruleset declaration as last so in the error case, the ast will contain a declaration
    };
    SCSSParser.prototype._parseDeclaration = function (resyncStopTokens) {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Declaration);
        if (!node.setProperty(this._parseProperty())) {
            return null;
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.ColonExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon], resyncStopTokens);
        }
        if (this.prevToken) {
            node.colonPosition = this.prevToken.offset;
        }
        var hasContent = false;
        if (node.setValue(this._parseExpr())) {
            hasContent = true;
            node.addChild(this._parsePrio());
        }
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
            node.setNestedProperties(this._parseNestedProperties());
        }
        else {
            if (!hasContent) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.PropertyValueExpected);
            }
        }
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
            node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
        }
        return this.finish(node);
    };
    SCSSParser.prototype._parseNestedProperties = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NestedProperties);
        return this._parseBody(node, this._parseDeclaration.bind(this));
    };
    SCSSParser.prototype._parseExtends = function () {
        if (this.peekKeyword('@extend')) {
            var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ExtendsReference);
            this.consumeToken();
            if (!node.getSelectors().addChild(this._parseSimpleSelector())) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.SelectorExpected);
            }
            while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                node.getSelectors().addChild(this._parseSimpleSelector());
            }
            if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Exclamation)) {
                if (!this.acceptIdent('optional')) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnknownKeyword);
                }
            }
            return this.finish(node);
        }
        return null;
    };
    SCSSParser.prototype._parseSimpleSelectorBody = function () {
        return this._parseSelectorCombinator() || this._parseSelectorPlaceholder() || _super.prototype._parseSimpleSelectorBody.call(this);
    };
    SCSSParser.prototype._parseSelectorCombinator = function () {
        if (this.peekDelim('&')) {
            var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.SelectorCombinator);
            this.consumeToken();
            while (!this.hasWhitespace() && (this.acceptDelim('-') || this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Num) || this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Dimension) || node.addChild(this._parseIdent()) || this.acceptDelim('&'))) {
                //  support &-foo-1
            }
            return this.finish(node);
        }
        return null;
    };
    SCSSParser.prototype._parseSelectorPlaceholder = function () {
        if (this.peekDelim('%')) {
            var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.SelectorPlaceholder);
            this.consumeToken();
            this._parseIdent();
            return this.finish(node);
        }
        else if (this.peekKeyword('@at-root')) {
            var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.SelectorPlaceholder);
            this.consumeToken();
            return this.finish(node);
        }
        return null;
    };
    SCSSParser.prototype._parseElementName = function () {
        var pos = this.mark();
        var node = _super.prototype._parseElementName.call(this);
        if (node && !this.hasWhitespace() && this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) { // for #49589
            this.restoreAtMark(pos);
            return null;
        }
        return node;
    };
    SCSSParser.prototype._tryParsePseudoIdentifier = function () {
        return this._parseInterpolation() || _super.prototype._tryParsePseudoIdentifier.call(this); // for #49589
    };
    SCSSParser.prototype._parseWarnAndDebug = function () {
        if (!this.peekKeyword('@debug')
            && !this.peekKeyword('@warn')
            && !this.peekKeyword('@error')) {
            return null;
        }
        var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.Debug);
        this.consumeToken(); // @debug, @warn or @error
        node.addChild(this._parseExpr()); // optional
        return this.finish(node);
    };
    SCSSParser.prototype._parseControlStatement = function (parseStatement) {
        if (parseStatement === void 0) { parseStatement = this._parseRuleSetDeclaration.bind(this); }
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return null;
        }
        return this._parseIfStatement(parseStatement) || this._parseForStatement(parseStatement)
            || this._parseEachStatement(parseStatement) || this._parseWhileStatement(parseStatement);
    };
    SCSSParser.prototype._parseIfStatement = function (parseStatement) {
        if (!this.peekKeyword('@if')) {
            return null;
        }
        return this._internalParseIfStatement(parseStatement);
    };
    SCSSParser.prototype._internalParseIfStatement = function (parseStatement) {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.IfStatement);
        this.consumeToken(); // @if or if
        if (!node.setExpression(this._parseExpr(true))) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
        }
        this._parseBody(node, parseStatement);
        if (this.acceptKeyword('@else')) {
            if (this.peekIdent('if')) {
                node.setElseClause(this._internalParseIfStatement(parseStatement));
            }
            else if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
                var elseNode = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ElseStatement);
                this._parseBody(elseNode, parseStatement);
                node.setElseClause(elseNode);
            }
        }
        return this.finish(node);
    };
    SCSSParser.prototype._parseForStatement = function (parseStatement) {
        if (!this.peekKeyword('@for')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ForStatement);
        this.consumeToken(); // @for
        if (!node.setVariable(this._parseVariable())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!this.acceptIdent('from')) {
            return this.finish(node, _scssErrors_js__WEBPACK_IMPORTED_MODULE_4__.SCSSParseError.FromExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!node.addChild(this._parseBinaryExpr())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!this.acceptIdent('to') && !this.acceptIdent('through')) {
            return this.finish(node, _scssErrors_js__WEBPACK_IMPORTED_MODULE_4__.SCSSParseError.ThroughOrToExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!node.addChild(this._parseBinaryExpr())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        return this._parseBody(node, parseStatement);
    };
    SCSSParser.prototype._parseEachStatement = function (parseStatement) {
        if (!this.peekKeyword('@each')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.EachStatement);
        this.consumeToken(); // @each
        var variables = node.getVariables();
        if (!variables.addChild(this._parseVariable())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
            if (!variables.addChild(this._parseVariable())) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
            }
        }
        this.finish(variables);
        if (!this.acceptIdent('in')) {
            return this.finish(node, _scssErrors_js__WEBPACK_IMPORTED_MODULE_4__.SCSSParseError.InExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!node.addChild(this._parseExpr())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        return this._parseBody(node, parseStatement);
    };
    SCSSParser.prototype._parseWhileStatement = function (parseStatement) {
        if (!this.peekKeyword('@while')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.WhileStatement);
        this.consumeToken(); // @while
        if (!node.addChild(this._parseBinaryExpr())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        return this._parseBody(node, parseStatement);
    };
    SCSSParser.prototype._parseFunctionBodyDeclaration = function () {
        return this._parseVariableDeclaration() || this._parseReturnStatement() || this._parseWarnAndDebug()
            || this._parseControlStatement(this._parseFunctionBodyDeclaration.bind(this));
    };
    SCSSParser.prototype._parseFunctionDeclaration = function () {
        if (!this.peekKeyword('@function')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.FunctionDeclaration);
        this.consumeToken(); // @function
        if (!node.setIdentifier(this._parseIdent([_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Function]))) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.LeftParenthesisExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (node.getParameters().addChild(this._parseParameterDeclaration())) {
            while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                    break;
                }
                if (!node.getParameters().addChild(this._parseParameterDeclaration())) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
                }
            }
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        return this._parseBody(node, this._parseFunctionBodyDeclaration.bind(this));
    };
    SCSSParser.prototype._parseReturnStatement = function () {
        if (!this.peekKeyword('@return')) {
            return null;
        }
        var node = this.createNode(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.NodeType.ReturnStatement);
        this.consumeToken(); // @function
        if (!node.addChild(this._parseExpr())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
        }
        return this.finish(node);
    };
    SCSSParser.prototype._parseMixinDeclaration = function () {
        if (!this.peekKeyword('@mixin')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.MixinDeclaration);
        this.consumeToken();
        if (!node.setIdentifier(this._parseIdent([_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin]))) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            if (node.getParameters().addChild(this._parseParameterDeclaration())) {
                while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getParameters().addChild(this._parseParameterDeclaration())) {
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
                    }
                }
            }
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
            }
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    };
    SCSSParser.prototype._parseParameterDeclaration = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.FunctionParameter);
        if (!node.setIdentifier(this._parseVariable())) {
            return null;
        }
        if (this.accept(_scssScanner_js__WEBPACK_IMPORTED_MODULE_0__.Ellipsis)) {
            // ok
        }
        if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            if (!node.setDefaultValue(this._parseExpr(true))) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableValueExpected, [], [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma, _cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
            }
        }
        return this.finish(node);
    };
    SCSSParser.prototype._parseMixinContent = function () {
        if (!this.peekKeyword('@content')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.MixinContentReference);
        this.consumeToken();
        if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            if (node.getArguments().addChild(this._parseFunctionArgument())) {
                while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getArguments().addChild(this._parseFunctionArgument())) {
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
                    }
                }
            }
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected);
            }
        }
        return this.finish(node);
    };
    SCSSParser.prototype._parseMixinReference = function () {
        if (!this.peekKeyword('@include')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.MixinReference);
        this.consumeToken();
        // Could be module or mixin identifier, set as mixin as default.
        var firstIdent = this._parseIdent([_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin]);
        if (!node.setIdentifier(firstIdent)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        // Is a module accessor.
        if (!this.hasWhitespace() && this.acceptDelim('.') && !this.hasWhitespace()) {
            var secondIdent = this._parseIdent([_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin]);
            if (!secondIdent) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
            }
            var moduleToken = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Module);
            // Re-purpose first matched ident as identifier for module token.
            firstIdent.referenceTypes = [_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Module];
            moduleToken.setIdentifier(firstIdent);
            // Override identifier with second ident.
            node.setIdentifier(secondIdent);
            node.addChild(moduleToken);
        }
        if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            if (node.getArguments().addChild(this._parseFunctionArgument())) {
                while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getArguments().addChild(this._parseFunctionArgument())) {
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
                    }
                }
            }
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected);
            }
        }
        if (this.peekIdent('using') || this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
            node.setContent(this._parseMixinContentDeclaration());
        }
        return this.finish(node);
    };
    SCSSParser.prototype._parseMixinContentDeclaration = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.MixinContentDeclaration);
        if (this.acceptIdent('using')) {
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.LeftParenthesisExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL]);
            }
            if (node.getParameters().addChild(this._parseParameterDeclaration())) {
                while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getParameters().addChild(this._parseParameterDeclaration())) {
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
                    }
                }
            }
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL]);
            }
        }
        if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
            this._parseBody(node, this._parseMixinReferenceBodyStatement.bind(this));
        }
        return this.finish(node);
    };
    SCSSParser.prototype._parseMixinReferenceBodyStatement = function () {
        return this._tryParseKeyframeSelector() || this._parseRuleSetDeclaration();
    };
    SCSSParser.prototype._parseFunctionArgument = function () {
        // [variableName ':'] expression | variableName '...'
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.FunctionArgument);
        var pos = this.mark();
        var argument = this._parseVariable();
        if (argument) {
            if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
                if (this.accept(_scssScanner_js__WEBPACK_IMPORTED_MODULE_0__.Ellipsis)) { // optional
                    node.setValue(argument);
                    return this.finish(node);
                }
                else {
                    this.restoreAtMark(pos);
                }
            }
            else {
                node.setIdentifier(argument);
            }
        }
        if (node.setValue(this._parseExpr(true))) {
            this.accept(_scssScanner_js__WEBPACK_IMPORTED_MODULE_0__.Ellipsis); // #43746
            node.addChild(this._parsePrio()); // #9859
            return this.finish(node);
        }
        else if (node.setValue(this._tryParsePrio())) {
            return this.finish(node);
        }
        return null;
    };
    SCSSParser.prototype._parseURLArgument = function () {
        var pos = this.mark();
        var node = _super.prototype._parseURLArgument.call(this);
        if (!node || !this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            this.restoreAtMark(pos);
            var node_1 = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Node);
            node_1.addChild(this._parseBinaryExpr());
            return this.finish(node_1);
        }
        return node;
    };
    SCSSParser.prototype._parseOperation = function () {
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Node);
        this.consumeToken();
        while (node.addChild(this._parseListElement())) {
            this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma); // optional
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    };
    SCSSParser.prototype._parseListElement = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ListEntry);
        var child = this._parseBinaryExpr();
        if (!child) {
            return null;
        }
        if (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            node.setKey(child);
            if (!node.setValue(this._parseBinaryExpr())) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
            }
        }
        else {
            node.setValue(child);
        }
        return this.finish(node);
    };
    SCSSParser.prototype._parseUse = function () {
        if (!this.peekKeyword('@use')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Use);
        this.consumeToken(); // @use
        if (!node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.StringLiteralExpected);
        }
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
            if (!this.peekRegExp(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident, /as|with/)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnknownKeyword);
            }
            if (this.acceptIdent('as') &&
                (!node.setIdentifier(this._parseIdent([_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Module])) && !this.acceptDelim('*'))) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierOrWildcardExpected);
            }
            if (this.acceptIdent('with')) {
                if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.LeftParenthesisExpected, [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
                }
                // First variable statement, no comma.
                if (!node.getParameters().addChild(this._parseModuleConfigDeclaration())) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
                }
                while (this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    if (this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getParameters().addChild(this._parseModuleConfigDeclaration())) {
                        return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
                    }
                }
                if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected);
                }
            }
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.SemiColonExpected);
        }
        return this.finish(node);
    };
    SCSSParser.prototype._parseModuleConfigDeclaration = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ModuleConfiguration);
        if (!node.setIdentifier(this._parseVariable())) {
            return null;
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon) || !node.setValue(this._parseExpr(true))) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableValueExpected, [], [_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma, _cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
        }
        return this.finish(node);
    };
    SCSSParser.prototype._parseForward = function () {
        if (!this.peekKeyword('@forward')) {
            return null;
        }
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.Forward);
        this.consumeToken();
        if (!node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.StringLiteralExpected);
        }
        if (!this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.peek(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
            if (!this.peekRegExp(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident, /as|hide|show/)) {
                return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnknownKeyword);
            }
            if (this.acceptIdent('as')) {
                var identifier = this._parseIdent([_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Forward]);
                if (!node.setIdentifier(identifier)) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected);
                }
                // Wildcard must be the next character after the identifier string.
                if (this.hasWhitespace() || !this.acceptDelim('*')) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.WildcardExpected);
                }
            }
            if (this.peekIdent('hide') || this.peekIdent('show')) {
                if (!node.addChild(this._parseForwardVisibility())) {
                    return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierOrVariableExpected);
                }
            }
        }
        if (!this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.accept(_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
            return this.finish(node, _cssErrors_js__WEBPACK_IMPORTED_MODULE_5__.ParseError.SemiColonExpected);
        }
        return this.finish(node);
    };
    SCSSParser.prototype._parseForwardVisibility = function () {
        var node = this.create(_cssNodes_js__WEBPACK_IMPORTED_MODULE_3__.ForwardVisibility);
        // Assume to be "hide" or "show".
        node.setIdentifier(this._parseIdent());
        while (node.addChild(this._parseVariable() || this._parseIdent())) {
            // Consume all variables and idents ahead.
        }
        // More than just identifier 
        return node.getChildren().length > 1 ? node : null;
    };
    SCSSParser.prototype._parseSupportsCondition = function () {
        return this._parseInterpolation() || _super.prototype._parseSupportsCondition.call(this);
    };
    return SCSSParser;
}(_cssParser_js__WEBPACK_IMPORTED_MODULE_2__.Parser));



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/scssScanner.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/scssScanner.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VariableName": () => /* binding */ VariableName,
/* harmony export */   "InterpolationFunction": () => /* binding */ InterpolationFunction,
/* harmony export */   "Default": () => /* binding */ Default,
/* harmony export */   "EqualsOperator": () => /* binding */ EqualsOperator,
/* harmony export */   "NotEqualsOperator": () => /* binding */ NotEqualsOperator,
/* harmony export */   "GreaterEqualsOperator": () => /* binding */ GreaterEqualsOperator,
/* harmony export */   "SmallerEqualsOperator": () => /* binding */ SmallerEqualsOperator,
/* harmony export */   "Ellipsis": () => /* binding */ Ellipsis,
/* harmony export */   "Module": () => /* binding */ Module,
/* harmony export */   "SCSSScanner": () => /* binding */ SCSSScanner
/* harmony export */ });
/* harmony import */ var _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssScanner.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssScanner.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var _FSL = '/'.charCodeAt(0);
var _NWL = '\n'.charCodeAt(0);
var _CAR = '\r'.charCodeAt(0);
var _LFD = '\f'.charCodeAt(0);
var _DLR = '$'.charCodeAt(0);
var _HSH = '#'.charCodeAt(0);
var _CUL = '{'.charCodeAt(0);
var _EQS = '='.charCodeAt(0);
var _BNG = '!'.charCodeAt(0);
var _LAN = '<'.charCodeAt(0);
var _RAN = '>'.charCodeAt(0);
var _DOT = '.'.charCodeAt(0);
var _ATS = '@'.charCodeAt(0);
var customTokenValue = _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CustomToken;
var VariableName = customTokenValue++;
var InterpolationFunction = customTokenValue++;
var Default = customTokenValue++;
var EqualsOperator = customTokenValue++;
var NotEqualsOperator = customTokenValue++;
var GreaterEqualsOperator = customTokenValue++;
var SmallerEqualsOperator = customTokenValue++;
var Ellipsis = customTokenValue++;
var Module = customTokenValue++;
var SCSSScanner = /** @class */ (function (_super) {
    __extends(SCSSScanner, _super);
    function SCSSScanner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SCSSScanner.prototype.scanNext = function (offset) {
        // scss variable
        if (this.stream.advanceIfChar(_DLR)) {
            var content = ['$'];
            if (this.ident(content)) {
                return this.finishToken(offset, VariableName, content.join(''));
            }
            else {
                this.stream.goBackTo(offset);
            }
        }
        // scss: interpolation function #{..})
        if (this.stream.advanceIfChars([_HSH, _CUL])) {
            return this.finishToken(offset, InterpolationFunction);
        }
        // operator ==
        if (this.stream.advanceIfChars([_EQS, _EQS])) {
            return this.finishToken(offset, EqualsOperator);
        }
        // operator !=
        if (this.stream.advanceIfChars([_BNG, _EQS])) {
            return this.finishToken(offset, NotEqualsOperator);
        }
        // operators <, <=
        if (this.stream.advanceIfChar(_LAN)) {
            if (this.stream.advanceIfChar(_EQS)) {
                return this.finishToken(offset, SmallerEqualsOperator);
            }
            return this.finishToken(offset, _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Delim);
        }
        // ooperators >, >=
        if (this.stream.advanceIfChar(_RAN)) {
            if (this.stream.advanceIfChar(_EQS)) {
                return this.finishToken(offset, GreaterEqualsOperator);
            }
            return this.finishToken(offset, _cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Delim);
        }
        // ellipis
        if (this.stream.advanceIfChars([_DOT, _DOT, _DOT])) {
            return this.finishToken(offset, Ellipsis);
        }
        return _super.prototype.scanNext.call(this, offset);
    };
    SCSSScanner.prototype.comment = function () {
        if (_super.prototype.comment.call(this)) {
            return true;
        }
        if (!this.inURL && this.stream.advanceIfChars([_FSL, _FSL])) {
            this.stream.advanceWhileChar(function (ch) {
                switch (ch) {
                    case _NWL:
                    case _CAR:
                    case _LFD:
                        return false;
                    default:
                        return true;
                }
            });
            return true;
        }
        else {
            return false;
        }
    };
    return SCSSScanner;
}(_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.Scanner));



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssCodeActions.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssCodeActions.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSCodeActions": () => /* binding */ CSSCodeActions
/* harmony export */ });
/* harmony import */ var _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _utils_strings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/strings.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/strings.js");
/* harmony import */ var _services_lintRules_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/lintRules.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lintRules.js");
/* harmony import */ var _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../cssLanguageTypes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageTypes.js");
/* harmony import */ var _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../fillers/vscode-nls.js */ "./node_modules/monaco-editor/esm/vs/language/css/fillers/vscode-nls.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/






var localize = _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_4__.loadMessageBundle();
var CSSCodeActions = /** @class */ (function () {
    function CSSCodeActions(cssDataManager) {
        this.cssDataManager = cssDataManager;
    }
    CSSCodeActions.prototype.doCodeActions = function (document, range, context, stylesheet) {
        return this.doCodeActions2(document, range, context, stylesheet).map(function (ca) {
            var textDocumentEdit = ca.edit && ca.edit.documentChanges && ca.edit.documentChanges[0];
            return _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_3__.Command.create(ca.title, '_css.applyCodeAction', document.uri, document.version, textDocumentEdit && textDocumentEdit.edits);
        });
    };
    CSSCodeActions.prototype.doCodeActions2 = function (document, range, context, stylesheet) {
        var result = [];
        if (context.diagnostics) {
            for (var _i = 0, _a = context.diagnostics; _i < _a.length; _i++) {
                var diagnostic = _a[_i];
                this.appendFixesForMarker(document, stylesheet, diagnostic, result);
            }
        }
        return result;
    };
    CSSCodeActions.prototype.getFixesForUnknownProperty = function (document, property, marker, result) {
        var propertyName = property.getName();
        var candidates = [];
        this.cssDataManager.getProperties().forEach(function (p) {
            var score = (0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_1__.difference)(propertyName, p.name);
            if (score >= propertyName.length / 2 /*score_lim*/) {
                candidates.push({ property: p.name, score: score });
            }
        });
        // Sort in descending order.
        candidates.sort(function (a, b) {
            return b.score - a.score || a.property.localeCompare(b.property);
        });
        var maxActions = 3;
        for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {
            var candidate = candidates_1[_i];
            var propertyName_1 = candidate.property;
            var title = localize('css.codeaction.rename', "Rename to '{0}'", propertyName_1);
            var edit = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_3__.TextEdit.replace(marker.range, propertyName_1);
            var documentIdentifier = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_3__.VersionedTextDocumentIdentifier.create(document.uri, document.version);
            var workspaceEdit = { documentChanges: [_cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_3__.TextDocumentEdit.create(documentIdentifier, [edit])] };
            var codeAction = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_3__.CodeAction.create(title, workspaceEdit, _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_3__.CodeActionKind.QuickFix);
            codeAction.diagnostics = [marker];
            result.push(codeAction);
            if (--maxActions <= 0) {
                return;
            }
        }
    };
    CSSCodeActions.prototype.appendFixesForMarker = function (document, stylesheet, marker, result) {
        if (marker.code !== _services_lintRules_js__WEBPACK_IMPORTED_MODULE_2__.Rules.UnknownProperty.id) {
            return;
        }
        var offset = document.offsetAt(marker.range.start);
        var end = document.offsetAt(marker.range.end);
        var nodepath = _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.getNodePath(stylesheet, offset);
        for (var i = nodepath.length - 1; i >= 0; i--) {
            var node = nodepath[i];
            if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Declaration) {
                var property = node.getProperty();
                if (property && property.offset === offset && property.end === end) {
                    this.getFixesForUnknownProperty(document, property, marker, result);
                    return;
                }
            }
        }
    };
    return CSSCodeActions;
}());



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssCompletion.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssCompletion.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSCompletion": () => /* binding */ CSSCompletion
/* harmony export */ });
/* harmony import */ var _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _parser_cssSymbolScope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssSymbolScope.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssSymbolScope.js");
/* harmony import */ var _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../languageFacts/facts.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/facts.js");
/* harmony import */ var _utils_strings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/strings.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/strings.js");
/* harmony import */ var _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../cssLanguageTypes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageTypes.js");
/* harmony import */ var _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../fillers/vscode-nls.js */ "./node_modules/monaco-editor/esm/vs/language/css/fillers/vscode-nls.js");
/* harmony import */ var _utils_objects_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/objects.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/objects.js");
/* harmony import */ var _pathCompletion_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./pathCompletion.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/pathCompletion.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};








var localize = _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_5__.loadMessageBundle();
var SnippetFormat = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.InsertTextFormat.Snippet;
var SortTexts;
(function (SortTexts) {
    // char code 32, comes before everything
    SortTexts["Enums"] = " ";
    SortTexts["Normal"] = "d";
    SortTexts["VendorPrefixed"] = "x";
    SortTexts["Term"] = "y";
    SortTexts["Variable"] = "z";
})(SortTexts || (SortTexts = {}));
var CSSCompletion = /** @class */ (function () {
    function CSSCompletion(variablePrefix, lsOptions, cssDataManager) {
        if (variablePrefix === void 0) { variablePrefix = null; }
        this.variablePrefix = variablePrefix;
        this.lsOptions = lsOptions;
        this.cssDataManager = cssDataManager;
        this.completionParticipants = [];
    }
    CSSCompletion.prototype.configure = function (settings) {
        this.settings = settings;
    };
    CSSCompletion.prototype.getSymbolContext = function () {
        if (!this.symbolContext) {
            this.symbolContext = new _parser_cssSymbolScope_js__WEBPACK_IMPORTED_MODULE_1__.Symbols(this.styleSheet);
        }
        return this.symbolContext;
    };
    CSSCompletion.prototype.setCompletionParticipants = function (registeredCompletionParticipants) {
        this.completionParticipants = registeredCompletionParticipants || [];
    };
    CSSCompletion.prototype.doComplete2 = function (document, position, styleSheet, documentContext) {
        return __awaiter(this, void 0, void 0, function () {
            var participant, contributedParticipants, result, pathCompletionResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.lsOptions.fileSystemProvider || !this.lsOptions.fileSystemProvider.readDirectory) {
                            return [2 /*return*/, this.doComplete(document, position, styleSheet)];
                        }
                        participant = new _pathCompletion_js__WEBPACK_IMPORTED_MODULE_7__.PathCompletionParticipant(this.lsOptions.fileSystemProvider.readDirectory);
                        contributedParticipants = this.completionParticipants;
                        this.completionParticipants = [participant].concat(contributedParticipants);
                        result = this.doComplete(document, position, styleSheet);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 3, 4]);
                        return [4 /*yield*/, participant.computeCompletions(document, documentContext)];
                    case 2:
                        pathCompletionResult = _a.sent();
                        return [2 /*return*/, {
                                isIncomplete: result.isIncomplete || pathCompletionResult.isIncomplete,
                                items: pathCompletionResult.items.concat(result.items)
                            }];
                    case 3:
                        this.completionParticipants = contributedParticipants;
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CSSCompletion.prototype.doComplete = function (document, position, styleSheet) {
        this.offset = document.offsetAt(position);
        this.position = position;
        this.currentWord = getCurrentWord(document, this.offset);
        this.defaultReplaceRange = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.Range.create(_cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.Position.create(this.position.line, this.position.character - this.currentWord.length), this.position);
        this.textDocument = document;
        this.styleSheet = styleSheet;
        try {
            var result = { isIncomplete: false, items: [] };
            this.nodePath = _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.getNodePath(this.styleSheet, this.offset);
            for (var i = this.nodePath.length - 1; i >= 0; i--) {
                var node = this.nodePath[i];
                if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Property) {
                    this.getCompletionsForDeclarationProperty(node.getParent(), result);
                }
                else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Expression) {
                    if (node.parent instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Interpolation) {
                        this.getVariableProposals(null, result);
                    }
                    else {
                        this.getCompletionsForExpression(node, result);
                    }
                }
                else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector) {
                    var parentRef = node.findAParent(_parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.ExtendsReference, _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Ruleset);
                    if (parentRef) {
                        if (parentRef.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.ExtendsReference) {
                            this.getCompletionsForExtendsReference(parentRef, node, result);
                        }
                        else {
                            var parentRuleSet = parentRef;
                            this.getCompletionsForSelector(parentRuleSet, parentRuleSet && parentRuleSet.isNested(), result);
                        }
                    }
                }
                else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.FunctionArgument) {
                    this.getCompletionsForFunctionArgument(node, node.getParent(), result);
                }
                else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Declarations) {
                    this.getCompletionsForDeclarations(node, result);
                }
                else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.VariableDeclaration) {
                    this.getCompletionsForVariableDeclaration(node, result);
                }
                else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
                    this.getCompletionsForRuleSet(node, result);
                }
                else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Interpolation) {
                    this.getCompletionsForInterpolation(node, result);
                }
                else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.FunctionDeclaration) {
                    this.getCompletionsForFunctionDeclaration(node, result);
                }
                else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.MixinReference) {
                    this.getCompletionsForMixinReference(node, result);
                }
                else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Function) {
                    this.getCompletionsForFunctionArgument(null, node, result);
                }
                else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Supports) {
                    this.getCompletionsForSupports(node, result);
                }
                else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.SupportsCondition) {
                    this.getCompletionsForSupportsCondition(node, result);
                }
                else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ExtendsReference) {
                    this.getCompletionsForExtendsReference(node, null, result);
                }
                else if (node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.URILiteral) {
                    this.getCompletionForUriLiteralValue(node, result);
                }
                else if (node.parent === null) {
                    this.getCompletionForTopLevel(result);
                }
                else if (node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.StringLiteral && this.isImportPathParent(node.parent.type)) {
                    this.getCompletionForImportPath(node, result);
                    // } else if (node instanceof nodes.Variable) {
                    // this.getCompletionsForVariableDeclaration()
                }
                else {
                    continue;
                }
                if (result.items.length > 0 || this.offset > node.offset) {
                    return this.finalize(result);
                }
            }
            this.getCompletionsForStylesheet(result);
            if (result.items.length === 0) {
                if (this.variablePrefix && this.currentWord.indexOf(this.variablePrefix) === 0) {
                    this.getVariableProposals(null, result);
                }
            }
            return this.finalize(result);
        }
        finally {
            // don't hold on any state, clear symbolContext
            this.position = null;
            this.currentWord = null;
            this.textDocument = null;
            this.styleSheet = null;
            this.symbolContext = null;
            this.defaultReplaceRange = null;
            this.nodePath = null;
        }
    };
    CSSCompletion.prototype.isImportPathParent = function (type) {
        return type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Import;
    };
    CSSCompletion.prototype.finalize = function (result) {
        return result;
    };
    CSSCompletion.prototype.findInNodePath = function () {
        var types = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            types[_i] = arguments[_i];
        }
        for (var i = this.nodePath.length - 1; i >= 0; i--) {
            var node = this.nodePath[i];
            if (types.indexOf(node.type) !== -1) {
                return node;
            }
        }
        return null;
    };
    CSSCompletion.prototype.getCompletionsForDeclarationProperty = function (declaration, result) {
        return this.getPropertyProposals(declaration, result);
    };
    CSSCompletion.prototype.getPropertyProposals = function (declaration, result) {
        var _this = this;
        var triggerPropertyValueCompletion = this.isTriggerPropertyValueCompletionEnabled;
        var completePropertyWithSemicolon = this.isCompletePropertyWithSemicolonEnabled;
        var properties = this.cssDataManager.getProperties();
        properties.forEach(function (entry) {
            var range;
            var insertText;
            var retrigger = false;
            if (declaration) {
                range = _this.getCompletionRange(declaration.getProperty());
                insertText = entry.name;
                if (!(0,_utils_objects_js__WEBPACK_IMPORTED_MODULE_6__.isDefined)(declaration.colonPosition)) {
                    insertText += ': ';
                    retrigger = true;
                }
            }
            else {
                range = _this.getCompletionRange(null);
                insertText = entry.name + ': ';
                retrigger = true;
            }
            // Empty .selector { | } case
            if (!declaration && completePropertyWithSemicolon) {
                insertText += '$0;';
            }
            // Cases such as .selector { p; } or .selector { p:; }
            if (declaration && !declaration.semicolonPosition) {
                if (completePropertyWithSemicolon && _this.offset >= _this.textDocument.offsetAt(range.end)) {
                    insertText += '$0;';
                }
            }
            var item = {
                label: entry.name,
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(entry, _this.doesSupportMarkdown()),
                tags: isDeprecated(entry) ? [_cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(range, insertText),
                insertTextFormat: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.InsertTextFormat.Snippet,
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Property
            };
            if (!entry.restrictions) {
                retrigger = false;
            }
            if (triggerPropertyValueCompletion && retrigger) {
                item.command = {
                    title: 'Suggest',
                    command: 'editor.action.triggerSuggest'
                };
            }
            var relevance = typeof entry.relevance === 'number' ? Math.min(Math.max(entry.relevance, 0), 99) : 50;
            var sortTextSuffix = (255 - relevance).toString(16);
            var sortTextPrefix = _utils_strings_js__WEBPACK_IMPORTED_MODULE_3__.startsWith(entry.name, '-') ? SortTexts.VendorPrefixed : SortTexts.Normal;
            item.sortText = sortTextPrefix + '_' + sortTextSuffix;
            result.items.push(item);
        });
        this.completionParticipants.forEach(function (participant) {
            if (participant.onCssProperty) {
                participant.onCssProperty({
                    propertyName: _this.currentWord,
                    range: _this.defaultReplaceRange
                });
            }
        });
        return result;
    };
    Object.defineProperty(CSSCompletion.prototype, "isTriggerPropertyValueCompletionEnabled", {
        get: function () {
            if (!this.settings ||
                !this.settings.completion ||
                this.settings.completion.triggerPropertyValueCompletion === undefined) {
                return true;
            }
            return this.settings.completion.triggerPropertyValueCompletion;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSCompletion.prototype, "isCompletePropertyWithSemicolonEnabled", {
        get: function () {
            if (!this.settings ||
                !this.settings.completion ||
                this.settings.completion.completePropertyWithSemicolon === undefined) {
                return true;
            }
            return this.settings.completion.completePropertyWithSemicolon;
        },
        enumerable: true,
        configurable: true
    });
    CSSCompletion.prototype.getCompletionsForDeclarationValue = function (node, result) {
        var _this = this;
        var propertyName = node.getFullPropertyName();
        var entry = this.cssDataManager.getProperty(propertyName);
        var existingNode = node.getValue() || null;
        while (existingNode && existingNode.hasChildren()) {
            existingNode = existingNode.findChildAtOffset(this.offset, false);
        }
        this.completionParticipants.forEach(function (participant) {
            if (participant.onCssPropertyValue) {
                participant.onCssPropertyValue({
                    propertyName: propertyName,
                    propertyValue: _this.currentWord,
                    range: _this.getCompletionRange(existingNode)
                });
            }
        });
        if (entry) {
            if (entry.restrictions) {
                for (var _i = 0, _a = entry.restrictions; _i < _a.length; _i++) {
                    var restriction = _a[_i];
                    switch (restriction) {
                        case 'color':
                            this.getColorProposals(entry, existingNode, result);
                            break;
                        case 'position':
                            this.getPositionProposals(entry, existingNode, result);
                            break;
                        case 'repeat':
                            this.getRepeatStyleProposals(entry, existingNode, result);
                            break;
                        case 'line-style':
                            this.getLineStyleProposals(entry, existingNode, result);
                            break;
                        case 'line-width':
                            this.getLineWidthProposals(entry, existingNode, result);
                            break;
                        case 'geometry-box':
                            this.getGeometryBoxProposals(entry, existingNode, result);
                            break;
                        case 'box':
                            this.getBoxProposals(entry, existingNode, result);
                            break;
                        case 'image':
                            this.getImageProposals(entry, existingNode, result);
                            break;
                        case 'timing-function':
                            this.getTimingFunctionProposals(entry, existingNode, result);
                            break;
                        case 'shape':
                            this.getBasicShapeProposals(entry, existingNode, result);
                            break;
                    }
                }
            }
            this.getValueEnumProposals(entry, existingNode, result);
            this.getCSSWideKeywordProposals(entry, existingNode, result);
            this.getUnitProposals(entry, existingNode, result);
        }
        else {
            var existingValues = collectValues(this.styleSheet, node);
            for (var _b = 0, _c = existingValues.getEntries(); _b < _c.length; _b++) {
                var existingValue = _c[_b];
                result.items.push({
                    label: existingValue,
                    textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), existingValue),
                    kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
                });
            }
        }
        this.getVariableProposals(existingNode, result);
        this.getTermProposals(entry, existingNode, result);
        return result;
    };
    CSSCompletion.prototype.getValueEnumProposals = function (entry, existingNode, result) {
        if (entry.values) {
            for (var _i = 0, _a = entry.values; _i < _a.length; _i++) {
                var value = _a[_i];
                var insertString = value.name;
                var insertTextFormat = void 0;
                if (_utils_strings_js__WEBPACK_IMPORTED_MODULE_3__.endsWith(insertString, ')')) {
                    var from = insertString.lastIndexOf('(');
                    if (from !== -1) {
                        insertString = insertString.substr(0, from) + '($1)';
                        insertTextFormat = SnippetFormat;
                    }
                }
                var sortText = SortTexts.Enums;
                if (_utils_strings_js__WEBPACK_IMPORTED_MODULE_3__.startsWith(value.name, '-')) {
                    sortText += SortTexts.VendorPrefixed;
                }
                var item = {
                    label: value.name,
                    documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(value, this.doesSupportMarkdown()),
                    tags: isDeprecated(entry) ? [_cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                    textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertString),
                    sortText: sortText,
                    kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value,
                    insertTextFormat: insertTextFormat
                };
                result.items.push(item);
            }
        }
        return result;
    };
    CSSCompletion.prototype.getCSSWideKeywordProposals = function (entry, existingNode, result) {
        for (var keywords in _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.cssWideKeywords) {
            result.items.push({
                label: keywords,
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.cssWideKeywords[keywords],
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), keywords),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        return result;
    };
    CSSCompletion.prototype.getCompletionsForInterpolation = function (node, result) {
        if (this.offset >= node.offset + 2) {
            this.getVariableProposals(null, result);
        }
        return result;
    };
    CSSCompletion.prototype.getVariableProposals = function (existingNode, result) {
        var symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {
            var symbol = symbols_1[_i];
            var insertText = _utils_strings_js__WEBPACK_IMPORTED_MODULE_3__.startsWith(symbol.name, '--') ? "var(" + symbol.name + ")" : symbol.name;
            var completionItem = {
                label: symbol.name,
                documentation: symbol.value ? _utils_strings_js__WEBPACK_IMPORTED_MODULE_3__.getLimitedString(symbol.value) : symbol.value,
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Variable,
                sortText: SortTexts.Variable
            };
            if (typeof completionItem.documentation === 'string' && isColorString(completionItem.documentation)) {
                completionItem.kind = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Color;
            }
            if (symbol.node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.FunctionParameter) {
                var mixinNode = (symbol.node.getParent());
                if (mixinNode.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.MixinDeclaration) {
                    completionItem.detail = localize('completion.argument', 'argument from \'{0}\'', mixinNode.getName());
                }
            }
            result.items.push(completionItem);
        }
        return result;
    };
    CSSCompletion.prototype.getVariableProposalsForCSSVarFunction = function (result) {
        var symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        symbols = symbols.filter(function (symbol) {
            return _utils_strings_js__WEBPACK_IMPORTED_MODULE_3__.startsWith(symbol.name, '--');
        });
        for (var _i = 0, symbols_2 = symbols; _i < symbols_2.length; _i++) {
            var symbol = symbols_2[_i];
            var completionItem = {
                label: symbol.name,
                documentation: symbol.value ? _utils_strings_js__WEBPACK_IMPORTED_MODULE_3__.getLimitedString(symbol.value) : symbol.value,
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(null), symbol.name),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Variable
            };
            if (typeof completionItem.documentation === 'string' && isColorString(completionItem.documentation)) {
                completionItem.kind = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Color;
            }
            result.items.push(completionItem);
        }
        return result;
    };
    CSSCompletion.prototype.getUnitProposals = function (entry, existingNode, result) {
        var currentWord = '0';
        if (this.currentWord.length > 0) {
            var numMatch = this.currentWord.match(/^-?\d[\.\d+]*/);
            if (numMatch) {
                currentWord = numMatch[0];
                result.isIncomplete = currentWord.length === this.currentWord.length;
            }
        }
        else if (this.currentWord.length === 0) {
            result.isIncomplete = true;
        }
        if (existingNode && existingNode.parent && existingNode.parent.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Term) {
            existingNode = existingNode.getParent(); // include the unary operator
        }
        if (entry.restrictions) {
            for (var _i = 0, _a = entry.restrictions; _i < _a.length; _i++) {
                var restriction = _a[_i];
                var units = _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.units[restriction];
                if (units) {
                    for (var _b = 0, units_1 = units; _b < units_1.length; _b++) {
                        var unit = units_1[_b];
                        var insertText = currentWord + unit;
                        result.items.push({
                            label: insertText,
                            textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Unit
                        });
                    }
                }
            }
        }
        return result;
    };
    CSSCompletion.prototype.getCompletionRange = function (existingNode) {
        if (existingNode && existingNode.offset <= this.offset && this.offset <= existingNode.end) {
            var end = existingNode.end !== -1 ? this.textDocument.positionAt(existingNode.end) : this.position;
            var start = this.textDocument.positionAt(existingNode.offset);
            if (start.line === end.line) {
                return _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.Range.create(start, end); // multi line edits are not allowed
            }
        }
        return this.defaultReplaceRange;
    };
    CSSCompletion.prototype.getColorProposals = function (entry, existingNode, result) {
        for (var color in _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.colors) {
            result.items.push({
                label: color,
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.colors[color],
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), color),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Color
            });
        }
        for (var color in _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.colorKeywords) {
            result.items.push({
                label: color,
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.colorKeywords[color],
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), color),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        var colorValues = new Set();
        this.styleSheet.acceptVisitor(new ColorValueCollector(colorValues, this.offset));
        for (var _i = 0, _a = colorValues.getEntries(); _i < _a.length; _i++) {
            var color = _a[_i];
            result.items.push({
                label: color,
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), color),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Color
            });
        }
        var _loop_1 = function (p) {
            var tabStop = 1;
            var replaceFunction = function (_match, p1) { return '${' + tabStop++ + ':' + p1 + '}'; };
            var insertText = p.func.replace(/\[?\$(\w+)\]?/g, replaceFunction);
            result.items.push({
                label: p.func.substr(0, p.func.indexOf('(')),
                detail: p.func,
                documentation: p.desc,
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this_1.getCompletionRange(existingNode), insertText),
                insertTextFormat: SnippetFormat,
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function
            });
        };
        var this_1 = this;
        for (var _b = 0, _c = _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.colorFunctions; _b < _c.length; _b++) {
            var p = _c[_b];
            _loop_1(p);
        }
        return result;
    };
    CSSCompletion.prototype.getPositionProposals = function (entry, existingNode, result) {
        for (var position in _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.positionKeywords) {
            result.items.push({
                label: position,
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.positionKeywords[position],
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), position),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        return result;
    };
    CSSCompletion.prototype.getRepeatStyleProposals = function (entry, existingNode, result) {
        for (var repeat in _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.repeatStyleKeywords) {
            result.items.push({
                label: repeat,
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.repeatStyleKeywords[repeat],
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), repeat),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        return result;
    };
    CSSCompletion.prototype.getLineStyleProposals = function (entry, existingNode, result) {
        for (var lineStyle in _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.lineStyleKeywords) {
            result.items.push({
                label: lineStyle,
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.lineStyleKeywords[lineStyle],
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), lineStyle),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        return result;
    };
    CSSCompletion.prototype.getLineWidthProposals = function (entry, existingNode, result) {
        for (var _i = 0, _a = _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.lineWidthKeywords; _i < _a.length; _i++) {
            var lineWidth = _a[_i];
            result.items.push({
                label: lineWidth,
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), lineWidth),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        return result;
    };
    CSSCompletion.prototype.getGeometryBoxProposals = function (entry, existingNode, result) {
        for (var box in _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.geometryBoxKeywords) {
            result.items.push({
                label: box,
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.geometryBoxKeywords[box],
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), box),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        return result;
    };
    CSSCompletion.prototype.getBoxProposals = function (entry, existingNode, result) {
        for (var box in _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.boxKeywords) {
            result.items.push({
                label: box,
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.boxKeywords[box],
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), box),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        return result;
    };
    CSSCompletion.prototype.getImageProposals = function (entry, existingNode, result) {
        for (var image in _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.imageFunctions) {
            var insertText = moveCursorInsideParenthesis(image);
            result.items.push({
                label: image,
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.imageFunctions[image],
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: image !== insertText ? SnippetFormat : void 0
            });
        }
        return result;
    };
    CSSCompletion.prototype.getTimingFunctionProposals = function (entry, existingNode, result) {
        for (var timing in _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.transitionTimingFunctions) {
            var insertText = moveCursorInsideParenthesis(timing);
            result.items.push({
                label: timing,
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.transitionTimingFunctions[timing],
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: timing !== insertText ? SnippetFormat : void 0
            });
        }
        return result;
    };
    CSSCompletion.prototype.getBasicShapeProposals = function (entry, existingNode, result) {
        for (var shape in _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.basicShapeFunctions) {
            var insertText = moveCursorInsideParenthesis(shape);
            result.items.push({
                label: shape,
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.basicShapeFunctions[shape],
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: shape !== insertText ? SnippetFormat : void 0
            });
        }
        return result;
    };
    CSSCompletion.prototype.getCompletionsForStylesheet = function (result) {
        var node = this.styleSheet.findFirstChildBeforeOffset(this.offset);
        if (!node) {
            return this.getCompletionForTopLevel(result);
        }
        if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
            return this.getCompletionsForRuleSet(node, result);
        }
        if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Supports) {
            return this.getCompletionsForSupports(node, result);
        }
        return result;
    };
    CSSCompletion.prototype.getCompletionForTopLevel = function (result) {
        var _this = this;
        this.cssDataManager.getAtDirectives().forEach(function (entry) {
            result.items.push({
                label: entry.name,
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(_this.getCompletionRange(null), entry.name),
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(entry, _this.doesSupportMarkdown()),
                tags: isDeprecated(entry) ? [_cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Keyword
            });
        });
        this.getCompletionsForSelector(null, false, result);
        return result;
    };
    CSSCompletion.prototype.getCompletionsForRuleSet = function (ruleSet, result) {
        var declarations = ruleSet.getDeclarations();
        var isAfter = declarations && declarations.endsWith('}') && this.offset >= declarations.end;
        if (isAfter) {
            return this.getCompletionForTopLevel(result);
        }
        var isInSelectors = !declarations || this.offset <= declarations.offset;
        if (isInSelectors) {
            return this.getCompletionsForSelector(ruleSet, ruleSet.isNested(), result);
        }
        return this.getCompletionsForDeclarations(ruleSet.getDeclarations(), result);
    };
    CSSCompletion.prototype.getCompletionsForSelector = function (ruleSet, isNested, result) {
        var _this = this;
        var existingNode = this.findInNodePath(_parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.PseudoSelector, _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.IdentifierSelector, _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.ClassSelector, _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.ElementNameSelector);
        if (!existingNode && this.offset - this.currentWord.length > 0 && this.textDocument.getText()[this.offset - this.currentWord.length - 1] === ':') {
            // after the ':' of a pseudo selector, no node generated for just ':'
            this.currentWord = ':' + this.currentWord;
            this.defaultReplaceRange = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.Range.create(_cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.Position.create(this.position.line, this.position.character - this.currentWord.length), this.position);
        }
        var pseudoClasses = this.cssDataManager.getPseudoClasses();
        pseudoClasses.forEach(function (entry) {
            var insertText = moveCursorInsideParenthesis(entry.name);
            var item = {
                label: entry.name,
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(_this.getCompletionRange(existingNode), insertText),
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(entry, _this.doesSupportMarkdown()),
                tags: isDeprecated(entry) ? [_cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: entry.name !== insertText ? SnippetFormat : void 0
            };
            if (_utils_strings_js__WEBPACK_IMPORTED_MODULE_3__.startsWith(entry.name, ':-')) {
                item.sortText = SortTexts.VendorPrefixed;
            }
            result.items.push(item);
        });
        var pseudoElements = this.cssDataManager.getPseudoElements();
        pseudoElements.forEach(function (entry) {
            var insertText = moveCursorInsideParenthesis(entry.name);
            var item = {
                label: entry.name,
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(_this.getCompletionRange(existingNode), insertText),
                documentation: _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(entry, _this.doesSupportMarkdown()),
                tags: isDeprecated(entry) ? [_cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: entry.name !== insertText ? SnippetFormat : void 0
            };
            if (_utils_strings_js__WEBPACK_IMPORTED_MODULE_3__.startsWith(entry.name, '::-')) {
                item.sortText = SortTexts.VendorPrefixed;
            }
            result.items.push(item);
        });
        if (!isNested) { // show html tags only for top level
            for (var _i = 0, _a = _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.html5Tags; _i < _a.length; _i++) {
                var entry = _a[_i];
                result.items.push({
                    label: entry,
                    textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), entry),
                    kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Keyword
                });
            }
            for (var _b = 0, _c = _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.svgElements; _b < _c.length; _b++) {
                var entry = _c[_b];
                result.items.push({
                    label: entry,
                    textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), entry),
                    kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Keyword
                });
            }
        }
        var visited = {};
        visited[this.currentWord] = true;
        var docText = this.textDocument.getText();
        this.styleSheet.accept(function (n) {
            if (n.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.SimpleSelector && n.length > 0) {
                var selector = docText.substr(n.offset, n.length);
                if (selector.charAt(0) === '.' && !visited[selector]) {
                    visited[selector] = true;
                    result.items.push({
                        label: selector,
                        textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(_this.getCompletionRange(existingNode), selector),
                        kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Keyword
                    });
                }
                return false;
            }
            return true;
        });
        if (ruleSet && ruleSet.isNested()) {
            var selector = ruleSet.getSelectors().findFirstChildBeforeOffset(this.offset);
            if (selector && ruleSet.getSelectors().getChildren().indexOf(selector) === 0) {
                this.getPropertyProposals(null, result);
            }
        }
        return result;
    };
    CSSCompletion.prototype.getCompletionsForDeclarations = function (declarations, result) {
        if (!declarations || this.offset === declarations.offset) { // incomplete nodes
            return result;
        }
        var node = declarations.findFirstChildBeforeOffset(this.offset);
        if (!node) {
            return this.getCompletionsForDeclarationProperty(null, result);
        }
        if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.AbstractDeclaration) {
            var declaration = node;
            if (!(0,_utils_objects_js__WEBPACK_IMPORTED_MODULE_6__.isDefined)(declaration.colonPosition) || this.offset <= declaration.colonPosition) {
                // complete property
                return this.getCompletionsForDeclarationProperty(declaration, result);
            }
            else if (((0,_utils_objects_js__WEBPACK_IMPORTED_MODULE_6__.isDefined)(declaration.semicolonPosition) && declaration.semicolonPosition < this.offset)) {
                if (this.offset === declaration.semicolonPosition + 1) {
                    return result; // don't show new properties right after semicolon (see Bug 15421:[intellisense] [css] Be less aggressive when manually typing CSS)
                }
                // complete next property
                return this.getCompletionsForDeclarationProperty(null, result);
            }
            if (declaration instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Declaration) {
                // complete value
                return this.getCompletionsForDeclarationValue(declaration, result);
            }
        }
        else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ExtendsReference) {
            this.getCompletionsForExtendsReference(node, null, result);
        }
        else if (this.currentWord && this.currentWord[0] === '@') {
            this.getCompletionsForDeclarationProperty(null, result);
        }
        else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
            this.getCompletionsForDeclarationProperty(null, result);
        }
        return result;
    };
    CSSCompletion.prototype.getCompletionsForVariableDeclaration = function (declaration, result) {
        if (this.offset && (0,_utils_objects_js__WEBPACK_IMPORTED_MODULE_6__.isDefined)(declaration.colonPosition) && this.offset > declaration.colonPosition) {
            this.getVariableProposals(declaration.getValue(), result);
        }
        return result;
    };
    CSSCompletion.prototype.getCompletionsForExpression = function (expression, result) {
        var parent = expression.getParent();
        if (parent instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.FunctionArgument) {
            this.getCompletionsForFunctionArgument(parent, parent.getParent(), result);
            return result;
        }
        var declaration = expression.findParent(_parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Declaration);
        if (!declaration) {
            this.getTermProposals(undefined, null, result);
            return result;
        }
        var node = expression.findChildAtOffset(this.offset, true);
        if (!node) {
            return this.getCompletionsForDeclarationValue(declaration, result);
        }
        if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NumericValue || node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Identifier) {
            return this.getCompletionsForDeclarationValue(declaration, result);
        }
        return result;
    };
    CSSCompletion.prototype.getCompletionsForFunctionArgument = function (arg, func, result) {
        var identifier = func.getIdentifier();
        if (identifier && identifier.matches('var')) {
            if (!func.getArguments().hasChildren() || func.getArguments().getChild(0) === arg) {
                this.getVariableProposalsForCSSVarFunction(result);
            }
        }
        return result;
    };
    CSSCompletion.prototype.getCompletionsForFunctionDeclaration = function (decl, result) {
        var declarations = decl.getDeclarations();
        if (declarations && this.offset > declarations.offset && this.offset < declarations.end) {
            this.getTermProposals(undefined, null, result);
        }
        return result;
    };
    CSSCompletion.prototype.getCompletionsForMixinReference = function (ref, result) {
        var _this = this;
        var allMixins = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Mixin);
        for (var _i = 0, allMixins_1 = allMixins; _i < allMixins_1.length; _i++) {
            var mixinSymbol = allMixins_1[_i];
            if (mixinSymbol.node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.MixinDeclaration) {
                result.items.push(this.makeTermProposal(mixinSymbol, mixinSymbol.node.getParameters(), null));
            }
        }
        var identifierNode = ref.getIdentifier() || null;
        this.completionParticipants.forEach(function (participant) {
            if (participant.onCssMixinReference) {
                participant.onCssMixinReference({
                    mixinName: _this.currentWord,
                    range: _this.getCompletionRange(identifierNode)
                });
            }
        });
        return result;
    };
    CSSCompletion.prototype.getTermProposals = function (entry, existingNode, result) {
        var allFunctions = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Function);
        for (var _i = 0, allFunctions_1 = allFunctions; _i < allFunctions_1.length; _i++) {
            var functionSymbol = allFunctions_1[_i];
            if (functionSymbol.node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.FunctionDeclaration) {
                result.items.push(this.makeTermProposal(functionSymbol, functionSymbol.node.getParameters(), existingNode));
            }
        }
        return result;
    };
    CSSCompletion.prototype.makeTermProposal = function (symbol, parameters, existingNode) {
        var decl = symbol.node;
        var params = parameters.getChildren().map(function (c) {
            return (c instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.FunctionParameter) ? c.getName() : c.getText();
        });
        var insertText = symbol.name + '(' + params.map(function (p, index) { return '${' + (index + 1) + ':' + p + '}'; }).join(', ') + ')';
        return {
            label: symbol.name,
            detail: symbol.name + '(' + params.join(', ') + ')',
            textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
            insertTextFormat: SnippetFormat,
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
            sortText: SortTexts.Term
        };
    };
    CSSCompletion.prototype.getCompletionsForSupportsCondition = function (supportsCondition, result) {
        var child = supportsCondition.findFirstChildBeforeOffset(this.offset);
        if (child) {
            if (child instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Declaration) {
                if (!(0,_utils_objects_js__WEBPACK_IMPORTED_MODULE_6__.isDefined)(child.colonPosition) || this.offset <= child.colonPosition) {
                    return this.getCompletionsForDeclarationProperty(child, result);
                }
                else {
                    return this.getCompletionsForDeclarationValue(child, result);
                }
            }
            else if (child instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.SupportsCondition) {
                return this.getCompletionsForSupportsCondition(child, result);
            }
        }
        if ((0,_utils_objects_js__WEBPACK_IMPORTED_MODULE_6__.isDefined)(supportsCondition.lParent) && this.offset > supportsCondition.lParent && (!(0,_utils_objects_js__WEBPACK_IMPORTED_MODULE_6__.isDefined)(supportsCondition.rParent) || this.offset <= supportsCondition.rParent)) {
            return this.getCompletionsForDeclarationProperty(null, result);
        }
        return result;
    };
    CSSCompletion.prototype.getCompletionsForSupports = function (supports, result) {
        var declarations = supports.getDeclarations();
        var inInCondition = !declarations || this.offset <= declarations.offset;
        if (inInCondition) {
            var child = supports.findFirstChildBeforeOffset(this.offset);
            if (child instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.SupportsCondition) {
                return this.getCompletionsForSupportsCondition(child, result);
            }
            return result;
        }
        return this.getCompletionForTopLevel(result);
    };
    CSSCompletion.prototype.getCompletionsForExtendsReference = function (extendsRef, existingNode, result) {
        return result;
    };
    CSSCompletion.prototype.getCompletionForUriLiteralValue = function (uriLiteralNode, result) {
        var uriValue;
        var position;
        var range;
        // No children, empty value
        if (!uriLiteralNode.hasChildren()) {
            uriValue = '';
            position = this.position;
            var emptyURIValuePosition = this.textDocument.positionAt(uriLiteralNode.offset + 'url('.length);
            range = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.Range.create(emptyURIValuePosition, emptyURIValuePosition);
        }
        else {
            var uriValueNode = uriLiteralNode.getChild(0);
            uriValue = uriValueNode.getText();
            position = this.position;
            range = this.getCompletionRange(uriValueNode);
        }
        this.completionParticipants.forEach(function (participant) {
            if (participant.onCssURILiteralValue) {
                participant.onCssURILiteralValue({
                    uriValue: uriValue,
                    position: position,
                    range: range
                });
            }
        });
        return result;
    };
    CSSCompletion.prototype.getCompletionForImportPath = function (importPathNode, result) {
        var _this = this;
        this.completionParticipants.forEach(function (participant) {
            if (participant.onCssImportPath) {
                participant.onCssImportPath({
                    pathValue: importPathNode.getText(),
                    position: _this.position,
                    range: _this.getCompletionRange(importPathNode)
                });
            }
        });
        return result;
    };
    CSSCompletion.prototype.doesSupportMarkdown = function () {
        var _a, _b, _c;
        if (!(0,_utils_objects_js__WEBPACK_IMPORTED_MODULE_6__.isDefined)(this.supportsMarkdown)) {
            if (!(0,_utils_objects_js__WEBPACK_IMPORTED_MODULE_6__.isDefined)(this.lsOptions.clientCapabilities)) {
                this.supportsMarkdown = true;
                return this.supportsMarkdown;
            }
            var documentationFormat = (_c = (_b = (_a = this.lsOptions.clientCapabilities.textDocument) === null || _a === void 0 ? void 0 : _a.completion) === null || _b === void 0 ? void 0 : _b.completionItem) === null || _c === void 0 ? void 0 : _c.documentationFormat;
            this.supportsMarkdown = Array.isArray(documentationFormat) && documentationFormat.indexOf(_cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.MarkupKind.Markdown) !== -1;
        }
        return this.supportsMarkdown;
    };
    return CSSCompletion;
}());

function isDeprecated(entry) {
    if (entry.status && (entry.status === 'nonstandard' || entry.status === 'obsolete')) {
        return true;
    }
    return false;
}
/**
 * Rank number should all be same length strings
 */
function computeRankNumber(n) {
    var nstr = n.toString();
    switch (nstr.length) {
        case 4:
            return nstr;
        case 3:
            return '0' + nstr;
        case 2:
            return '00' + nstr;
        case 1:
            return '000' + nstr;
        default:
            return '0000';
    }
}
var Set = /** @class */ (function () {
    function Set() {
        this.entries = {};
    }
    Set.prototype.add = function (entry) {
        this.entries[entry] = true;
    };
    Set.prototype.getEntries = function () {
        return Object.keys(this.entries);
    };
    return Set;
}());
function moveCursorInsideParenthesis(text) {
    return text.replace(/\(\)$/, "($1)");
}
function collectValues(styleSheet, declaration) {
    var fullPropertyName = declaration.getFullPropertyName();
    var entries = new Set();
    function visitValue(node) {
        if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Identifier || node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NumericValue || node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.HexColorValue) {
            entries.add(node.getText());
        }
        return true;
    }
    function matchesProperty(decl) {
        var propertyName = decl.getFullPropertyName();
        return fullPropertyName === propertyName;
    }
    function vistNode(node) {
        if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Declaration && node !== declaration) {
            if (matchesProperty(node)) {
                var value = node.getValue();
                if (value) {
                    value.accept(visitValue);
                }
            }
        }
        return true;
    }
    styleSheet.accept(vistNode);
    return entries;
}
var ColorValueCollector = /** @class */ (function () {
    function ColorValueCollector(entries, currentOffset) {
        this.entries = entries;
        this.currentOffset = currentOffset;
        // nothing to do
    }
    ColorValueCollector.prototype.visitNode = function (node) {
        if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.HexColorValue || (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Function && _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.isColorConstructor(node))) {
            if (this.currentOffset < node.offset || node.end < this.currentOffset) {
                this.entries.add(node.getText());
            }
        }
        return true;
    };
    return ColorValueCollector;
}());
function getCurrentWord(document, offset) {
    var i = offset - 1;
    var text = document.getText();
    while (i >= 0 && ' \t\n\r":{[()]},*>+'.indexOf(text.charAt(i)) === -1) {
        i--;
    }
    return text.substring(i + 1, offset);
}
function isColorString(s) {
    // From https://stackoverflow.com/questions/8027423/how-to-check-if-a-string-is-a-valid-hex-color-representation/8027444
    return (s.toLowerCase() in _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_2__.colors) || /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(s);
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssFolding.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssFolding.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFoldingRanges": () => /* binding */ getFoldingRanges
/* harmony export */ });
/* harmony import */ var _parser_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssScanner.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssScanner.js");
/* harmony import */ var _parser_scssScanner_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/scssScanner.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/scssScanner.js");
/* harmony import */ var _parser_lessScanner_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/lessScanner.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/lessScanner.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/




function getFoldingRanges(document, context) {
    var ranges = computeFoldingRanges(document);
    return limitFoldingRanges(ranges, context);
}
function computeFoldingRanges(document) {
    function getStartLine(t) {
        return document.positionAt(t.offset).line;
    }
    function getEndLine(t) {
        return document.positionAt(t.offset + t.len).line;
    }
    function getScanner() {
        switch (document.languageId) {
            case 'scss':
                return new _parser_scssScanner_js__WEBPACK_IMPORTED_MODULE_1__.SCSSScanner();
            case 'less':
                return new _parser_lessScanner_js__WEBPACK_IMPORTED_MODULE_2__.LESSScanner();
            default:
                return new _parser_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.Scanner();
        }
    }
    function tokenToRange(t, kind) {
        var startLine = getStartLine(t);
        var endLine = getEndLine(t);
        if (startLine !== endLine) {
            return {
                startLine: startLine,
                endLine: endLine,
                kind: kind
            };
        }
        else {
            return null;
        }
    }
    var ranges = [];
    var delimiterStack = [];
    var scanner = getScanner();
    scanner.ignoreComment = false;
    scanner.setSource(document.getText());
    var token = scanner.scan();
    var prevToken = null;
    var _loop_1 = function () {
        switch (token.type) {
            case _parser_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL:
            case _parser_scssScanner_js__WEBPACK_IMPORTED_MODULE_1__.InterpolationFunction:
                {
                    delimiterStack.push({ line: getStartLine(token), type: 'brace', isStart: true });
                    break;
                }
            case _parser_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR: {
                if (delimiterStack.length !== 0) {
                    var prevDelimiter = popPrevStartDelimiterOfType(delimiterStack, 'brace');
                    if (!prevDelimiter) {
                        break;
                    }
                    var endLine = getEndLine(token);
                    if (prevDelimiter.type === 'brace') {
                        /**
                         * Other than the case when curly brace is not on a new line by itself, for example
                         * .foo {
                         *   color: red; }
                         * Use endLine minus one to show ending curly brace
                         */
                        if (prevToken && getEndLine(prevToken) !== endLine) {
                            endLine--;
                        }
                        if (prevDelimiter.line !== endLine) {
                            ranges.push({
                                startLine: prevDelimiter.line,
                                endLine: endLine,
                                kind: undefined
                            });
                        }
                    }
                }
                break;
            }
            /**
             * In CSS, there is no single line comment prefixed with //
             * All comments are marked as `Comment`
             */
            case _parser_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comment: {
                var commentRegionMarkerToDelimiter_1 = function (marker) {
                    if (marker === '#region') {
                        return { line: getStartLine(token), type: 'comment', isStart: true };
                    }
                    else {
                        return { line: getEndLine(token), type: 'comment', isStart: false };
                    }
                };
                var getCurrDelimiter = function (token) {
                    var matches = token.text.match(/^\s*\/\*\s*(#region|#endregion)\b\s*(.*?)\s*\*\//);
                    if (matches) {
                        return commentRegionMarkerToDelimiter_1(matches[1]);
                    }
                    else if (document.languageId === 'scss' || document.languageId === 'less') {
                        var matches_1 = token.text.match(/^\s*\/\/\s*(#region|#endregion)\b\s*(.*?)\s*/);
                        if (matches_1) {
                            return commentRegionMarkerToDelimiter_1(matches_1[1]);
                        }
                    }
                    return null;
                };
                var currDelimiter = getCurrDelimiter(token);
                // /* */ comment region folding
                // All #region and #endregion cases
                if (currDelimiter) {
                    if (currDelimiter.isStart) {
                        delimiterStack.push(currDelimiter);
                    }
                    else {
                        var prevDelimiter = popPrevStartDelimiterOfType(delimiterStack, 'comment');
                        if (!prevDelimiter) {
                            break;
                        }
                        if (prevDelimiter.type === 'comment') {
                            if (prevDelimiter.line !== currDelimiter.line) {
                                ranges.push({
                                    startLine: prevDelimiter.line,
                                    endLine: currDelimiter.line,
                                    kind: 'region'
                                });
                            }
                        }
                    }
                }
                // Multiline comment case
                else {
                    var range = tokenToRange(token, 'comment');
                    if (range) {
                        ranges.push(range);
                    }
                }
                break;
            }
        }
        prevToken = token;
        token = scanner.scan();
    };
    while (token.type !== _parser_cssScanner_js__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF) {
        _loop_1();
    }
    return ranges;
}
function popPrevStartDelimiterOfType(stack, type) {
    if (stack.length === 0) {
        return null;
    }
    for (var i = stack.length - 1; i >= 0; i--) {
        if (stack[i].type === type && stack[i].isStart) {
            return stack.splice(i, 1)[0];
        }
    }
    return null;
}
/**
 * - Sort regions
 * - Remove invalid regions (intersections)
 * - If limit exceeds, only return `rangeLimit` amount of ranges
 */
function limitFoldingRanges(ranges, context) {
    var maxRanges = context && context.rangeLimit || Number.MAX_VALUE;
    var sortedRanges = ranges.sort(function (r1, r2) {
        var diff = r1.startLine - r2.startLine;
        if (diff === 0) {
            diff = r1.endLine - r2.endLine;
        }
        return diff;
    });
    var validRanges = [];
    var prevEndLine = -1;
    sortedRanges.forEach(function (r) {
        if (!(r.startLine < prevEndLine && prevEndLine < r.endLine)) {
            validRanges.push(r);
            prevEndLine = r.endLine;
        }
    });
    if (validRanges.length < maxRanges) {
        return validRanges;
    }
    else {
        return validRanges.slice(0, maxRanges);
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssHover.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssHover.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSHover": () => /* binding */ CSSHover
/* harmony export */ });
/* harmony import */ var _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../languageFacts/facts.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/facts.js");
/* harmony import */ var _selectorPrinting_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectorPrinting.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/selectorPrinting.js");
/* harmony import */ var _utils_strings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/strings.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/strings.js");
/* harmony import */ var _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../cssLanguageTypes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageTypes.js");
/* harmony import */ var _utils_objects_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/objects.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/objects.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/







var CSSHover = /** @class */ (function () {
    function CSSHover(clientCapabilities, cssDataManager) {
        this.clientCapabilities = clientCapabilities;
        this.cssDataManager = cssDataManager;
        this.selectorPrinting = new _selectorPrinting_js__WEBPACK_IMPORTED_MODULE_2__.SelectorPrinting(cssDataManager);
    }
    CSSHover.prototype.doHover = function (document, position, stylesheet) {
        function getRange(node) {
            return _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.Range.create(document.positionAt(node.offset), document.positionAt(node.end));
        }
        var offset = document.offsetAt(position);
        var nodepath = _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.getNodePath(stylesheet, offset);
        /**
         * nodepath is top-down
         * Build up the hover by appending inner node's information
         */
        var hover = null;
        for (var i = 0; i < nodepath.length; i++) {
            var node = nodepath[i];
            if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Selector) {
                hover = {
                    contents: this.selectorPrinting.selectorToMarkedString(node),
                    range: getRange(node)
                };
                break;
            }
            if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector) {
                /**
                 * Some sass specific at rules such as `@at-root` are parsed as `SimpleSelector`
                 */
                if (!(0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_3__.startsWith)(node.getText(), '@')) {
                    hover = {
                        contents: this.selectorPrinting.simpleSelectorToMarkedString(node),
                        range: getRange(node)
                    };
                }
                break;
            }
            if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Declaration) {
                var propertyName = node.getFullPropertyName();
                var entry = this.cssDataManager.getProperty(propertyName);
                if (entry) {
                    var contents = _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_1__.getEntryDescription(entry, this.doesSupportMarkdown());
                    if (contents) {
                        hover = {
                            contents: contents,
                            range: getRange(node)
                        };
                    }
                    else {
                        hover = null;
                    }
                }
                continue;
            }
            if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.UnknownAtRule) {
                var atRuleName = node.getText();
                var entry = this.cssDataManager.getAtDirective(atRuleName);
                if (entry) {
                    var contents = _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_1__.getEntryDescription(entry, this.doesSupportMarkdown());
                    if (contents) {
                        hover = {
                            contents: contents,
                            range: getRange(node)
                        };
                    }
                    else {
                        hover = null;
                    }
                }
                continue;
            }
            if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Node && node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.PseudoSelector) {
                var selectorName = node.getText();
                var entry = selectorName.slice(0, 2) === '::'
                    ? this.cssDataManager.getPseudoElement(selectorName)
                    : this.cssDataManager.getPseudoClass(selectorName);
                if (entry) {
                    var contents = _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_1__.getEntryDescription(entry, this.doesSupportMarkdown());
                    if (contents) {
                        hover = {
                            contents: contents,
                            range: getRange(node)
                        };
                    }
                    else {
                        hover = null;
                    }
                }
                continue;
            }
        }
        if (hover) {
            hover.contents = this.convertContents(hover.contents);
        }
        return hover;
    };
    CSSHover.prototype.convertContents = function (contents) {
        if (!this.doesSupportMarkdown()) {
            if (typeof contents === 'string') {
                return contents;
            }
            // MarkupContent
            else if ('kind' in contents) {
                return {
                    kind: 'plaintext',
                    value: contents.value
                };
            }
            // MarkedString[]
            else if (Array.isArray(contents)) {
                return contents.map(function (c) {
                    return typeof c === 'string' ? c : c.value;
                });
            }
            // MarkedString
            else {
                return contents.value;
            }
        }
        return contents;
    };
    CSSHover.prototype.doesSupportMarkdown = function () {
        if (!(0,_utils_objects_js__WEBPACK_IMPORTED_MODULE_5__.isDefined)(this.supportsMarkdown)) {
            if (!(0,_utils_objects_js__WEBPACK_IMPORTED_MODULE_5__.isDefined)(this.clientCapabilities)) {
                this.supportsMarkdown = true;
                return this.supportsMarkdown;
            }
            var hover = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.hover;
            this.supportsMarkdown = hover && hover.contentFormat && Array.isArray(hover.contentFormat) && hover.contentFormat.indexOf(_cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_4__.MarkupKind.Markdown) !== -1;
        }
        return this.supportsMarkdown;
    };
    return CSSHover;
}());



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssNavigation.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssNavigation.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSNavigation": () => /* binding */ CSSNavigation
/* harmony export */ });
/* harmony import */ var _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cssLanguageTypes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageTypes.js");
/* harmony import */ var _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../fillers/vscode-nls.js */ "./node_modules/monaco-editor/esm/vs/language/css/fillers/vscode-nls.js");
/* harmony import */ var _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _parser_cssSymbolScope_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../parser/cssSymbolScope.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssSymbolScope.js");
/* harmony import */ var _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../languageFacts/facts.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/facts.js");
/* harmony import */ var _utils_strings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/strings.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/strings.js");
/* harmony import */ var _utils_resources_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/resources.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/resources.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};







var localize = _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_1__.loadMessageBundle();
var CSSNavigation = /** @class */ (function () {
    function CSSNavigation(fileSystemProvider) {
        this.fileSystemProvider = fileSystemProvider;
    }
    CSSNavigation.prototype.findDefinition = function (document, position, stylesheet) {
        var symbols = new _parser_cssSymbolScope_js__WEBPACK_IMPORTED_MODULE_3__.Symbols(stylesheet);
        var offset = document.offsetAt(position);
        var node = _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.getNodeAtOffset(stylesheet, offset);
        if (!node) {
            return null;
        }
        var symbol = symbols.findSymbolFromNode(node);
        if (!symbol) {
            return null;
        }
        return {
            uri: document.uri,
            range: getRange(symbol.node, document)
        };
    };
    CSSNavigation.prototype.findReferences = function (document, position, stylesheet) {
        var highlights = this.findDocumentHighlights(document, position, stylesheet);
        return highlights.map(function (h) {
            return {
                uri: document.uri,
                range: h.range
            };
        });
    };
    CSSNavigation.prototype.findDocumentHighlights = function (document, position, stylesheet) {
        var result = [];
        var offset = document.offsetAt(position);
        var node = _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.getNodeAtOffset(stylesheet, offset);
        if (!node || node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Stylesheet || node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Declarations) {
            return result;
        }
        if (node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Identifier && node.parent && node.parent.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.ClassSelector) {
            node = node.parent;
        }
        var symbols = new _parser_cssSymbolScope_js__WEBPACK_IMPORTED_MODULE_3__.Symbols(stylesheet);
        var symbol = symbols.findSymbolFromNode(node);
        var name = node.getText();
        stylesheet.accept(function (candidate) {
            if (symbol) {
                if (symbols.matchesSymbol(candidate, symbol)) {
                    result.push({
                        kind: getHighlightKind(candidate),
                        range: getRange(candidate, document)
                    });
                    return false;
                }
            }
            else if (node && node.type === candidate.type && candidate.matches(name)) {
                // Same node type and data
                result.push({
                    kind: getHighlightKind(candidate),
                    range: getRange(candidate, document)
                });
            }
            return true;
        });
        return result;
    };
    CSSNavigation.prototype.isRawStringDocumentLinkNode = function (node) {
        return node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Import;
    };
    CSSNavigation.prototype.findDocumentLinks = function (document, stylesheet, documentContext) {
        var links = this.findUnresolvedLinks(document, stylesheet);
        for (var i = 0; i < links.length; i++) {
            var target = links[i].target;
            if (target && !(/^\w+:\/\//g.test(target))) {
                var resolved = documentContext.resolveReference(target, document.uri);
                if (resolved) {
                    links[i].target = resolved;
                }
            }
        }
        return links;
    };
    CSSNavigation.prototype.findDocumentLinks2 = function (document, stylesheet, documentContext) {
        return __awaiter(this, void 0, void 0, function () {
            var links, resolvedLinks, _i, links_1, link, target, resolvedTarget;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        links = this.findUnresolvedLinks(document, stylesheet);
                        resolvedLinks = [];
                        _i = 0, links_1 = links;
                        _a.label = 1;
                    case 1:
                        if (!(_i < links_1.length)) return [3 /*break*/, 5];
                        link = links_1[_i];
                        target = link.target;
                        if (!(target && !(/^\w+:\/\//g.test(target)))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.resolveRelativeReference(target, document.uri, documentContext)];
                    case 2:
                        resolvedTarget = _a.sent();
                        if (resolvedTarget !== undefined) {
                            link.target = resolvedTarget;
                            resolvedLinks.push(link);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        resolvedLinks.push(link);
                        _a.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 1];
                    case 5: return [2 /*return*/, resolvedLinks];
                }
            });
        });
    };
    CSSNavigation.prototype.findUnresolvedLinks = function (document, stylesheet) {
        var _this = this;
        var result = [];
        var collect = function (uriStringNode) {
            var rawUri = uriStringNode.getText();
            var range = getRange(uriStringNode, document);
            // Make sure the range is not empty
            if (range.start.line === range.end.line && range.start.character === range.end.character) {
                return;
            }
            if ((0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_5__.startsWith)(rawUri, "'") || (0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_5__.startsWith)(rawUri, "\"")) {
                rawUri = rawUri.slice(1, -1);
            }
            result.push({ target: rawUri, range: range });
        };
        stylesheet.accept(function (candidate) {
            if (candidate.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.URILiteral) {
                var first = candidate.getChild(0);
                if (first) {
                    collect(first);
                }
                return false;
            }
            /**
             * In @import, it is possible to include links that do not use `url()`
             * For example, `@import 'foo.css';`
             */
            if (candidate.parent && _this.isRawStringDocumentLinkNode(candidate.parent)) {
                var rawText = candidate.getText();
                if ((0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_5__.startsWith)(rawText, "'") || (0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_5__.startsWith)(rawText, "\"")) {
                    collect(candidate);
                }
                return false;
            }
            return true;
        });
        return result;
    };
    CSSNavigation.prototype.findDocumentSymbols = function (document, stylesheet) {
        var result = [];
        stylesheet.accept(function (node) {
            var entry = {
                name: null,
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class,
                location: null
            };
            var locationNode = node;
            if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.Selector) {
                entry.name = node.getText();
                locationNode = node.findAParent(_parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Ruleset, _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.ExtendsReference);
                if (locationNode) {
                    entry.location = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.Location.create(document.uri, getRange(locationNode, document));
                    result.push(entry);
                }
                return false;
            }
            else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.VariableDeclaration) {
                entry.name = node.getName();
                entry.kind = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable;
            }
            else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.MixinDeclaration) {
                entry.name = node.getName();
                entry.kind = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Method;
            }
            else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.FunctionDeclaration) {
                entry.name = node.getName();
                entry.kind = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Function;
            }
            else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.Keyframe) {
                entry.name = localize('literal.keyframes', "@keyframes {0}", node.getName());
            }
            else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.FontFace) {
                entry.name = localize('literal.fontface', "@font-face");
            }
            else if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.Media) {
                var mediaList = node.getChild(0);
                if (mediaList instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.Medialist) {
                    entry.name = '@media ' + mediaList.getText();
                    entry.kind = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Module;
                }
            }
            if (entry.name) {
                entry.location = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.Location.create(document.uri, getRange(locationNode, document));
                result.push(entry);
            }
            return true;
        });
        return result;
    };
    CSSNavigation.prototype.findDocumentColors = function (document, stylesheet) {
        var result = [];
        stylesheet.accept(function (node) {
            var colorInfo = getColorInformation(node, document);
            if (colorInfo) {
                result.push(colorInfo);
            }
            return true;
        });
        return result;
    };
    CSSNavigation.prototype.getColorPresentations = function (document, stylesheet, color, range) {
        var result = [];
        var red256 = Math.round(color.red * 255), green256 = Math.round(color.green * 255), blue256 = Math.round(color.blue * 255);
        var label;
        if (color.alpha === 1) {
            label = "rgb(" + red256 + ", " + green256 + ", " + blue256 + ")";
        }
        else {
            label = "rgba(" + red256 + ", " + green256 + ", " + blue256 + ", " + color.alpha + ")";
        }
        result.push({ label: label, textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(range, label) });
        if (color.alpha === 1) {
            label = "#" + toTwoDigitHex(red256) + toTwoDigitHex(green256) + toTwoDigitHex(blue256);
        }
        else {
            label = "#" + toTwoDigitHex(red256) + toTwoDigitHex(green256) + toTwoDigitHex(blue256) + toTwoDigitHex(Math.round(color.alpha * 255));
        }
        result.push({ label: label, textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(range, label) });
        var hsl = (0,_languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_4__.hslFromColor)(color);
        if (hsl.a === 1) {
            label = "hsl(" + hsl.h + ", " + Math.round(hsl.s * 100) + "%, " + Math.round(hsl.l * 100) + "%)";
        }
        else {
            label = "hsla(" + hsl.h + ", " + Math.round(hsl.s * 100) + "%, " + Math.round(hsl.l * 100) + "%, " + hsl.a + ")";
        }
        result.push({ label: label, textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(range, label) });
        return result;
    };
    CSSNavigation.prototype.doRename = function (document, position, newName, stylesheet) {
        var _a;
        var highlights = this.findDocumentHighlights(document, position, stylesheet);
        var edits = highlights.map(function (h) { return _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(h.range, newName); });
        return {
            changes: (_a = {}, _a[document.uri] = edits, _a)
        };
    };
    CSSNavigation.prototype.resolveRelativeReference = function (ref, documentUri, documentContext) {
        return __awaiter(this, void 0, void 0, function () {
            var moduleName, rootFolderUri, documentFolderUri, modulePath, pathWithinModule;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(ref[0] === '~' && ref[1] !== '/' && this.fileSystemProvider)) return [3 /*break*/, 3];
                        ref = ref.substring(1);
                        if (!(0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_5__.startsWith)(documentUri, 'file://')) return [3 /*break*/, 2];
                        moduleName = getModuleNameFromPath(ref);
                        rootFolderUri = documentContext.resolveReference('/', documentUri);
                        documentFolderUri = (0,_utils_resources_js__WEBPACK_IMPORTED_MODULE_6__.dirname)(documentUri);
                        return [4 /*yield*/, this.resolvePathToModule(moduleName, documentFolderUri, rootFolderUri)];
                    case 1:
                        modulePath = _a.sent();
                        if (modulePath) {
                            pathWithinModule = ref.substring(moduleName.length + 1);
                            return [2 /*return*/, (0,_utils_resources_js__WEBPACK_IMPORTED_MODULE_6__.joinPath)(modulePath, pathWithinModule)];
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/, documentContext.resolveReference(ref, documentUri)];
                    case 3: return [2 /*return*/, documentContext.resolveReference(ref, documentUri)];
                }
            });
        });
    };
    CSSNavigation.prototype.resolvePathToModule = function (_moduleName, documentFolderUri, rootFolderUri) {
        return __awaiter(this, void 0, void 0, function () {
            var packPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        packPath = (0,_utils_resources_js__WEBPACK_IMPORTED_MODULE_6__.joinPath)(documentFolderUri, 'node_modules', _moduleName, 'package.json');
                        return [4 /*yield*/, this.fileExists(packPath)];
                    case 1:
                        if (_a.sent()) {
                            return [2 /*return*/, (0,_utils_resources_js__WEBPACK_IMPORTED_MODULE_6__.dirname)(packPath)];
                        }
                        else if (rootFolderUri && documentFolderUri.startsWith(rootFolderUri) && (documentFolderUri.length !== rootFolderUri.length)) {
                            return [2 /*return*/, this.resolvePathToModule(_moduleName, (0,_utils_resources_js__WEBPACK_IMPORTED_MODULE_6__.dirname)(documentFolderUri), rootFolderUri)];
                        }
                        return [2 /*return*/, undefined];
                }
            });
        });
    };
    CSSNavigation.prototype.fileExists = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var stat, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.fileSystemProvider) {
                            return [2 /*return*/, false];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.fileSystemProvider.stat(uri)];
                    case 2:
                        stat = _a.sent();
                        if (stat.type === _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.FileType.Unknown && stat.size === -1) {
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/, true];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, false];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return CSSNavigation;
}());

function getColorInformation(node, document) {
    var color = (0,_languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_4__.getColorValue)(node);
    if (color) {
        var range = getRange(node, document);
        return { color: color, range: range };
    }
    return null;
}
function getRange(node, document) {
    return _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.Range.create(document.positionAt(node.offset), document.positionAt(node.end));
}
function getHighlightKind(node) {
    if (node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Selector) {
        return _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Write;
    }
    if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.Identifier) {
        if (node.parent && node.parent instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.Property) {
            if (node.isCustomProperty) {
                return _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Write;
            }
        }
    }
    if (node.parent) {
        switch (node.parent.type) {
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.FunctionDeclaration:
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.MixinDeclaration:
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Keyframe:
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.VariableDeclaration:
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.FunctionParameter:
                return _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Write;
        }
    }
    return _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Read;
}
function toTwoDigitHex(n) {
    var r = n.toString(16);
    return r.length !== 2 ? '0' + r : r;
}
function getModuleNameFromPath(path) {
    // If a scoped module (starts with @) then get up until second instance of '/', otherwise get until first instance of '/'
    if (path[0] === '@') {
        return path.substring(0, path.indexOf('/', path.indexOf('/') + 1));
    }
    return path.substring(0, path.indexOf('/'));
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssSelectionRange.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssSelectionRange.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getSelectionRanges": () => /* binding */ getSelectionRanges
/* harmony export */ });
/* harmony import */ var _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cssLanguageTypes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageTypes.js");
/* harmony import */ var _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



function getSelectionRanges(document, positions, stylesheet) {
    function getSelectionRange(position) {
        var applicableRanges = getApplicableRanges(position);
        var current = undefined;
        for (var index = applicableRanges.length - 1; index >= 0; index--) {
            current = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.SelectionRange.create(_cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.Range.create(document.positionAt(applicableRanges[index][0]), document.positionAt(applicableRanges[index][1])), current);
        }
        if (!current) {
            current = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.SelectionRange.create(_cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.Range.create(position, position));
        }
        return current;
    }
    return positions.map(getSelectionRange);
    function getApplicableRanges(position) {
        var offset = document.offsetAt(position);
        var currNode = stylesheet.findChildAtOffset(offset, true);
        if (!currNode) {
            return [];
        }
        var result = [];
        while (currNode) {
            if (currNode.parent &&
                currNode.offset === currNode.parent.offset &&
                currNode.end === currNode.parent.end) {
                currNode = currNode.parent;
                continue;
            }
            // The `{ }` part of `.a { }`
            if (currNode.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Declarations) {
                if (offset > currNode.offset && offset < currNode.end) {
                    // Return `{ }` and the range inside `{` and `}`
                    result.push([currNode.offset + 1, currNode.end - 1]);
                }
            }
            result.push([currNode.offset, currNode.end]);
            currNode = currNode.parent;
        }
        return result;
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssValidation.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssValidation.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSValidation": () => /* binding */ CSSValidation
/* harmony export */ });
/* harmony import */ var _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _lintRules_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lintRules.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lintRules.js");
/* harmony import */ var _lint_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lint.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lint.js");
/* harmony import */ var _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../cssLanguageTypes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageTypes.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/





var CSSValidation = /** @class */ (function () {
    function CSSValidation(cssDataManager) {
        this.cssDataManager = cssDataManager;
    }
    CSSValidation.prototype.configure = function (settings) {
        this.settings = settings;
    };
    CSSValidation.prototype.doValidation = function (document, stylesheet, settings) {
        if (settings === void 0) { settings = this.settings; }
        if (settings && settings.validate === false) {
            return [];
        }
        var entries = [];
        entries.push.apply(entries, _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.ParseErrorCollector.entries(stylesheet));
        entries.push.apply(entries, _lint_js__WEBPACK_IMPORTED_MODULE_2__.LintVisitor.entries(stylesheet, document, new _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.LintConfigurationSettings(settings && settings.lint), this.cssDataManager));
        var ruleIds = [];
        for (var r in _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules) {
            ruleIds.push(_lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules[r].id);
        }
        function toDiagnostic(marker) {
            var range = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_3__.Range.create(document.positionAt(marker.getOffset()), document.positionAt(marker.getOffset() + marker.getLength()));
            var source = document.languageId;
            return {
                code: marker.getRule().id,
                source: source,
                message: marker.getMessage(),
                severity: marker.getLevel() === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Level.Warning ? _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_3__.DiagnosticSeverity.Warning : _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_3__.DiagnosticSeverity.Error,
                range: range
            };
        }
        return entries.filter(function (entry) { return entry.getLevel() !== _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Level.Ignore; }).map(toDiagnostic);
    };
    return CSSValidation;
}());



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lessCompletion.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lessCompletion.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LESSCompletion": () => /* binding */ LESSCompletion
/* harmony export */ });
/* harmony import */ var _cssCompletion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssCompletion.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssCompletion.js");
/* harmony import */ var _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cssLanguageTypes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageTypes.js");
/* harmony import */ var _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../fillers/vscode-nls.js */ "./node_modules/monaco-editor/esm/vs/language/css/fillers/vscode-nls.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var localize = _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_2__.loadMessageBundle();
var LESSCompletion = /** @class */ (function (_super) {
    __extends(LESSCompletion, _super);
    function LESSCompletion(lsOptions, cssDataManager) {
        return _super.call(this, '@', lsOptions, cssDataManager) || this;
    }
    LESSCompletion.prototype.createFunctionProposals = function (proposals, existingNode, sortToEnd, result) {
        for (var _i = 0, proposals_1 = proposals; _i < proposals_1.length; _i++) {
            var p = proposals_1[_i];
            var item = {
                label: p.name,
                detail: p.example,
                documentation: p.description,
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_1__.TextEdit.replace(this.getCompletionRange(existingNode), p.name + '($0)'),
                insertTextFormat: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_1__.InsertTextFormat.Snippet,
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_1__.CompletionItemKind.Function
            };
            if (sortToEnd) {
                item.sortText = 'z';
            }
            result.items.push(item);
        }
        return result;
    };
    LESSCompletion.prototype.getTermProposals = function (entry, existingNode, result) {
        var functions = LESSCompletion.builtInProposals;
        if (entry) {
            functions = functions.filter(function (f) { return !f.type || !entry.restrictions || entry.restrictions.indexOf(f.type) !== -1; });
        }
        this.createFunctionProposals(functions, existingNode, true, result);
        return _super.prototype.getTermProposals.call(this, entry, existingNode, result);
    };
    LESSCompletion.prototype.getColorProposals = function (entry, existingNode, result) {
        this.createFunctionProposals(LESSCompletion.colorProposals, existingNode, false, result);
        return _super.prototype.getColorProposals.call(this, entry, existingNode, result);
    };
    LESSCompletion.prototype.getCompletionsForDeclarationProperty = function (declaration, result) {
        this.getCompletionsForSelector(null, true, result);
        return _super.prototype.getCompletionsForDeclarationProperty.call(this, declaration, result);
    };
    LESSCompletion.builtInProposals = [
        // Boolean functions
        {
            'name': 'if',
            'example': 'if(condition, trueValue [, falseValue]);',
            'description': localize('less.builtin.if', 'returns one of two values depending on a condition.')
        },
        {
            'name': 'boolean',
            'example': 'boolean(condition);',
            'description': localize('less.builtin.boolean', '"store" a boolean test for later evaluation in a guard or if().')
        },
        // List functions
        {
            'name': 'length',
            'example': 'length(@list);',
            'description': localize('less.builtin.length', 'returns the number of elements in a value list')
        },
        {
            'name': 'extract',
            'example': 'extract(@list, index);',
            'description': localize('less.builtin.extract', 'returns a value at the specified position in the list')
        },
        {
            'name': 'range',
            'example': 'range([start, ] end [, step]);',
            'description': localize('less.builtin.range', 'generate a list spanning a range of values')
        },
        {
            'name': 'each',
            'example': 'each(@list, ruleset);',
            'description': localize('less.builtin.each', 'bind the evaluation of a ruleset to each member of a list.')
        },
        // Other built-ins
        {
            'name': 'escape',
            'example': 'escape(@string);',
            'description': localize('less.builtin.escape', 'URL encodes a string')
        },
        {
            'name': 'e',
            'example': 'e(@string);',
            'description': localize('less.builtin.e', 'escape string content')
        },
        {
            'name': 'replace',
            'example': 'replace(@string, @pattern, @replacement[, @flags]);',
            'description': localize('less.builtin.replace', 'string replace')
        },
        {
            'name': 'unit',
            'example': 'unit(@dimension, [@unit: \'\']);',
            'description': localize('less.builtin.unit', 'remove or change the unit of a dimension')
        },
        {
            'name': 'color',
            'example': 'color(@string);',
            'description': localize('less.builtin.color', 'parses a string to a color'),
            'type': 'color'
        },
        {
            'name': 'convert',
            'example': 'convert(@value, unit);',
            'description': localize('less.builtin.convert', 'converts numbers from one type into another')
        },
        {
            'name': 'data-uri',
            'example': 'data-uri([mimetype,] url);',
            'description': localize('less.builtin.data-uri', 'inlines a resource and falls back to `url()`'),
            'type': 'url'
        },
        {
            'name': 'abs',
            'description': localize('less.builtin.abs', 'absolute value of a number'),
            'example': 'abs(number);'
        },
        {
            'name': 'acos',
            'description': localize('less.builtin.acos', 'arccosine - inverse of cosine function'),
            'example': 'acos(number);'
        },
        {
            'name': 'asin',
            'description': localize('less.builtin.asin', 'arcsine - inverse of sine function'),
            'example': 'asin(number);'
        },
        {
            'name': 'ceil',
            'example': 'ceil(@number);',
            'description': localize('less.builtin.ceil', 'rounds up to an integer')
        },
        {
            'name': 'cos',
            'description': localize('less.builtin.cos', 'cosine function'),
            'example': 'cos(number);'
        },
        {
            'name': 'floor',
            'description': localize('less.builtin.floor', 'rounds down to an integer'),
            'example': 'floor(@number);'
        },
        {
            'name': 'percentage',
            'description': localize('less.builtin.percentage', 'converts to a %, e.g. 0.5 > 50%'),
            'example': 'percentage(@number);',
            'type': 'percentage'
        },
        {
            'name': 'round',
            'description': localize('less.builtin.round', 'rounds a number to a number of places'),
            'example': 'round(number, [places: 0]);'
        },
        {
            'name': 'sqrt',
            'description': localize('less.builtin.sqrt', 'calculates square root of a number'),
            'example': 'sqrt(number);'
        },
        {
            'name': 'sin',
            'description': localize('less.builtin.sin', 'sine function'),
            'example': 'sin(number);'
        },
        {
            'name': 'tan',
            'description': localize('less.builtin.tan', 'tangent function'),
            'example': 'tan(number);'
        },
        {
            'name': 'atan',
            'description': localize('less.builtin.atan', 'arctangent - inverse of tangent function'),
            'example': 'atan(number);'
        },
        {
            'name': 'pi',
            'description': localize('less.builtin.pi', 'returns pi'),
            'example': 'pi();'
        },
        {
            'name': 'pow',
            'description': localize('less.builtin.pow', 'first argument raised to the power of the second argument'),
            'example': 'pow(@base, @exponent);'
        },
        {
            'name': 'mod',
            'description': localize('less.builtin.mod', 'first argument modulus second argument'),
            'example': 'mod(number, number);'
        },
        {
            'name': 'min',
            'description': localize('less.builtin.min', 'returns the lowest of one or more values'),
            'example': 'min(@x, @y);'
        },
        {
            'name': 'max',
            'description': localize('less.builtin.max', 'returns the lowest of one or more values'),
            'example': 'max(@x, @y);'
        }
    ];
    LESSCompletion.colorProposals = [
        {
            'name': 'argb',
            'example': 'argb(@color);',
            'description': localize('less.builtin.argb', 'creates a #AARRGGBB')
        },
        {
            'name': 'hsl',
            'example': 'hsl(@hue, @saturation, @lightness);',
            'description': localize('less.builtin.hsl', 'creates a color')
        },
        {
            'name': 'hsla',
            'example': 'hsla(@hue, @saturation, @lightness, @alpha);',
            'description': localize('less.builtin.hsla', 'creates a color')
        },
        {
            'name': 'hsv',
            'example': 'hsv(@hue, @saturation, @value);',
            'description': localize('less.builtin.hsv', 'creates a color')
        },
        {
            'name': 'hsva',
            'example': 'hsva(@hue, @saturation, @value, @alpha);',
            'description': localize('less.builtin.hsva', 'creates a color')
        },
        {
            'name': 'hue',
            'example': 'hue(@color);',
            'description': localize('less.builtin.hue', 'returns the `hue` channel of `@color` in the HSL space')
        },
        {
            'name': 'saturation',
            'example': 'saturation(@color);',
            'description': localize('less.builtin.saturation', 'returns the `saturation` channel of `@color` in the HSL space')
        },
        {
            'name': 'lightness',
            'example': 'lightness(@color);',
            'description': localize('less.builtin.lightness', 'returns the `lightness` channel of `@color` in the HSL space')
        },
        {
            'name': 'hsvhue',
            'example': 'hsvhue(@color);',
            'description': localize('less.builtin.hsvhue', 'returns the `hue` channel of `@color` in the HSV space')
        },
        {
            'name': 'hsvsaturation',
            'example': 'hsvsaturation(@color);',
            'description': localize('less.builtin.hsvsaturation', 'returns the `saturation` channel of `@color` in the HSV space')
        },
        {
            'name': 'hsvvalue',
            'example': 'hsvvalue(@color);',
            'description': localize('less.builtin.hsvvalue', 'returns the `value` channel of `@color` in the HSV space')
        },
        {
            'name': 'red',
            'example': 'red(@color);',
            'description': localize('less.builtin.red', 'returns the `red` channel of `@color`')
        },
        {
            'name': 'green',
            'example': 'green(@color);',
            'description': localize('less.builtin.green', 'returns the `green` channel of `@color`')
        },
        {
            'name': 'blue',
            'example': 'blue(@color);',
            'description': localize('less.builtin.blue', 'returns the `blue` channel of `@color`')
        },
        {
            'name': 'alpha',
            'example': 'alpha(@color);',
            'description': localize('less.builtin.alpha', 'returns the `alpha` channel of `@color`')
        },
        {
            'name': 'luma',
            'example': 'luma(@color);',
            'description': localize('less.builtin.luma', 'returns the `luma` value (perceptual brightness) of `@color`')
        },
        {
            'name': 'saturate',
            'example': 'saturate(@color, 10%);',
            'description': localize('less.builtin.saturate', 'return `@color` 10% points more saturated')
        },
        {
            'name': 'desaturate',
            'example': 'desaturate(@color, 10%);',
            'description': localize('less.builtin.desaturate', 'return `@color` 10% points less saturated')
        },
        {
            'name': 'lighten',
            'example': 'lighten(@color, 10%);',
            'description': localize('less.builtin.lighten', 'return `@color` 10% points lighter')
        },
        {
            'name': 'darken',
            'example': 'darken(@color, 10%);',
            'description': localize('less.builtin.darken', 'return `@color` 10% points darker')
        },
        {
            'name': 'fadein',
            'example': 'fadein(@color, 10%);',
            'description': localize('less.builtin.fadein', 'return `@color` 10% points less transparent')
        },
        {
            'name': 'fadeout',
            'example': 'fadeout(@color, 10%);',
            'description': localize('less.builtin.fadeout', 'return `@color` 10% points more transparent')
        },
        {
            'name': 'fade',
            'example': 'fade(@color, 50%);',
            'description': localize('less.builtin.fade', 'return `@color` with 50% transparency')
        },
        {
            'name': 'spin',
            'example': 'spin(@color, 10);',
            'description': localize('less.builtin.spin', 'return `@color` with a 10 degree larger in hue')
        },
        {
            'name': 'mix',
            'example': 'mix(@color1, @color2, [@weight: 50%]);',
            'description': localize('less.builtin.mix', 'return a mix of `@color1` and `@color2`')
        },
        {
            'name': 'greyscale',
            'example': 'greyscale(@color);',
            'description': localize('less.builtin.greyscale', 'returns a grey, 100% desaturated color'),
        },
        {
            'name': 'contrast',
            'example': 'contrast(@color1, [@darkcolor: black], [@lightcolor: white], [@threshold: 43%]);',
            'description': localize('less.builtin.contrast', 'return `@darkcolor` if `@color1 is> 43% luma` otherwise return `@lightcolor`, see notes')
        },
        {
            'name': 'multiply',
            'example': 'multiply(@color1, @color2);'
        },
        {
            'name': 'screen',
            'example': 'screen(@color1, @color2);'
        },
        {
            'name': 'overlay',
            'example': 'overlay(@color1, @color2);'
        },
        {
            'name': 'softlight',
            'example': 'softlight(@color1, @color2);'
        },
        {
            'name': 'hardlight',
            'example': 'hardlight(@color1, @color2);'
        },
        {
            'name': 'difference',
            'example': 'difference(@color1, @color2);'
        },
        {
            'name': 'exclusion',
            'example': 'exclusion(@color1, @color2);'
        },
        {
            'name': 'average',
            'example': 'average(@color1, @color2);'
        },
        {
            'name': 'negation',
            'example': 'negation(@color1, @color2);'
        }
    ];
    return LESSCompletion;
}(_cssCompletion_js__WEBPACK_IMPORTED_MODULE_0__.CSSCompletion));



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lint.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lint.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LintVisitor": () => /* binding */ LintVisitor
/* harmony export */ });
/* harmony import */ var _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../languageFacts/facts.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/facts.js");
/* harmony import */ var _lintRules_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lintRules.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lintRules.js");
/* harmony import */ var _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _lintUtil_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lintUtil.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lintUtil.js");
/* harmony import */ var _utils_arrays_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/arrays.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/arrays.js");
/* harmony import */ var _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../fillers/vscode-nls.js */ "./node_modules/monaco-editor/esm/vs/language/css/fillers/vscode-nls.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/







var localize = _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_5__.loadMessageBundle();
var NodesByRootMap = /** @class */ (function () {
    function NodesByRootMap() {
        this.data = {};
    }
    NodesByRootMap.prototype.add = function (root, name, node) {
        var entry = this.data[root];
        if (!entry) {
            entry = { nodes: [], names: [] };
            this.data[root] = entry;
        }
        entry.names.push(name);
        if (node) {
            entry.nodes.push(node);
        }
    };
    return NodesByRootMap;
}());
var LintVisitor = /** @class */ (function () {
    function LintVisitor(document, settings, cssDataManager) {
        var _this = this;
        this.cssDataManager = cssDataManager;
        this.warnings = [];
        this.settings = settings;
        this.documentText = document.getText();
        this.keyframes = new NodesByRootMap();
        this.validProperties = {};
        var properties = settings.getSetting(_lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Settings.ValidProperties);
        if (Array.isArray(properties)) {
            properties.forEach(function (p) {
                if (typeof p === 'string') {
                    var name = p.trim().toLowerCase();
                    if (name.length) {
                        _this.validProperties[name] = true;
                    }
                }
            });
        }
    }
    LintVisitor.entries = function (node, document, settings, cssDataManager, entryFilter) {
        var visitor = new LintVisitor(document, settings, cssDataManager);
        node.acceptVisitor(visitor);
        visitor.completeValidations();
        return visitor.getEntries(entryFilter);
    };
    LintVisitor.prototype.isValidPropertyDeclaration = function (element) {
        var propertyName = element.fullPropertyName;
        return this.validProperties[propertyName];
    };
    LintVisitor.prototype.fetch = function (input, s) {
        var elements = [];
        for (var _i = 0, input_1 = input; _i < input_1.length; _i++) {
            var curr = input_1[_i];
            if (curr.fullPropertyName === s) {
                elements.push(curr);
            }
        }
        return elements;
    };
    LintVisitor.prototype.fetchWithValue = function (input, s, v) {
        var elements = [];
        for (var _i = 0, input_2 = input; _i < input_2.length; _i++) {
            var inputElement = input_2[_i];
            if (inputElement.fullPropertyName === s) {
                var expression = inputElement.node.getValue();
                if (expression && this.findValueInExpression(expression, v)) {
                    elements.push(inputElement);
                }
            }
        }
        return elements;
    };
    LintVisitor.prototype.findValueInExpression = function (expression, v) {
        var found = false;
        expression.accept(function (node) {
            if (node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Identifier && node.matches(v)) {
                found = true;
            }
            return !found;
        });
        return found;
    };
    LintVisitor.prototype.getEntries = function (filter) {
        if (filter === void 0) { filter = (_parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.Level.Warning | _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.Level.Error); }
        return this.warnings.filter(function (entry) {
            return (entry.getLevel() & filter) !== 0;
        });
    };
    LintVisitor.prototype.addEntry = function (node, rule, details) {
        var entry = new _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.Marker(node, rule, this.settings.getRule(rule), details);
        this.warnings.push(entry);
    };
    LintVisitor.prototype.getMissingNames = function (expected, actual) {
        var expectedClone = expected.slice(0); // clone
        for (var i = 0; i < actual.length; i++) {
            var k = expectedClone.indexOf(actual[i]);
            if (k !== -1) {
                expectedClone[k] = null;
            }
        }
        var result = null;
        for (var i = 0; i < expectedClone.length; i++) {
            var curr = expectedClone[i];
            if (curr) {
                if (result === null) {
                    result = localize('namelist.single', "'{0}'", curr);
                }
                else {
                    result = localize('namelist.concatenated', "{0}, '{1}'", result, curr);
                }
            }
        }
        return result;
    };
    LintVisitor.prototype.visitNode = function (node) {
        switch (node.type) {
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.UnknownAtRule:
                return this.visitUnknownAtRule(node);
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Keyframe:
                return this.visitKeyframe(node);
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.FontFace:
                return this.visitFontFace(node);
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Ruleset:
                return this.visitRuleSet(node);
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.SimpleSelector:
                return this.visitSimpleSelector(node);
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Function:
                return this.visitFunction(node);
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.NumericValue:
                return this.visitNumericValue(node);
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Import:
                return this.visitImport(node);
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.HexColorValue:
                return this.visitHexColorValue(node);
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Prio:
                return this.visitPrio(node);
        }
        return true;
    };
    LintVisitor.prototype.completeValidations = function () {
        this.validateKeyframes();
    };
    LintVisitor.prototype.visitUnknownAtRule = function (node) {
        var atRuleName = node.getChild(0);
        if (!atRuleName) {
            return false;
        }
        var atDirective = this.cssDataManager.getAtDirective(atRuleName.getText());
        if (atDirective) {
            return false;
        }
        this.addEntry(atRuleName, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.UnknownAtRules, "Unknown at rule " + atRuleName.getText());
        return true;
    };
    LintVisitor.prototype.visitKeyframe = function (node) {
        var keyword = node.getKeyword();
        if (!keyword) {
            return false;
        }
        var text = keyword.getText();
        this.keyframes.add(node.getName(), text, (text !== '@keyframes') ? keyword : null);
        return true;
    };
    LintVisitor.prototype.validateKeyframes = function () {
        // @keyframe and it's vendor specific alternatives
        // @keyframe should be included
        var expected = ['@-webkit-keyframes', '@-moz-keyframes', '@-o-keyframes'];
        for (var name in this.keyframes.data) {
            var actual = this.keyframes.data[name].names;
            var needsStandard = (actual.indexOf('@keyframes') === -1);
            if (!needsStandard && actual.length === 1) {
                continue; // only the non-vendor specific keyword is used, that's fine, no warning
            }
            var missingVendorSpecific = this.getMissingNames(expected, actual);
            if (missingVendorSpecific || needsStandard) {
                for (var _i = 0, _a = this.keyframes.data[name].nodes; _i < _a.length; _i++) {
                    var node = _a[_i];
                    if (needsStandard) {
                        var message = localize('keyframes.standardrule.missing', "Always define standard rule '@keyframes' when defining keyframes.");
                        this.addEntry(node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.IncludeStandardPropertyWhenUsingVendorPrefix, message);
                    }
                    if (missingVendorSpecific) {
                        var message = localize('keyframes.vendorspecific.missing', "Always include all vendor specific rules: Missing: {0}", missingVendorSpecific);
                        this.addEntry(node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.AllVendorPrefixes, message);
                    }
                }
            }
        }
        return true;
    };
    LintVisitor.prototype.visitSimpleSelector = function (node) {
        var firstChar = this.documentText.charAt(node.offset);
        /////////////////////////////////////////////////////////////
        //	Lint - The universal selector (*) is known to be slow.
        /////////////////////////////////////////////////////////////
        if (node.length === 1 && firstChar === '*') {
            this.addEntry(node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.UniversalSelector);
        }
        /////////////////////////////////////////////////////////////
        //	Lint - Avoid id selectors
        /////////////////////////////////////////////////////////////
        if (firstChar === '#') {
            this.addEntry(node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.AvoidIdSelector);
        }
        return true;
    };
    LintVisitor.prototype.visitImport = function (node) {
        /////////////////////////////////////////////////////////////
        //	Lint - Import statements shouldn't be used, because they aren't offering parallel downloads.
        /////////////////////////////////////////////////////////////
        this.addEntry(node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.ImportStatemement);
        return true;
    };
    LintVisitor.prototype.visitRuleSet = function (node) {
        /////////////////////////////////////////////////////////////
        //	Lint - Don't use empty rulesets.
        /////////////////////////////////////////////////////////////
        var declarations = node.getDeclarations();
        if (!declarations) {
            // syntax error
            return false;
        }
        if (!declarations.hasChildren()) {
            this.addEntry(node.getSelectors(), _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.EmptyRuleSet);
        }
        var propertyTable = [];
        for (var _i = 0, _a = declarations.getChildren(); _i < _a.length; _i++) {
            var element = _a[_i];
            if (element instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.Declaration) {
                propertyTable.push(new _lintUtil_js__WEBPACK_IMPORTED_MODULE_3__.Element(element));
            }
        }
        /////////////////////////////////////////////////////////////
        // the rule warns when it finds:
        // width being used with border, border-left, border-right, padding, padding-left, or padding-right
        // height being used with border, border-top, border-bottom, padding, padding-top, or padding-bottom
        // No error when box-sizing property is specified, as it assumes the user knows what he's doing.
        // see https://github.com/CSSLint/csslint/wiki/Beware-of-box-model-size
        /////////////////////////////////////////////////////////////
        var boxModel = (0,_lintUtil_js__WEBPACK_IMPORTED_MODULE_3__.default)(propertyTable);
        if (boxModel.width) {
            var properties = [];
            if (boxModel.right.value) {
                properties = (0,_utils_arrays_js__WEBPACK_IMPORTED_MODULE_4__.union)(properties, boxModel.right.properties);
            }
            if (boxModel.left.value) {
                properties = (0,_utils_arrays_js__WEBPACK_IMPORTED_MODULE_4__.union)(properties, boxModel.left.properties);
            }
            if (properties.length !== 0) {
                for (var _b = 0, properties_1 = properties; _b < properties_1.length; _b++) {
                    var item = properties_1[_b];
                    this.addEntry(item.node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.BewareOfBoxModelSize);
                }
                this.addEntry(boxModel.width.node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.BewareOfBoxModelSize);
            }
        }
        if (boxModel.height) {
            var properties = [];
            if (boxModel.top.value) {
                properties = (0,_utils_arrays_js__WEBPACK_IMPORTED_MODULE_4__.union)(properties, boxModel.top.properties);
            }
            if (boxModel.bottom.value) {
                properties = (0,_utils_arrays_js__WEBPACK_IMPORTED_MODULE_4__.union)(properties, boxModel.bottom.properties);
            }
            if (properties.length !== 0) {
                for (var _c = 0, properties_2 = properties; _c < properties_2.length; _c++) {
                    var item = properties_2[_c];
                    this.addEntry(item.node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.BewareOfBoxModelSize);
                }
                this.addEntry(boxModel.height.node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.BewareOfBoxModelSize);
            }
        }
        /////////////////////////////////////////////////////////////
        //	Properties ignored due to display
        /////////////////////////////////////////////////////////////
        // With 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect
        var displayElems = this.fetchWithValue(propertyTable, 'display', 'inline');
        if (displayElems.length > 0) {
            for (var _d = 0, _e = ['width', 'height', 'margin-top', 'margin-bottom', 'float']; _d < _e.length; _d++) {
                var prop = _e[_d];
                var elem = this.fetch(propertyTable, prop);
                for (var index = 0; index < elem.length; index++) {
                    var node_1 = elem[index].node;
                    var value = node_1.getValue();
                    if (prop === 'float' && (!value || value.matches('none'))) {
                        continue;
                    }
                    this.addEntry(node_1, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.PropertyIgnoredDueToDisplay, localize('rule.propertyIgnoredDueToDisplayInline', "Property is ignored due to the display. With 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect."));
                }
            }
        }
        // With 'display: inline-block', 'float' has no effect
        displayElems = this.fetchWithValue(propertyTable, 'display', 'inline-block');
        if (displayElems.length > 0) {
            var elem = this.fetch(propertyTable, 'float');
            for (var index = 0; index < elem.length; index++) {
                var node_2 = elem[index].node;
                var value = node_2.getValue();
                if (value && !value.matches('none')) {
                    this.addEntry(node_2, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.PropertyIgnoredDueToDisplay, localize('rule.propertyIgnoredDueToDisplayInlineBlock', "inline-block is ignored due to the float. If 'float' has a value other than 'none', the box is floated and 'display' is treated as 'block'"));
                }
            }
        }
        // With 'display: block', 'vertical-align' has no effect
        displayElems = this.fetchWithValue(propertyTable, 'display', 'block');
        if (displayElems.length > 0) {
            var elem = this.fetch(propertyTable, 'vertical-align');
            for (var index = 0; index < elem.length; index++) {
                this.addEntry(elem[index].node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.PropertyIgnoredDueToDisplay, localize('rule.propertyIgnoredDueToDisplayBlock', "Property is ignored due to the display. With 'display: block', vertical-align should not be used."));
            }
        }
        /////////////////////////////////////////////////////////////
        //	Avoid 'float'
        /////////////////////////////////////////////////////////////
        var elements = this.fetch(propertyTable, 'float');
        for (var index = 0; index < elements.length; index++) {
            var element = elements[index];
            if (!this.isValidPropertyDeclaration(element)) {
                this.addEntry(element.node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.AvoidFloat);
            }
        }
        /////////////////////////////////////////////////////////////
        //	Don't use duplicate declarations.
        /////////////////////////////////////////////////////////////
        for (var i = 0; i < propertyTable.length; i++) {
            var element = propertyTable[i];
            if (element.fullPropertyName !== 'background' && !this.validProperties[element.fullPropertyName]) {
                var value = element.node.getValue();
                if (value && this.documentText.charAt(value.offset) !== '-') {
                    var elements_1 = this.fetch(propertyTable, element.fullPropertyName);
                    if (elements_1.length > 1) {
                        for (var k = 0; k < elements_1.length; k++) {
                            var value_1 = elements_1[k].node.getValue();
                            if (value_1 && this.documentText.charAt(value_1.offset) !== '-' && elements_1[k] !== element) {
                                this.addEntry(element.node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.DuplicateDeclarations);
                            }
                        }
                    }
                }
            }
        }
        /////////////////////////////////////////////////////////////
        //	Unknown propery & When using a vendor-prefixed gradient, make sure to use them all.
        /////////////////////////////////////////////////////////////
        var isExportBlock = node.getSelectors().matches(":export");
        if (!isExportBlock) {
            var propertiesBySuffix = new NodesByRootMap();
            var containsUnknowns = false;
            for (var _f = 0, propertyTable_1 = propertyTable; _f < propertyTable_1.length; _f++) {
                var element = propertyTable_1[_f];
                var decl = element.node;
                if (this.isCSSDeclaration(decl)) {
                    var name = element.fullPropertyName;
                    var firstChar = name.charAt(0);
                    if (firstChar === '-') {
                        if (name.charAt(1) !== '-') { // avoid css variables
                            if (!this.cssDataManager.isKnownProperty(name) && !this.validProperties[name]) {
                                this.addEntry(decl.getProperty(), _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.UnknownVendorSpecificProperty);
                            }
                            var nonPrefixedName = decl.getNonPrefixedPropertyName();
                            propertiesBySuffix.add(nonPrefixedName, name, decl.getProperty());
                        }
                    }
                    else {
                        var fullName = name;
                        if (firstChar === '*' || firstChar === '_') {
                            this.addEntry(decl.getProperty(), _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.IEStarHack);
                            name = name.substr(1);
                        }
                        // _property and *property might be contributed via custom data
                        if (!this.cssDataManager.isKnownProperty(fullName) && !this.cssDataManager.isKnownProperty(name)) {
                            if (!this.validProperties[name]) {
                                this.addEntry(decl.getProperty(), _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.UnknownProperty, localize('property.unknownproperty.detailed', "Unknown property: '{0}'", decl.getFullPropertyName()));
                            }
                        }
                        propertiesBySuffix.add(name, name, null); // don't pass the node as we don't show errors on the standard
                    }
                }
                else {
                    containsUnknowns = true;
                }
            }
            if (!containsUnknowns) { // don't perform this test if there are
                for (var suffix in propertiesBySuffix.data) {
                    var entry = propertiesBySuffix.data[suffix];
                    var actual = entry.names;
                    var needsStandard = this.cssDataManager.isStandardProperty(suffix) && (actual.indexOf(suffix) === -1);
                    if (!needsStandard && actual.length === 1) {
                        continue; // only the non-vendor specific rule is used, that's fine, no warning
                    }
                    var expected = [];
                    for (var i = 0, len = LintVisitor.prefixes.length; i < len; i++) {
                        var prefix = LintVisitor.prefixes[i];
                        if (this.cssDataManager.isStandardProperty(prefix + suffix)) {
                            expected.push(prefix + suffix);
                        }
                    }
                    var missingVendorSpecific = this.getMissingNames(expected, actual);
                    if (missingVendorSpecific || needsStandard) {
                        for (var _g = 0, _h = entry.nodes; _g < _h.length; _g++) {
                            var node_3 = _h[_g];
                            if (needsStandard) {
                                var message = localize('property.standard.missing', "Also define the standard property '{0}' for compatibility", suffix);
                                this.addEntry(node_3, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.IncludeStandardPropertyWhenUsingVendorPrefix, message);
                            }
                            if (missingVendorSpecific) {
                                var message = localize('property.vendorspecific.missing', "Always include all vendor specific properties: Missing: {0}", missingVendorSpecific);
                                this.addEntry(node_3, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.AllVendorPrefixes, message);
                            }
                        }
                    }
                }
            }
        }
        return true;
    };
    LintVisitor.prototype.visitPrio = function (node) {
        /////////////////////////////////////////////////////////////
        //	Don't use !important
        /////////////////////////////////////////////////////////////
        this.addEntry(node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.AvoidImportant);
        return true;
    };
    LintVisitor.prototype.visitNumericValue = function (node) {
        /////////////////////////////////////////////////////////////
        //	0 has no following unit
        /////////////////////////////////////////////////////////////
        var funcDecl = node.findParent(_parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Function);
        if (funcDecl && funcDecl.getName() === 'calc') {
            return true;
        }
        var decl = node.findParent(_parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.NodeType.Declaration);
        if (decl) {
            var declValue = decl.getValue();
            if (declValue) {
                var value = node.getValue();
                if (!value.unit || _languageFacts_facts_js__WEBPACK_IMPORTED_MODULE_0__.units.length.indexOf(value.unit.toLowerCase()) === -1) {
                    return true;
                }
                if (parseFloat(value.value) === 0.0 && !!value.unit && !this.validProperties[decl.getFullPropertyName()]) {
                    this.addEntry(node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.ZeroWithUnit);
                }
            }
        }
        return true;
    };
    LintVisitor.prototype.visitFontFace = function (node) {
        var declarations = node.getDeclarations();
        if (!declarations) {
            // syntax error
            return false;
        }
        var definesSrc = false, definesFontFamily = false;
        var containsUnknowns = false;
        for (var _i = 0, _a = declarations.getChildren(); _i < _a.length; _i++) {
            var node_4 = _a[_i];
            if (this.isCSSDeclaration(node_4)) {
                var name = node_4.getProperty().getName().toLowerCase();
                if (name === 'src') {
                    definesSrc = true;
                }
                if (name === 'font-family') {
                    definesFontFamily = true;
                }
            }
            else {
                containsUnknowns = true;
            }
        }
        if (!containsUnknowns && (!definesSrc || !definesFontFamily)) {
            this.addEntry(node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.RequiredPropertiesForFontFace);
        }
        return true;
    };
    LintVisitor.prototype.isCSSDeclaration = function (node) {
        if (node instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.Declaration) {
            if (!node.getValue()) {
                return false;
            }
            var property = node.getProperty();
            if (!property) {
                return false;
            }
            var identifier = property.getIdentifier();
            if (!identifier || identifier.containsInterpolation()) {
                return false;
            }
            return true;
        }
        return false;
    };
    LintVisitor.prototype.visitHexColorValue = function (node) {
        // Rule: #eeff0011 or #eeff00 or #ef01 or #ef0
        var length = node.length;
        if (length !== 9 && length !== 7 && length !== 5 && length !== 4) {
            this.addEntry(node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.HexColorLength);
        }
        return false;
    };
    LintVisitor.prototype.visitFunction = function (node) {
        var fnName = node.getName().toLowerCase();
        var expectedAttrCount = -1;
        var actualAttrCount = 0;
        switch (fnName) {
            case 'rgb(':
            case 'hsl(':
                expectedAttrCount = 3;
                break;
            case 'rgba(':
            case 'hsla(':
                expectedAttrCount = 4;
                break;
        }
        if (expectedAttrCount !== -1) {
            node.getArguments().accept(function (n) {
                if (n instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_2__.BinaryExpression) {
                    actualAttrCount += 1;
                    return false;
                }
                return true;
            });
            if (actualAttrCount !== expectedAttrCount) {
                this.addEntry(node, _lintRules_js__WEBPACK_IMPORTED_MODULE_1__.Rules.ArgsInColorFunction);
            }
        }
        return true;
    };
    LintVisitor.prefixes = [
        '-ms-', '-moz-', '-o-', '-webkit-',
    ];
    return LintVisitor;
}());



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lintRules.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lintRules.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Rule": () => /* binding */ Rule,
/* harmony export */   "Setting": () => /* binding */ Setting,
/* harmony export */   "Rules": () => /* binding */ Rules,
/* harmony export */   "Settings": () => /* binding */ Settings,
/* harmony export */   "LintConfigurationSettings": () => /* binding */ LintConfigurationSettings
/* harmony export */ });
/* harmony import */ var _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../fillers/vscode-nls.js */ "./node_modules/monaco-editor/esm/vs/language/css/fillers/vscode-nls.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



var localize = _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_1__.loadMessageBundle();
var Warning = _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Level.Warning;
var Error = _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Level.Error;
var Ignore = _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Level.Ignore;
var Rule = /** @class */ (function () {
    function Rule(id, message, defaultValue) {
        this.id = id;
        this.message = message;
        this.defaultValue = defaultValue;
        // nothing to do
    }
    return Rule;
}());

var Setting = /** @class */ (function () {
    function Setting(id, message, defaultValue) {
        this.id = id;
        this.message = message;
        this.defaultValue = defaultValue;
        // nothing to do
    }
    return Setting;
}());

var Rules = {
    AllVendorPrefixes: new Rule('compatibleVendorPrefixes', localize('rule.vendorprefixes.all', "When using a vendor-specific prefix make sure to also include all other vendor-specific properties"), Ignore),
    IncludeStandardPropertyWhenUsingVendorPrefix: new Rule('vendorPrefix', localize('rule.standardvendorprefix.all', "When using a vendor-specific prefix also include the standard property"), Warning),
    DuplicateDeclarations: new Rule('duplicateProperties', localize('rule.duplicateDeclarations', "Do not use duplicate style definitions"), Ignore),
    EmptyRuleSet: new Rule('emptyRules', localize('rule.emptyRuleSets', "Do not use empty rulesets"), Warning),
    ImportStatemement: new Rule('importStatement', localize('rule.importDirective', "Import statements do not load in parallel"), Ignore),
    BewareOfBoxModelSize: new Rule('boxModel', localize('rule.bewareOfBoxModelSize', "Do not use width or height when using padding or border"), Ignore),
    UniversalSelector: new Rule('universalSelector', localize('rule.universalSelector', "The universal selector (*) is known to be slow"), Ignore),
    ZeroWithUnit: new Rule('zeroUnits', localize('rule.zeroWidthUnit', "No unit for zero needed"), Ignore),
    RequiredPropertiesForFontFace: new Rule('fontFaceProperties', localize('rule.fontFaceProperties', "@font-face rule must define 'src' and 'font-family' properties"), Warning),
    HexColorLength: new Rule('hexColorLength', localize('rule.hexColor', "Hex colors must consist of three, four, six or eight hex numbers"), Error),
    ArgsInColorFunction: new Rule('argumentsInColorFunction', localize('rule.colorFunction', "Invalid number of parameters"), Error),
    UnknownProperty: new Rule('unknownProperties', localize('rule.unknownProperty', "Unknown property."), Warning),
    UnknownAtRules: new Rule('unknownAtRules', localize('rule.unknownAtRules', "Unknown at-rule."), Warning),
    IEStarHack: new Rule('ieHack', localize('rule.ieHack', "IE hacks are only necessary when supporting IE7 and older"), Ignore),
    UnknownVendorSpecificProperty: new Rule('unknownVendorSpecificProperties', localize('rule.unknownVendorSpecificProperty', "Unknown vendor specific property."), Ignore),
    PropertyIgnoredDueToDisplay: new Rule('propertyIgnoredDueToDisplay', localize('rule.propertyIgnoredDueToDisplay', "Property is ignored due to the display."), Warning),
    AvoidImportant: new Rule('important', localize('rule.avoidImportant', "Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored."), Ignore),
    AvoidFloat: new Rule('float', localize('rule.avoidFloat', "Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes."), Ignore),
    AvoidIdSelector: new Rule('idSelector', localize('rule.avoidIdSelector', "Selectors should not contain IDs because these rules are too tightly coupled with the HTML."), Ignore),
};
var Settings = {
    ValidProperties: new Setting('validProperties', localize('rule.validProperties', "A list of properties that are not validated against the `unknownProperties` rule."), [])
};
var LintConfigurationSettings = /** @class */ (function () {
    function LintConfigurationSettings(conf) {
        if (conf === void 0) { conf = {}; }
        this.conf = conf;
    }
    LintConfigurationSettings.prototype.getRule = function (rule) {
        if (this.conf.hasOwnProperty(rule.id)) {
            var level = toLevel(this.conf[rule.id]);
            if (level) {
                return level;
            }
        }
        return rule.defaultValue;
    };
    LintConfigurationSettings.prototype.getSetting = function (setting) {
        return this.conf[setting.id];
    };
    return LintConfigurationSettings;
}());

function toLevel(level) {
    switch (level) {
        case 'ignore': return _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Level.Ignore;
        case 'warning': return _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Level.Warning;
        case 'error': return _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.Level.Error;
    }
    return null;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lintUtil.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lintUtil.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Element": () => /* binding */ Element,
/* harmony export */   "default": () => /* binding */ calculateBoxModel
/* harmony export */ });
/* harmony import */ var _utils_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/arrays.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/arrays.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


var Element = /** @class */ (function () {
    function Element(decl) {
        this.fullPropertyName = decl.getFullPropertyName().toLowerCase();
        this.node = decl;
    }
    return Element;
}());

function setSide(model, side, value, property) {
    var state = model[side];
    state.value = value;
    if (value) {
        if (!(0,_utils_arrays_js__WEBPACK_IMPORTED_MODULE_0__.includes)(state.properties, property)) {
            state.properties.push(property);
        }
    }
}
function setAllSides(model, value, property) {
    setSide(model, 'top', value, property);
    setSide(model, 'right', value, property);
    setSide(model, 'bottom', value, property);
    setSide(model, 'left', value, property);
}
function updateModelWithValue(model, side, value, property) {
    if (side === 'top' || side === 'right' ||
        side === 'bottom' || side === 'left') {
        setSide(model, side, value, property);
    }
    else {
        setAllSides(model, value, property);
    }
}
function updateModelWithList(model, values, property) {
    switch (values.length) {
        case 1:
            updateModelWithValue(model, undefined, values[0], property);
            break;
        case 2:
            updateModelWithValue(model, 'top', values[0], property);
            updateModelWithValue(model, 'bottom', values[0], property);
            updateModelWithValue(model, 'right', values[1], property);
            updateModelWithValue(model, 'left', values[1], property);
            break;
        case 3:
            updateModelWithValue(model, 'top', values[0], property);
            updateModelWithValue(model, 'right', values[1], property);
            updateModelWithValue(model, 'left', values[1], property);
            updateModelWithValue(model, 'bottom', values[2], property);
            break;
        case 4:
            updateModelWithValue(model, 'top', values[0], property);
            updateModelWithValue(model, 'right', values[1], property);
            updateModelWithValue(model, 'bottom', values[2], property);
            updateModelWithValue(model, 'left', values[3], property);
            break;
    }
}
function matches(value, candidates) {
    for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {
        var candidate = candidates_1[_i];
        if (value.matches(candidate)) {
            return true;
        }
    }
    return false;
}
/**
 * @param allowsKeywords whether the initial value of property is zero, so keywords `initial` and `unset` count as zero
 * @return `true` if this node represents a non-zero border; otherwise, `false`
 */
function checkLineWidth(value, allowsKeywords) {
    if (allowsKeywords === void 0) { allowsKeywords = true; }
    if (allowsKeywords && matches(value, ['initial', 'unset'])) {
        return false;
    }
    // a <length> is a value and a unit
    // so use `parseFloat` to strip the unit
    return parseFloat(value.getText()) !== 0;
}
function checkLineWidthList(nodes, allowsKeywords) {
    if (allowsKeywords === void 0) { allowsKeywords = true; }
    return nodes.map(function (node) { return checkLineWidth(node, allowsKeywords); });
}
/**
 * @param allowsKeywords whether keywords `initial` and `unset` count as zero
 * @return `true` if this node represents a non-zero border; otherwise, `false`
 */
function checkLineStyle(valueNode, allowsKeywords) {
    if (allowsKeywords === void 0) { allowsKeywords = true; }
    if (matches(valueNode, ['none', 'hidden'])) {
        return false;
    }
    if (allowsKeywords && matches(valueNode, ['initial', 'unset'])) {
        return false;
    }
    return true;
}
function checkLineStyleList(nodes, allowsKeywords) {
    if (allowsKeywords === void 0) { allowsKeywords = true; }
    return nodes.map(function (node) { return checkLineStyle(node, allowsKeywords); });
}
function checkBorderShorthand(node) {
    var children = node.getChildren();
    // the only child can be a keyword, a <line-width>, or a <line-style>
    // if either check returns false, the result is no border
    if (children.length === 1) {
        var value = children[0];
        return checkLineWidth(value) && checkLineStyle(value);
    }
    // multiple children can't contain keywords
    // if any child means no border, the result is no border
    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
        var child = children_1[_i];
        var value = child;
        if (!checkLineWidth(value, /* allowsKeywords: */ false) ||
            !checkLineStyle(value, /* allowsKeywords: */ false)) {
            return false;
        }
    }
    return true;
}
function calculateBoxModel(propertyTable) {
    var model = {
        top: { value: false, properties: [] },
        right: { value: false, properties: [] },
        bottom: { value: false, properties: [] },
        left: { value: false, properties: [] },
    };
    for (var _i = 0, propertyTable_1 = propertyTable; _i < propertyTable_1.length; _i++) {
        var property = propertyTable_1[_i];
        var value = property.node.value;
        if (typeof value === 'undefined') {
            continue;
        }
        switch (property.fullPropertyName) {
            case 'box-sizing':
                // has `box-sizing`, bail out
                return {
                    top: { value: false, properties: [] },
                    right: { value: false, properties: [] },
                    bottom: { value: false, properties: [] },
                    left: { value: false, properties: [] },
                };
            case 'width':
                model.width = property;
                break;
            case 'height':
                model.height = property;
                break;
            default:
                var segments = property.fullPropertyName.split('-');
                switch (segments[0]) {
                    case 'border':
                        switch (segments[1]) {
                            case undefined:
                            case 'top':
                            case 'right':
                            case 'bottom':
                            case 'left':
                                switch (segments[2]) {
                                    case undefined:
                                        updateModelWithValue(model, segments[1], checkBorderShorthand(value), property);
                                        break;
                                    case 'width':
                                        // the initial value of `border-width` is `medium`, not zero
                                        updateModelWithValue(model, segments[1], checkLineWidth(value, false), property);
                                        break;
                                    case 'style':
                                        // the initial value of `border-style` is `none`
                                        updateModelWithValue(model, segments[1], checkLineStyle(value, true), property);
                                        break;
                                }
                                break;
                            case 'width':
                                // the initial value of `border-width` is `medium`, not zero
                                updateModelWithList(model, checkLineWidthList(value.getChildren(), false), property);
                                break;
                            case 'style':
                                // the initial value of `border-style` is `none`
                                updateModelWithList(model, checkLineStyleList(value.getChildren(), true), property);
                                break;
                        }
                        break;
                    case 'padding':
                        if (segments.length === 1) {
                            // the initial value of `padding` is zero
                            updateModelWithList(model, checkLineWidthList(value.getChildren(), true), property);
                        }
                        else {
                            // the initial value of `padding` is zero
                            updateModelWithValue(model, segments[1], checkLineWidth(value, true), property);
                        }
                        break;
                }
                break;
        }
    }
    return model;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/pathCompletion.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/pathCompletion.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PathCompletionParticipant": () => /* binding */ PathCompletionParticipant
/* harmony export */ });
/* harmony import */ var _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cssLanguageTypes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageTypes.js");
/* harmony import */ var _utils_strings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/strings.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/strings.js");
/* harmony import */ var _utils_resources_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/resources.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/resources.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



var PathCompletionParticipant = /** @class */ (function () {
    function PathCompletionParticipant(readDirectory) {
        this.readDirectory = readDirectory;
        this.literalCompletions = [];
        this.importCompletions = [];
    }
    PathCompletionParticipant.prototype.onCssURILiteralValue = function (context) {
        this.literalCompletions.push(context);
    };
    PathCompletionParticipant.prototype.onCssImportPath = function (context) {
        this.importCompletions.push(context);
    };
    PathCompletionParticipant.prototype.computeCompletions = function (document, documentContext) {
        return __awaiter(this, void 0, void 0, function () {
            var result, _i, _a, literalCompletion, uriValue, fullValue, items, _b, items_1, item, _c, _d, importCompletion, pathValue, fullValue, suggestions, _e, suggestions_1, item;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        result = { items: [], isIncomplete: false };
                        _i = 0, _a = this.literalCompletions;
                        _f.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 5];
                        literalCompletion = _a[_i];
                        uriValue = literalCompletion.uriValue;
                        fullValue = stripQuotes(uriValue);
                        if (!(fullValue === '.' || fullValue === '..')) return [3 /*break*/, 2];
                        result.isIncomplete = true;
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.providePathSuggestions(uriValue, literalCompletion.position, literalCompletion.range, document, documentContext)];
                    case 3:
                        items = _f.sent();
                        for (_b = 0, items_1 = items; _b < items_1.length; _b++) {
                            item = items_1[_b];
                            result.items.push(item);
                        }
                        _f.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 1];
                    case 5:
                        _c = 0, _d = this.importCompletions;
                        _f.label = 6;
                    case 6:
                        if (!(_c < _d.length)) return [3 /*break*/, 10];
                        importCompletion = _d[_c];
                        pathValue = importCompletion.pathValue;
                        fullValue = stripQuotes(pathValue);
                        if (!(fullValue === '.' || fullValue === '..')) return [3 /*break*/, 7];
                        result.isIncomplete = true;
                        return [3 /*break*/, 9];
                    case 7: return [4 /*yield*/, this.providePathSuggestions(pathValue, importCompletion.position, importCompletion.range, document, documentContext)];
                    case 8:
                        suggestions = _f.sent();
                        if (document.languageId === 'scss') {
                            suggestions.forEach(function (s) {
                                if ((0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_1__.startsWith)(s.label, '_') && (0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_1__.endsWith)(s.label, '.scss')) {
                                    if (s.textEdit) {
                                        s.textEdit.newText = s.label.slice(1, -5);
                                    }
                                    else {
                                        s.label = s.label.slice(1, -5);
                                    }
                                }
                            });
                        }
                        for (_e = 0, suggestions_1 = suggestions; _e < suggestions_1.length; _e++) {
                            item = suggestions_1[_e];
                            result.items.push(item);
                        }
                        _f.label = 9;
                    case 9:
                        _c++;
                        return [3 /*break*/, 6];
                    case 10: return [2 /*return*/, result];
                }
            });
        });
    };
    PathCompletionParticipant.prototype.providePathSuggestions = function (pathValue, position, range, document, documentContext) {
        return __awaiter(this, void 0, void 0, function () {
            var fullValue, isValueQuoted, valueBeforeCursor, currentDocUri, fullValueRange, replaceRange, valueBeforeLastSlash, parentDir, result, infos, _i, infos_1, _a, name, type, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        fullValue = stripQuotes(pathValue);
                        isValueQuoted = (0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_1__.startsWith)(pathValue, "'") || (0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_1__.startsWith)(pathValue, "\"");
                        valueBeforeCursor = isValueQuoted
                            ? fullValue.slice(0, position.character - (range.start.character + 1))
                            : fullValue.slice(0, position.character - range.start.character);
                        currentDocUri = document.uri;
                        fullValueRange = isValueQuoted ? shiftRange(range, 1, -1) : range;
                        replaceRange = pathToReplaceRange(valueBeforeCursor, fullValue, fullValueRange);
                        valueBeforeLastSlash = valueBeforeCursor.substring(0, valueBeforeCursor.lastIndexOf('/') + 1);
                        parentDir = documentContext.resolveReference(valueBeforeLastSlash || '.', currentDocUri);
                        if (!parentDir) return [3 /*break*/, 4];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        result = [];
                        return [4 /*yield*/, this.readDirectory(parentDir)];
                    case 2:
                        infos = _b.sent();
                        for (_i = 0, infos_1 = infos; _i < infos_1.length; _i++) {
                            _a = infos_1[_i], name = _a[0], type = _a[1];
                            // Exclude paths that start with `.`
                            if (name.charCodeAt(0) !== CharCode_dot && (type === _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.FileType.Directory || (0,_utils_resources_js__WEBPACK_IMPORTED_MODULE_2__.joinPath)(parentDir, name) !== currentDocUri)) {
                                result.push(createCompletionItem(name, type === _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.FileType.Directory, replaceRange));
                            }
                        }
                        return [2 /*return*/, result];
                    case 3:
                        e_1 = _b.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, []];
                }
            });
        });
    };
    return PathCompletionParticipant;
}());

var CharCode_dot = '.'.charCodeAt(0);
function stripQuotes(fullValue) {
    if ((0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_1__.startsWith)(fullValue, "'") || (0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_1__.startsWith)(fullValue, "\"")) {
        return fullValue.slice(1, -1);
    }
    else {
        return fullValue;
    }
}
function pathToReplaceRange(valueBeforeCursor, fullValue, fullValueRange) {
    var replaceRange;
    var lastIndexOfSlash = valueBeforeCursor.lastIndexOf('/');
    if (lastIndexOfSlash === -1) {
        replaceRange = fullValueRange;
    }
    else {
        // For cases where cursor is in the middle of attribute value, like <script src="./s|rc/test.js">
        // Find the last slash before cursor, and calculate the start of replace range from there
        var valueAfterLastSlash = fullValue.slice(lastIndexOfSlash + 1);
        var startPos = shiftPosition(fullValueRange.end, -valueAfterLastSlash.length);
        // If whitespace exists, replace until it
        var whitespaceIndex = valueAfterLastSlash.indexOf(' ');
        var endPos = void 0;
        if (whitespaceIndex !== -1) {
            endPos = shiftPosition(startPos, whitespaceIndex);
        }
        else {
            endPos = fullValueRange.end;
        }
        replaceRange = _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.Range.create(startPos, endPos);
    }
    return replaceRange;
}
function createCompletionItem(name, isDir, replaceRange) {
    if (isDir) {
        name = name + '/';
        return {
            label: escapePath(name),
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Folder,
            textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(replaceRange, escapePath(name)),
            command: {
                title: 'Suggest',
                command: 'editor.action.triggerSuggest'
            }
        };
    }
    else {
        return {
            label: escapePath(name),
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.File,
            textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(replaceRange, escapePath(name))
        };
    }
}
// Escape https://www.w3.org/TR/CSS1/#url
function escapePath(p) {
    return p.replace(/(\s|\(|\)|,|"|')/g, '\\$1');
}
function shiftPosition(pos, offset) {
    return _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.Position.create(pos.line, pos.character + offset);
}
function shiftRange(range, startOffset, endOffset) {
    var start = shiftPosition(range.start, startOffset);
    var end = shiftPosition(range.end, endOffset);
    return _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_0__.Range.create(start, end);
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/scssCompletion.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/scssCompletion.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SCSSCompletion": () => /* binding */ SCSSCompletion
/* harmony export */ });
/* harmony import */ var _cssCompletion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssCompletion.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssCompletion.js");
/* harmony import */ var _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cssLanguageTypes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageTypes.js");
/* harmony import */ var _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../fillers/vscode-nls.js */ "./node_modules/monaco-editor/esm/vs/language/css/fillers/vscode-nls.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var localize = _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_3__.loadMessageBundle();
var SCSSCompletion = /** @class */ (function (_super) {
    __extends(SCSSCompletion, _super);
    function SCSSCompletion(lsServiceOptions, cssDataManager) {
        var _this = _super.call(this, '$', lsServiceOptions, cssDataManager) || this;
        addReferencesToDocumentation(SCSSCompletion.scssModuleLoaders);
        addReferencesToDocumentation(SCSSCompletion.scssModuleBuiltIns);
        return _this;
    }
    SCSSCompletion.prototype.isImportPathParent = function (type) {
        return type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Forward
            || type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Use
            || _super.prototype.isImportPathParent.call(this, type);
    };
    SCSSCompletion.prototype.getCompletionForImportPath = function (importPathNode, result) {
        var parentType = importPathNode.getParent().type;
        if (parentType === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Forward || parentType === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Use) {
            for (var _i = 0, _a = SCSSCompletion.scssModuleBuiltIns; _i < _a.length; _i++) {
                var p = _a[_i];
                var item = {
                    label: p.label,
                    documentation: p.documentation,
                    textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.TextEdit.replace(this.getCompletionRange(importPathNode), "'" + p.label + "'"),
                    kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Module
                };
                result.items.push(item);
            }
        }
        return _super.prototype.getCompletionForImportPath.call(this, importPathNode, result);
    };
    SCSSCompletion.prototype.createReplaceFunction = function () {
        var tabStopCounter = 1;
        return function (_match, p1) {
            return '\\' + p1 + ': ${' + tabStopCounter++ + ':' + (SCSSCompletion.variableDefaults[p1] || '') + '}';
        };
    };
    SCSSCompletion.prototype.createFunctionProposals = function (proposals, existingNode, sortToEnd, result) {
        for (var _i = 0, proposals_1 = proposals; _i < proposals_1.length; _i++) {
            var p = proposals_1[_i];
            var insertText = p.func.replace(/\[?(\$\w+)\]?/g, this.createReplaceFunction());
            var label = p.func.substr(0, p.func.indexOf('('));
            var item = {
                label: label,
                detail: p.func,
                documentation: p.desc,
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                insertTextFormat: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Function
            };
            if (sortToEnd) {
                item.sortText = 'z';
            }
            result.items.push(item);
        }
        return result;
    };
    SCSSCompletion.prototype.getCompletionsForSelector = function (ruleSet, isNested, result) {
        this.createFunctionProposals(SCSSCompletion.selectorFuncs, null, true, result);
        return _super.prototype.getCompletionsForSelector.call(this, ruleSet, isNested, result);
    };
    SCSSCompletion.prototype.getTermProposals = function (entry, existingNode, result) {
        var functions = SCSSCompletion.builtInFuncs;
        if (entry) {
            functions = functions.filter(function (f) { return !f.type || !entry.restrictions || entry.restrictions.indexOf(f.type) !== -1; });
        }
        this.createFunctionProposals(functions, existingNode, true, result);
        return _super.prototype.getTermProposals.call(this, entry, existingNode, result);
    };
    SCSSCompletion.prototype.getColorProposals = function (entry, existingNode, result) {
        this.createFunctionProposals(SCSSCompletion.colorProposals, existingNode, false, result);
        return _super.prototype.getColorProposals.call(this, entry, existingNode, result);
    };
    SCSSCompletion.prototype.getCompletionsForDeclarationProperty = function (declaration, result) {
        this.getCompletionForAtDirectives(result);
        this.getCompletionsForSelector(null, true, result);
        return _super.prototype.getCompletionsForDeclarationProperty.call(this, declaration, result);
    };
    SCSSCompletion.prototype.getCompletionsForExtendsReference = function (_extendsRef, existingNode, result) {
        var symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceType.Rule);
        for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {
            var symbol = symbols_1[_i];
            var suggest = {
                label: symbol.name,
                textEdit: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.TextEdit.replace(this.getCompletionRange(existingNode), symbol.name),
                kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Function,
            };
            result.items.push(suggest);
        }
        return result;
    };
    SCSSCompletion.prototype.getCompletionForAtDirectives = function (result) {
        var _a;
        (_a = result.items).push.apply(_a, SCSSCompletion.scssAtDirectives);
        return result;
    };
    SCSSCompletion.prototype.getCompletionForTopLevel = function (result) {
        this.getCompletionForAtDirectives(result);
        this.getCompletionForModuleLoaders(result);
        _super.prototype.getCompletionForTopLevel.call(this, result);
        return result;
    };
    SCSSCompletion.prototype.getCompletionForModuleLoaders = function (result) {
        var _a;
        (_a = result.items).push.apply(_a, SCSSCompletion.scssModuleLoaders);
        return result;
    };
    SCSSCompletion.variableDefaults = {
        '$red': '1',
        '$green': '2',
        '$blue': '3',
        '$alpha': '1.0',
        '$color': '#000000',
        '$weight': '0.5',
        '$hue': '0',
        '$saturation': '0%',
        '$lightness': '0%',
        '$degrees': '0',
        '$amount': '0',
        '$string': '""',
        '$substring': '"s"',
        '$number': '0',
        '$limit': '1'
    };
    SCSSCompletion.colorProposals = [
        { func: 'red($color)', desc: localize('scss.builtin.red', 'Gets the red component of a color.') },
        { func: 'green($color)', desc: localize('scss.builtin.green', 'Gets the green component of a color.') },
        { func: 'blue($color)', desc: localize('scss.builtin.blue', 'Gets the blue component of a color.') },
        { func: 'mix($color, $color, [$weight])', desc: localize('scss.builtin.mix', 'Mixes two colors together.') },
        { func: 'hue($color)', desc: localize('scss.builtin.hue', 'Gets the hue component of a color.') },
        { func: 'saturation($color)', desc: localize('scss.builtin.saturation', 'Gets the saturation component of a color.') },
        { func: 'lightness($color)', desc: localize('scss.builtin.lightness', 'Gets the lightness component of a color.') },
        { func: 'adjust-hue($color, $degrees)', desc: localize('scss.builtin.adjust-hue', 'Changes the hue of a color.') },
        { func: 'lighten($color, $amount)', desc: localize('scss.builtin.lighten', 'Makes a color lighter.') },
        { func: 'darken($color, $amount)', desc: localize('scss.builtin.darken', 'Makes a color darker.') },
        { func: 'saturate($color, $amount)', desc: localize('scss.builtin.saturate', 'Makes a color more saturated.') },
        { func: 'desaturate($color, $amount)', desc: localize('scss.builtin.desaturate', 'Makes a color less saturated.') },
        { func: 'grayscale($color)', desc: localize('scss.builtin.grayscale', 'Converts a color to grayscale.') },
        { func: 'complement($color)', desc: localize('scss.builtin.complement', 'Returns the complement of a color.') },
        { func: 'invert($color)', desc: localize('scss.builtin.invert', 'Returns the inverse of a color.') },
        { func: 'alpha($color)', desc: localize('scss.builtin.alpha', 'Gets the opacity component of a color.') },
        { func: 'opacity($color)', desc: 'Gets the alpha component (opacity) of a color.' },
        { func: 'rgba($color, $alpha)', desc: localize('scss.builtin.rgba', 'Changes the alpha component for a color.') },
        { func: 'opacify($color, $amount)', desc: localize('scss.builtin.opacify', 'Makes a color more opaque.') },
        { func: 'fade-in($color, $amount)', desc: localize('scss.builtin.fade-in', 'Makes a color more opaque.') },
        { func: 'transparentize($color, $amount)', desc: localize('scss.builtin.transparentize', 'Makes a color more transparent.') },
        { func: 'fade-out($color, $amount)', desc: localize('scss.builtin.fade-out', 'Makes a color more transparent.') },
        { func: 'adjust-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])', desc: localize('scss.builtin.adjust-color', 'Increases or decreases one or more components of a color.') },
        { func: 'scale-color($color, [$red], [$green], [$blue], [$saturation], [$lightness], [$alpha])', desc: localize('scss.builtin.scale-color', 'Fluidly scales one or more properties of a color.') },
        { func: 'change-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])', desc: localize('scss.builtin.change-color', 'Changes one or more properties of a color.') },
        { func: 'ie-hex-str($color)', desc: localize('scss.builtin.ie-hex-str', 'Converts a color into the format understood by IE filters.') }
    ];
    SCSSCompletion.selectorFuncs = [
        { func: 'selector-nest($selectors…)', desc: localize('scss.builtin.selector-nest', 'Nests selector beneath one another like they would be nested in the stylesheet.') },
        { func: 'selector-append($selectors…)', desc: localize('scss.builtin.selector-append', 'Appends selectors to one another without spaces in between.') },
        { func: 'selector-extend($selector, $extendee, $extender)', desc: localize('scss.builtin.selector-extend', 'Extends $extendee with $extender within $selector.') },
        { func: 'selector-replace($selector, $original, $replacement)', desc: localize('scss.builtin.selector-replace', 'Replaces $original with $replacement within $selector.') },
        { func: 'selector-unify($selector1, $selector2)', desc: localize('scss.builtin.selector-unify', 'Unifies two selectors to produce a selector that matches elements matched by both.') },
        { func: 'is-superselector($super, $sub)', desc: localize('scss.builtin.is-superselector', 'Returns whether $super matches all the elements $sub does, and possibly more.') },
        { func: 'simple-selectors($selector)', desc: localize('scss.builtin.simple-selectors', 'Returns the simple selectors that comprise a compound selector.') },
        { func: 'selector-parse($selector)', desc: localize('scss.builtin.selector-parse', 'Parses a selector into the format returned by &.') }
    ];
    SCSSCompletion.builtInFuncs = [
        { func: 'unquote($string)', desc: localize('scss.builtin.unquote', 'Removes quotes from a string.') },
        { func: 'quote($string)', desc: localize('scss.builtin.quote', 'Adds quotes to a string.') },
        { func: 'str-length($string)', desc: localize('scss.builtin.str-length', 'Returns the number of characters in a string.') },
        { func: 'str-insert($string, $insert, $index)', desc: localize('scss.builtin.str-insert', 'Inserts $insert into $string at $index.') },
        { func: 'str-index($string, $substring)', desc: localize('scss.builtin.str-index', 'Returns the index of the first occurance of $substring in $string.') },
        { func: 'str-slice($string, $start-at, [$end-at])', desc: localize('scss.builtin.str-slice', 'Extracts a substring from $string.') },
        { func: 'to-upper-case($string)', desc: localize('scss.builtin.to-upper-case', 'Converts a string to upper case.') },
        { func: 'to-lower-case($string)', desc: localize('scss.builtin.to-lower-case', 'Converts a string to lower case.') },
        { func: 'percentage($number)', desc: localize('scss.builtin.percentage', 'Converts a unitless number to a percentage.'), type: 'percentage' },
        { func: 'round($number)', desc: localize('scss.builtin.round', 'Rounds a number to the nearest whole number.') },
        { func: 'ceil($number)', desc: localize('scss.builtin.ceil', 'Rounds a number up to the next whole number.') },
        { func: 'floor($number)', desc: localize('scss.builtin.floor', 'Rounds a number down to the previous whole number.') },
        { func: 'abs($number)', desc: localize('scss.builtin.abs', 'Returns the absolute value of a number.') },
        { func: 'min($numbers)', desc: localize('scss.builtin.min', 'Finds the minimum of several numbers.') },
        { func: 'max($numbers)', desc: localize('scss.builtin.max', 'Finds the maximum of several numbers.') },
        { func: 'random([$limit])', desc: localize('scss.builtin.random', 'Returns a random number.') },
        { func: 'length($list)', desc: localize('scss.builtin.length', 'Returns the length of a list.') },
        { func: 'nth($list, $n)', desc: localize('scss.builtin.nth', 'Returns a specific item in a list.') },
        { func: 'set-nth($list, $n, $value)', desc: localize('scss.builtin.set-nth', 'Replaces the nth item in a list.') },
        { func: 'join($list1, $list2, [$separator])', desc: localize('scss.builtin.join', 'Joins together two lists into one.') },
        { func: 'append($list1, $val, [$separator])', desc: localize('scss.builtin.append', 'Appends a single value onto the end of a list.') },
        { func: 'zip($lists)', desc: localize('scss.builtin.zip', 'Combines several lists into a single multidimensional list.') },
        { func: 'index($list, $value)', desc: localize('scss.builtin.index', 'Returns the position of a value within a list.') },
        { func: 'list-separator(#list)', desc: localize('scss.builtin.list-separator', 'Returns the separator of a list.') },
        { func: 'map-get($map, $key)', desc: localize('scss.builtin.map-get', 'Returns the value in a map associated with a given key.') },
        { func: 'map-merge($map1, $map2)', desc: localize('scss.builtin.map-merge', 'Merges two maps together into a new map.') },
        { func: 'map-remove($map, $keys)', desc: localize('scss.builtin.map-remove', 'Returns a new map with keys removed.') },
        { func: 'map-keys($map)', desc: localize('scss.builtin.map-keys', 'Returns a list of all keys in a map.') },
        { func: 'map-values($map)', desc: localize('scss.builtin.map-values', 'Returns a list of all values in a map.') },
        { func: 'map-has-key($map, $key)', desc: localize('scss.builtin.map-has-key', 'Returns whether a map has a value associated with a given key.') },
        { func: 'keywords($args)', desc: localize('scss.builtin.keywords', 'Returns the keywords passed to a function that takes variable arguments.') },
        { func: 'feature-exists($feature)', desc: localize('scss.builtin.feature-exists', 'Returns whether a feature exists in the current Sass runtime.') },
        { func: 'variable-exists($name)', desc: localize('scss.builtin.variable-exists', 'Returns whether a variable with the given name exists in the current scope.') },
        { func: 'global-variable-exists($name)', desc: localize('scss.builtin.global-variable-exists', 'Returns whether a variable with the given name exists in the global scope.') },
        { func: 'function-exists($name)', desc: localize('scss.builtin.function-exists', 'Returns whether a function with the given name exists.') },
        { func: 'mixin-exists($name)', desc: localize('scss.builtin.mixin-exists', 'Returns whether a mixin with the given name exists.') },
        { func: 'inspect($value)', desc: localize('scss.builtin.inspect', 'Returns the string representation of a value as it would be represented in Sass.') },
        { func: 'type-of($value)', desc: localize('scss.builtin.type-of', 'Returns the type of a value.') },
        { func: 'unit($number)', desc: localize('scss.builtin.unit', 'Returns the unit(s) associated with a number.') },
        { func: 'unitless($number)', desc: localize('scss.builtin.unitless', 'Returns whether a number has units.') },
        { func: 'comparable($number1, $number2)', desc: localize('scss.builtin.comparable', 'Returns whether two numbers can be added, subtracted, or compared.') },
        { func: 'call($name, $args…)', desc: localize('scss.builtin.call', 'Dynamically calls a Sass function.') }
    ];
    SCSSCompletion.scssAtDirectives = [
        {
            label: "@extend",
            documentation: localize("scss.builtin.@extend", "Inherits the styles of another selector."),
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
        },
        {
            label: "@at-root",
            documentation: localize("scss.builtin.@at-root", "Causes one or more rules to be emitted at the root of the document."),
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
        },
        {
            label: "@debug",
            documentation: localize("scss.builtin.@debug", "Prints the value of an expression to the standard error output stream. Useful for debugging complicated Sass files."),
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
        },
        {
            label: "@warn",
            documentation: localize("scss.builtin.@warn", "Prints the value of an expression to the standard error output stream. Useful for libraries that need to warn users of deprecations or recovering from minor mixin usage mistakes. Warnings can be turned off with the `--quiet` command-line option or the `:quiet` Sass option."),
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
        },
        {
            label: "@error",
            documentation: localize("scss.builtin.@error", "Throws the value of an expression as a fatal error with stack trace. Useful for validating arguments to mixins and functions."),
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
        },
        {
            label: "@if",
            documentation: localize("scss.builtin.@if", "Includes the body if the expression does not evaluate to `false` or `null`."),
            insertText: "@if ${1:expr} {\n\t$0\n}",
            insertTextFormat: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
        },
        {
            label: "@for",
            documentation: localize("scss.builtin.@for", "For loop that repeatedly outputs a set of styles for each `$var` in the `from/through` or `from/to` clause."),
            insertText: "@for \\$${1:var} from ${2:start} ${3|to,through|} ${4:end} {\n\t$0\n}",
            insertTextFormat: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
        },
        {
            label: "@each",
            documentation: localize("scss.builtin.@each", "Each loop that sets `$var` to each item in the list or map, then outputs the styles it contains using that value of `$var`."),
            insertText: "@each \\$${1:var} in ${2:list} {\n\t$0\n}",
            insertTextFormat: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
        },
        {
            label: "@while",
            documentation: localize("scss.builtin.@while", "While loop that takes an expression and repeatedly outputs the nested styles until the statement evaluates to `false`."),
            insertText: "@while ${1:condition} {\n\t$0\n}",
            insertTextFormat: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
        },
        {
            label: "@mixin",
            documentation: localize("scss.builtin.@mixin", "Defines styles that can be re-used throughout the stylesheet with `@include`."),
            insertText: "@mixin ${1:name} {\n\t$0\n}",
            insertTextFormat: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
        },
        {
            label: "@include",
            documentation: localize("scss.builtin.@include", "Includes the styles defined by another mixin into the current rule."),
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
        },
        {
            label: "@function",
            documentation: localize("scss.builtin.@function", "Defines complex operations that can be re-used throughout stylesheets."),
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
        }
    ];
    SCSSCompletion.scssModuleLoaders = [
        {
            label: "@use",
            documentation: localize("scss.builtin.@use", "Loads mixins, functions, and variables from other Sass stylesheets as 'modules', and combines CSS from multiple stylesheets together."),
            references: [{ name: 'Sass documentation', url: 'https://sass-lang.com/documentation/at-rules/use' }],
            insertText: "@use '$0';",
            insertTextFormat: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
        },
        {
            label: "@forward",
            documentation: localize("scss.builtin.@forward", "Loads a Sass stylesheet and makes its mixins, functions, and variables available when this stylesheet is loaded with the @use rule."),
            references: [{ name: 'Sass documentation', url: 'https://sass-lang.com/documentation/at-rules/forward' }],
            insertText: "@forward '$0';",
            insertTextFormat: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
            kind: _cssLanguageTypes_js__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
        },
    ];
    SCSSCompletion.scssModuleBuiltIns = [
        {
            label: 'sass:math',
            documentation: localize('scss.builtin.sass:math', 'Provides functions that operate on numbers.'),
            references: [{ name: 'Sass documentation', url: 'https://sass-lang.com/documentation/modules/math' }]
        },
        {
            label: 'sass:string',
            documentation: localize('scss.builtin.sass:string', 'Makes it easy to combine, search, or split apart strings.'),
            references: [{ name: 'Sass documentation', url: 'https://sass-lang.com/documentation/modules/string' }]
        },
        {
            label: 'sass:color',
            documentation: localize('scss.builtin.sass:color', 'Generates new colors based on existing ones, making it easy to build color themes.'),
            references: [{ name: 'Sass documentation', url: 'https://sass-lang.com/documentation/modules/color' }]
        },
        {
            label: 'sass:list',
            documentation: localize('scss.builtin.sass:list', 'Lets you access and modify values in lists.'),
            references: [{ name: 'Sass documentation', url: 'https://sass-lang.com/documentation/modules/list' }]
        },
        {
            label: 'sass:map',
            documentation: localize('scss.builtin.sass:map', 'Makes it possible to look up the value associated with a key in a map, and much more.'),
            references: [{ name: 'Sass documentation', url: 'https://sass-lang.com/documentation/modules/map' }]
        },
        {
            label: 'sass:selector',
            documentation: localize('scss.builtin.sass:selector', 'Provides access to Sass’s powerful selector engine.'),
            references: [{ name: 'Sass documentation', url: 'https://sass-lang.com/documentation/modules/selector' }]
        },
        {
            label: 'sass:meta',
            documentation: localize('scss.builtin.sass:meta', 'Exposes the details of Sass’s inner workings.'),
            references: [{ name: 'Sass documentation', url: 'https://sass-lang.com/documentation/modules/meta' }]
        },
    ];
    return SCSSCompletion;
}(_cssCompletion_js__WEBPACK_IMPORTED_MODULE_0__.CSSCompletion));

/**
 * Todo @Pine: Remove this and do it through custom data
 */
function addReferencesToDocumentation(items) {
    items.forEach(function (i) {
        if (i.documentation && i.references && i.references.length > 0) {
            var markdownDoc = typeof i.documentation === 'string'
                ? { kind: 'markdown', value: i.documentation }
                : { kind: 'markdown', value: i.documentation.value };
            markdownDoc.value += '\n\n';
            markdownDoc.value += i.references
                .map(function (r) {
                return "[" + r.name + "](" + r.url + ")";
            })
                .join(' | ');
            i.documentation = markdownDoc;
        }
    });
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/scssNavigation.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/scssNavigation.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SCSSNavigation": () => /* binding */ SCSSNavigation
/* harmony export */ });
/* harmony import */ var _cssNavigation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssNavigation.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssNavigation.js");
/* harmony import */ var _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _vscode_uri_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../vscode-uri/index.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-uri/index.js");
/* harmony import */ var _utils_strings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/strings.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/strings.js");
/* harmony import */ var _utils_resources_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/resources.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/resources.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};





var SCSSNavigation = /** @class */ (function (_super) {
    __extends(SCSSNavigation, _super);
    function SCSSNavigation(fileSystemProvider) {
        return _super.call(this, fileSystemProvider) || this;
    }
    SCSSNavigation.prototype.isRawStringDocumentLinkNode = function (node) {
        return (_super.prototype.isRawStringDocumentLinkNode.call(this, node) ||
            node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Use ||
            node.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_1__.NodeType.Forward);
    };
    SCSSNavigation.prototype.resolveRelativeReference = function (ref, documentUri, documentContext) {
        return __awaiter(this, void 0, void 0, function () {
            function toPathVariations(uri) {
                // No valid path
                if (uri.path === '') {
                    return undefined;
                }
                // No variation for links that ends with suffix
                if (uri.path.endsWith('.scss') || uri.path.endsWith('.css')) {
                    return undefined;
                }
                // If a link is like a/, try resolving a/index.scss and a/_index.scss
                if (uri.path.endsWith('/')) {
                    return [
                        uri.with({ path: uri.path + 'index.scss' }).toString(),
                        uri.with({ path: uri.path + '_index.scss' }).toString()
                    ];
                }
                // Use `uri.path` since it's normalized to use `/` in all platforms
                var pathFragments = uri.path.split('/');
                var basename = pathFragments[pathFragments.length - 1];
                var pathWithoutBasename = uri.path.slice(0, -basename.length);
                // No variation for links such as _a
                if (basename.startsWith('_')) {
                    if (uri.path.endsWith('.scss')) {
                        return undefined;
                    }
                    else {
                        return [uri.with({ path: uri.path + '.scss' }).toString()];
                    }
                }
                var normalizedBasename = basename + '.scss';
                var documentUriWithBasename = function (newBasename) {
                    return uri.with({ path: pathWithoutBasename + newBasename }).toString();
                };
                var normalizedPath = documentUriWithBasename(normalizedBasename);
                var underScorePath = documentUriWithBasename('_' + normalizedBasename);
                var indexPath = documentUriWithBasename(normalizedBasename.slice(0, -5) + '/index.scss');
                var indexUnderscoreUri = documentUriWithBasename(normalizedBasename.slice(0, -5) + '/_index.scss');
                var cssPath = documentUriWithBasename(normalizedBasename.slice(0, -5) + '.css');
                return [normalizedPath, underScorePath, indexPath, indexUnderscoreUri, cssPath];
            }
            var target, parsedUri, pathVariations, j, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if ((0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_3__.startsWith)(ref, 'sass:')) {
                            return [2 /*return*/, undefined]; // sass library
                        }
                        return [4 /*yield*/, _super.prototype.resolveRelativeReference.call(this, ref, documentUri, documentContext)];
                    case 1:
                        target = _a.sent();
                        if (!(this.fileSystemProvider && target && (0,_utils_resources_js__WEBPACK_IMPORTED_MODULE_4__.extname)(target).length === 0)) return [3 /*break*/, 8];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 7, , 8]);
                        parsedUri = _vscode_uri_index_js__WEBPACK_IMPORTED_MODULE_2__.URI.parse(target);
                        pathVariations = toPathVariations(parsedUri);
                        if (!pathVariations) return [3 /*break*/, 6];
                        j = 0;
                        _a.label = 3;
                    case 3:
                        if (!(j < pathVariations.length)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.fileExists(pathVariations[j])];
                    case 4:
                        if (_a.sent()) {
                            return [2 /*return*/, pathVariations[j]];
                        }
                        _a.label = 5;
                    case 5:
                        j++;
                        return [3 /*break*/, 3];
                    case 6: return [2 /*return*/, undefined];
                    case 7:
                        e_1 = _a.sent();
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/, target];
                }
            });
        });
    };
    return SCSSNavigation;
}(_cssNavigation_js__WEBPACK_IMPORTED_MODULE_0__.CSSNavigation));



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/selectorPrinting.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/selectorPrinting.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Element": () => /* binding */ Element,
/* harmony export */   "RootElement": () => /* binding */ RootElement,
/* harmony export */   "LabelElement": () => /* binding */ LabelElement,
/* harmony export */   "toElement": () => /* binding */ toElement,
/* harmony export */   "SelectorPrinting": () => /* binding */ SelectorPrinting,
/* harmony export */   "selectorToElement": () => /* binding */ selectorToElement
/* harmony export */ });
/* harmony import */ var _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssNodes.js");
/* harmony import */ var _parser_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssScanner.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssScanner.js");
/* harmony import */ var _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../fillers/vscode-nls.js */ "./node_modules/monaco-editor/esm/vs/language/css/fillers/vscode-nls.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var localize = _fillers_vscode_nls_js__WEBPACK_IMPORTED_MODULE_2__.loadMessageBundle();
var Element = /** @class */ (function () {
    function Element() {
        this.parent = null;
        this.children = null;
        this.attributes = null;
    }
    Element.prototype.findAttribute = function (name) {
        if (this.attributes) {
            for (var _i = 0, _a = this.attributes; _i < _a.length; _i++) {
                var attribute = _a[_i];
                if (attribute.name === name) {
                    return attribute.value;
                }
            }
        }
        return null;
    };
    Element.prototype.addChild = function (child) {
        if (child instanceof Element) {
            child.parent = this;
        }
        if (!this.children) {
            this.children = [];
        }
        this.children.push(child);
    };
    Element.prototype.append = function (text) {
        if (this.attributes) {
            var last = this.attributes[this.attributes.length - 1];
            last.value = last.value + text;
        }
    };
    Element.prototype.prepend = function (text) {
        if (this.attributes) {
            var first = this.attributes[0];
            first.value = text + first.value;
        }
    };
    Element.prototype.findRoot = function () {
        var curr = this;
        while (curr.parent && !(curr.parent instanceof RootElement)) {
            curr = curr.parent;
        }
        return curr;
    };
    Element.prototype.removeChild = function (child) {
        if (this.children) {
            var index = this.children.indexOf(child);
            if (index !== -1) {
                this.children.splice(index, 1);
                return true;
            }
        }
        return false;
    };
    Element.prototype.addAttr = function (name, value) {
        if (!this.attributes) {
            this.attributes = [];
        }
        for (var _i = 0, _a = this.attributes; _i < _a.length; _i++) {
            var attribute = _a[_i];
            if (attribute.name === name) {
                attribute.value += ' ' + value;
                return;
            }
        }
        this.attributes.push({ name: name, value: value });
    };
    Element.prototype.clone = function (cloneChildren) {
        if (cloneChildren === void 0) { cloneChildren = true; }
        var elem = new Element();
        if (this.attributes) {
            elem.attributes = [];
            for (var _i = 0, _a = this.attributes; _i < _a.length; _i++) {
                var attribute = _a[_i];
                elem.addAttr(attribute.name, attribute.value);
            }
        }
        if (cloneChildren && this.children) {
            elem.children = [];
            for (var index = 0; index < this.children.length; index++) {
                elem.addChild(this.children[index].clone());
            }
        }
        return elem;
    };
    Element.prototype.cloneWithParent = function () {
        var clone = this.clone(false);
        if (this.parent && !(this.parent instanceof RootElement)) {
            var parentClone = this.parent.cloneWithParent();
            parentClone.addChild(clone);
        }
        return clone;
    };
    return Element;
}());

var RootElement = /** @class */ (function (_super) {
    __extends(RootElement, _super);
    function RootElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return RootElement;
}(Element));

var LabelElement = /** @class */ (function (_super) {
    __extends(LabelElement, _super);
    function LabelElement(label) {
        var _this = _super.call(this) || this;
        _this.addAttr('name', label);
        return _this;
    }
    return LabelElement;
}(Element));

var MarkedStringPrinter = /** @class */ (function () {
    function MarkedStringPrinter(quote) {
        this.quote = quote;
        this.result = [];
        // empty
    }
    MarkedStringPrinter.prototype.print = function (element) {
        this.result = [];
        if (element instanceof RootElement) {
            if (element.children) {
                this.doPrint(element.children, 0);
            }
        }
        else {
            this.doPrint([element], 0);
        }
        var value = this.result.join('\n');
        return [{ language: 'html', value: value }];
    };
    MarkedStringPrinter.prototype.doPrint = function (elements, indent) {
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
            var element = elements_1[_i];
            this.doPrintElement(element, indent);
            if (element.children) {
                this.doPrint(element.children, indent + 1);
            }
        }
    };
    MarkedStringPrinter.prototype.writeLine = function (level, content) {
        var indent = new Array(level + 1).join('  ');
        this.result.push(indent + content);
    };
    MarkedStringPrinter.prototype.doPrintElement = function (element, indent) {
        var name = element.findAttribute('name');
        // special case: a simple label
        if (element instanceof LabelElement || name === '\u2026') {
            this.writeLine(indent, name);
            return;
        }
        // the real deal
        var content = ['<'];
        // element name
        if (name) {
            content.push(name);
        }
        else {
            content.push('element');
        }
        // attributes
        if (element.attributes) {
            for (var _i = 0, _a = element.attributes; _i < _a.length; _i++) {
                var attr = _a[_i];
                if (attr.name !== 'name') {
                    content.push(' ');
                    content.push(attr.name);
                    var value = attr.value;
                    if (value) {
                        content.push('=');
                        content.push(quotes.ensure(value, this.quote));
                    }
                }
            }
        }
        content.push('>');
        this.writeLine(indent, content.join(''));
    };
    return MarkedStringPrinter;
}());
var quotes;
(function (quotes) {
    function ensure(value, which) {
        return which + remove(value) + which;
    }
    quotes.ensure = ensure;
    function remove(value) {
        var match = value.match(/^['"](.*)["']$/);
        if (match) {
            return match[1];
        }
        return value;
    }
    quotes.remove = remove;
})(quotes || (quotes = {}));
var Specificity = /** @class */ (function () {
    function Specificity() {
        /** Count of identifiers (e.g., `#app`) */
        this.id = 0;
        /** Count of attributes (`[type="number"]`), classes (`.container-fluid`), and pseudo-classes (`:hover`) */
        this.attr = 0;
        /** Count of tag names (`div`), and pseudo-elements (`::before`) */
        this.tag = 0;
    }
    return Specificity;
}());
function toElement(node, parentElement) {
    var result = new Element();
    for (var _i = 0, _a = node.getChildren(); _i < _a.length; _i++) {
        var child = _a[_i];
        switch (child.type) {
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinator:
                if (parentElement) {
                    var segments = child.getText().split('&');
                    if (segments.length === 1) {
                        // should not happen
                        result.addAttr('name', segments[0]);
                        break;
                    }
                    result = parentElement.cloneWithParent();
                    if (segments[0]) {
                        var root = result.findRoot();
                        root.prepend(segments[0]);
                    }
                    for (var i = 1; i < segments.length; i++) {
                        if (i > 1) {
                            var clone = parentElement.cloneWithParent();
                            result.addChild(clone.findRoot());
                            result = clone;
                        }
                        result.append(segments[i]);
                    }
                }
                break;
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorPlaceholder:
                if (child.matches('@at-root')) {
                    return result;
                }
            // fall through
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.ElementNameSelector:
                var text = child.getText();
                result.addAttr('name', text === '*' ? 'element' : unescape(text));
                break;
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.ClassSelector:
                result.addAttr('class', unescape(child.getText().substring(1)));
                break;
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.IdentifierSelector:
                result.addAttr('id', unescape(child.getText().substring(1)));
                break;
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.MixinDeclaration:
                result.addAttr('class', child.getName());
                break;
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.PseudoSelector:
                result.addAttr(unescape(child.getText()), '');
                break;
            case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.AttributeSelector:
                var selector = child;
                var identifier = selector.getIdentifier();
                if (identifier) {
                    var expression = selector.getValue();
                    var operator = selector.getOperator();
                    var value = void 0;
                    if (expression && operator) {
                        switch (unescape(operator.getText())) {
                            case '|=':
                                // excatly or followed by -words
                                value = quotes.remove(unescape(expression.getText())) + "-\u2026";
                                break;
                            case '^=':
                                // prefix
                                value = quotes.remove(unescape(expression.getText())) + "\u2026";
                                break;
                            case '$=':
                                // suffix
                                value = "\u2026" + quotes.remove(unescape(expression.getText()));
                                break;
                            case '~=':
                                // one of a list of words
                                value = " \u2026 " + quotes.remove(unescape(expression.getText())) + " \u2026 ";
                                break;
                            case '*=':
                                // substring
                                value = "\u2026" + quotes.remove(unescape(expression.getText())) + "\u2026";
                                break;
                            default:
                                value = quotes.remove(unescape(expression.getText()));
                                break;
                        }
                    }
                    result.addAttr(unescape(identifier.getText()), value);
                }
                break;
        }
    }
    return result;
}
function unescape(content) {
    var scanner = new _parser_cssScanner_js__WEBPACK_IMPORTED_MODULE_1__.Scanner();
    scanner.setSource(content);
    var token = scanner.scanUnquotedString();
    if (token) {
        return token.text;
    }
    return content;
}
var SelectorPrinting = /** @class */ (function () {
    function SelectorPrinting(cssDataManager) {
        this.cssDataManager = cssDataManager;
    }
    SelectorPrinting.prototype.selectorToMarkedString = function (node) {
        var root = selectorToElement(node);
        if (root) {
            var markedStrings = new MarkedStringPrinter('"').print(root);
            markedStrings.push(this.selectorToSpecificityMarkedString(node));
            return markedStrings;
        }
        else {
            return [];
        }
    };
    SelectorPrinting.prototype.simpleSelectorToMarkedString = function (node) {
        var element = toElement(node);
        var markedStrings = new MarkedStringPrinter('"').print(element);
        markedStrings.push(this.selectorToSpecificityMarkedString(node));
        return markedStrings;
    };
    SelectorPrinting.prototype.isPseudoElementIdentifier = function (text) {
        var match = text.match(/^::?([\w-]+)/);
        if (!match) {
            return false;
        }
        return !!this.cssDataManager.getPseudoElement("::" + match[1]);
    };
    SelectorPrinting.prototype.selectorToSpecificityMarkedString = function (node) {
        var _this = this;
        //https://www.w3.org/TR/selectors-3/#specificity
        var calculateScore = function (node) {
            for (var _i = 0, _a = node.getChildren(); _i < _a.length; _i++) {
                var element = _a[_i];
                switch (element.type) {
                    case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.IdentifierSelector:
                        specificity.id++;
                        break;
                    case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.ClassSelector:
                    case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.AttributeSelector:
                        specificity.attr++;
                        break;
                    case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.ElementNameSelector:
                        //ignore universal selector
                        if (element.matches("*")) {
                            break;
                        }
                        specificity.tag++;
                        break;
                    case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.PseudoSelector:
                        var text = element.getText();
                        if (_this.isPseudoElementIdentifier(text)) {
                            specificity.tag++; // pseudo element
                        }
                        else {
                            //ignore psuedo class NOT
                            if (text.match(/^:not/i)) {
                                break;
                            }
                            specificity.attr++; //pseudo class
                        }
                        break;
                }
                if (element.getChildren().length > 0) {
                    calculateScore(element);
                }
            }
        };
        var specificity = new Specificity();
        calculateScore(node);
        return localize('specificity', "[Selector Specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity): ({0}, {1}, {2})", specificity.id, specificity.attr, specificity.tag);
    };
    return SelectorPrinting;
}());

var SelectorElementBuilder = /** @class */ (function () {
    function SelectorElementBuilder(element) {
        this.prev = null;
        this.element = element;
    }
    SelectorElementBuilder.prototype.processSelector = function (selector) {
        var parentElement = null;
        if (!(this.element instanceof RootElement)) {
            if (selector.getChildren().some(function (c) { return c.hasChildren() && c.getChild(0).type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinator; })) {
                var curr = this.element.findRoot();
                if (curr.parent instanceof RootElement) {
                    parentElement = this.element;
                    this.element = curr.parent;
                    this.element.removeChild(curr);
                    this.prev = null;
                }
            }
        }
        for (var _i = 0, _a = selector.getChildren(); _i < _a.length; _i++) {
            var selectorChild = _a[_i];
            if (selectorChild instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector) {
                if (this.prev instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector) {
                    var labelElement = new LabelElement('\u2026');
                    this.element.addChild(labelElement);
                    this.element = labelElement;
                }
                else if (this.prev && (this.prev.matches('+') || this.prev.matches('~')) && this.element.parent) {
                    this.element = this.element.parent;
                }
                if (this.prev && this.prev.matches('~')) {
                    this.element.addChild(toElement(selectorChild));
                    this.element.addChild(new LabelElement('\u22EE'));
                }
                var thisElement = toElement(selectorChild, parentElement);
                var root = thisElement.findRoot();
                this.element.addChild(root);
                this.element = thisElement;
            }
            if (selectorChild instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector ||
                selectorChild.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinatorParent ||
                selectorChild.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinatorShadowPiercingDescendant ||
                selectorChild.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinatorSibling ||
                selectorChild.type === _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinatorAllSiblings) {
                this.prev = selectorChild;
            }
        }
    };
    return SelectorElementBuilder;
}());
function isNewSelectorContext(node) {
    switch (node.type) {
        case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.MixinDeclaration:
        case _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.Stylesheet:
            return true;
    }
    return false;
}
function selectorToElement(node) {
    if (node.matches('@at-root')) {
        return null;
    }
    var root = new RootElement();
    var parentRuleSets = [];
    var ruleSet = node.getParent();
    if (ruleSet instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
        var parent = ruleSet.getParent(); // parent of the selector's ruleset
        while (parent && !isNewSelectorContext(parent)) {
            if (parent instanceof _parser_cssNodes_js__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
                if (parent.getSelectors().matches('@at-root')) {
                    break;
                }
                parentRuleSets.push(parent);
            }
            parent = parent.getParent();
        }
    }
    var builder = new SelectorElementBuilder(root);
    for (var i = parentRuleSets.length - 1; i >= 0; i--) {
        var selector = parentRuleSets[i].getSelectors().getChild(0);
        if (selector) {
            builder.processSelector(selector);
        }
    }
    builder.processSelector(node);
    return root;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/arrays.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/arrays.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "findFirst": () => /* binding */ findFirst,
/* harmony export */   "includes": () => /* binding */ includes,
/* harmony export */   "union": () => /* binding */ union
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * Takes a sorted array and a function p. The array is sorted in such a way that all elements where p(x) is false
 * are located before all elements where p(x) is true.
 * @returns the least x for which p(x) is true or array.length if no element fullfills the given function.
 */
function findFirst(array, p) {
    var low = 0, high = array.length;
    if (high === 0) {
        return 0; // no children
    }
    while (low < high) {
        var mid = Math.floor((low + high) / 2);
        if (p(array[mid])) {
            high = mid;
        }
        else {
            low = mid + 1;
        }
    }
    return low;
}
function includes(array, item) {
    return array.indexOf(item) !== -1;
}
function union() {
    var arrays = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arrays[_i] = arguments[_i];
    }
    var result = [];
    for (var _a = 0, arrays_1 = arrays; _a < arrays_1.length; _a++) {
        var array = arrays_1[_a];
        for (var _b = 0, array_1 = array; _b < array_1.length; _b++) {
            var item = array_1[_b];
            if (!includes(result, item)) {
                result.push(item);
            }
        }
    }
    return result;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/objects.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/objects.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "values": () => /* binding */ values,
/* harmony export */   "isDefined": () => /* binding */ isDefined
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

function values(obj) {
    return Object.keys(obj).map(function (key) { return obj[key]; });
}
function isDefined(obj) {
    return typeof obj !== 'undefined';
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/resources.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/resources.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isAbsolutePath": () => /* binding */ isAbsolutePath,
/* harmony export */   "dirname": () => /* binding */ dirname,
/* harmony export */   "basename": () => /* binding */ basename,
/* harmony export */   "extname": () => /* binding */ extname,
/* harmony export */   "resolvePath": () => /* binding */ resolvePath,
/* harmony export */   "normalizePath": () => /* binding */ normalizePath,
/* harmony export */   "joinPath": () => /* binding */ joinPath
/* harmony export */ });
/* harmony import */ var _vscode_uri_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../vscode-uri/index.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-uri/index.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var Slash = '/'.charCodeAt(0);
var Dot = '.'.charCodeAt(0);
function isAbsolutePath(path) {
    return path.charCodeAt(0) === Slash;
}
function dirname(uri) {
    var lastIndexOfSlash = uri.lastIndexOf('/');
    return lastIndexOfSlash !== -1 ? uri.substr(0, lastIndexOfSlash) : '';
}
function basename(uri) {
    var lastIndexOfSlash = uri.lastIndexOf('/');
    return uri.substr(lastIndexOfSlash + 1);
}
function extname(uri) {
    for (var i = uri.length - 1; i >= 0; i--) {
        var ch = uri.charCodeAt(i);
        if (ch === Dot) {
            if (i > 0 && uri.charCodeAt(i - 1) !== Slash) {
                return uri.substr(i);
            }
            else {
                break;
            }
        }
        else if (ch === Slash) {
            break;
        }
    }
    return '';
}
function resolvePath(uriString, path) {
    if (isAbsolutePath(path)) {
        var uri = _vscode_uri_index_js__WEBPACK_IMPORTED_MODULE_0__.URI.parse(uriString);
        var parts = path.split('/');
        return uri.with({ path: normalizePath(parts) }).toString();
    }
    return joinPath(uriString, path);
}
function normalizePath(parts) {
    var newParts = [];
    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
        var part = parts_1[_i];
        if (part.length === 0 || part.length === 1 && part.charCodeAt(0) === Dot) {
            // ignore
        }
        else if (part.length === 2 && part.charCodeAt(0) === Dot && part.charCodeAt(1) === Dot) {
            newParts.pop();
        }
        else {
            newParts.push(part);
        }
    }
    if (parts.length > 1 && parts[parts.length - 1].length === 0) {
        newParts.push('');
    }
    var res = newParts.join('/');
    if (parts[0].length === 0) {
        res = '/' + res;
    }
    return res;
}
function joinPath(uriString) {
    var paths = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        paths[_i - 1] = arguments[_i];
    }
    var uri = _vscode_uri_index_js__WEBPACK_IMPORTED_MODULE_0__.URI.parse(uriString);
    var parts = uri.path.split('/');
    for (var _a = 0, paths_1 = paths; _a < paths_1.length; _a++) {
        var path = paths_1[_a];
        parts.push.apply(parts, path.split('/'));
    }
    return uri.with({ path: normalizePath(parts) }).toString();
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/strings.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/strings.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "startsWith": () => /* binding */ startsWith,
/* harmony export */   "endsWith": () => /* binding */ endsWith,
/* harmony export */   "difference": () => /* binding */ difference,
/* harmony export */   "getLimitedString": () => /* binding */ getLimitedString,
/* harmony export */   "trim": () => /* binding */ trim
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

function startsWith(haystack, needle) {
    if (haystack.length < needle.length) {
        return false;
    }
    for (var i = 0; i < needle.length; i++) {
        if (haystack[i] !== needle[i]) {
            return false;
        }
    }
    return true;
}
/**
 * Determines if haystack ends with needle.
 */
function endsWith(haystack, needle) {
    var diff = haystack.length - needle.length;
    if (diff > 0) {
        return haystack.lastIndexOf(needle) === diff;
    }
    else if (diff === 0) {
        return haystack === needle;
    }
    else {
        return false;
    }
}
/**
 * Computes the difference score for two strings. More similar strings have a higher score.
 * We use largest common subsequence dynamic programming approach but penalize in the end for length differences.
 * Strings that have a large length difference will get a bad default score 0.
 * Complexity - both time and space O(first.length * second.length)
 * Dynamic programming LCS computation http://en.wikipedia.org/wiki/Longest_common_subsequence_problem
 *
 * @param first a string
 * @param second a string
 */
function difference(first, second, maxLenDelta) {
    if (maxLenDelta === void 0) { maxLenDelta = 4; }
    var lengthDifference = Math.abs(first.length - second.length);
    // We only compute score if length of the currentWord and length of entry.name are similar.
    if (lengthDifference > maxLenDelta) {
        return 0;
    }
    // Initialize LCS (largest common subsequence) matrix.
    var LCS = [];
    var zeroArray = [];
    var i, j;
    for (i = 0; i < second.length + 1; ++i) {
        zeroArray.push(0);
    }
    for (i = 0; i < first.length + 1; ++i) {
        LCS.push(zeroArray);
    }
    for (i = 1; i < first.length + 1; ++i) {
        for (j = 1; j < second.length + 1; ++j) {
            if (first[i - 1] === second[j - 1]) {
                LCS[i][j] = LCS[i - 1][j - 1] + 1;
            }
            else {
                LCS[i][j] = Math.max(LCS[i - 1][j], LCS[i][j - 1]);
            }
        }
    }
    return LCS[first.length][second.length] - Math.sqrt(lengthDifference);
}
/**
 * Limit of string length.
 */
function getLimitedString(str, ellipsis) {
    if (ellipsis === void 0) { ellipsis = true; }
    if (!str) {
        return '';
    }
    if (str.length < 140) {
        return str;
    }
    return str.slice(0, 140) + (ellipsis ? '\u2026' : '');
}
/**
 * Limit of string length.
 */
function trim(str, regexp) {
    var m = regexp.exec(str);
    if (m && m[0].length) {
        return str.substr(0, str.length - m[0].length);
    }
    return str;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-languageserver-textdocument/lib/esm/main.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-languageserver-textdocument/lib/esm/main.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextDocument": () => /* binding */ TextDocument
/* harmony export */ });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

var FullTextDocument = /** @class */ (function () {
    function FullTextDocument(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    Object.defineProperty(FullTextDocument.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "languageId", {
        get: function () {
            return this._languageId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: true,
        configurable: true
    });
    FullTextDocument.prototype.getText = function (range) {
        if (range) {
            var start = this.offsetAt(range.start);
            var end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    };
    FullTextDocument.prototype.update = function (changes, version) {
        for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {
            var change = changes_1[_i];
            if (FullTextDocument.isIncremental(change)) {
                // makes sure start is before end
                var range = getWellformedRange(change.range);
                // update content
                var startOffset = this.offsetAt(range.start);
                var endOffset = this.offsetAt(range.end);
                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
                // update the offsets
                var startLine = Math.max(range.start.line, 0);
                var endLine = Math.max(range.end.line, 0);
                var lineOffsets = this._lineOffsets;
                var addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
                if (endLine - startLine === addedLineOffsets.length) {
                    for (var i = 0, len = addedLineOffsets.length; i < len; i++) {
                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];
                    }
                }
                else {
                    if (addedLineOffsets.length < 10000) {
                        lineOffsets.splice.apply(lineOffsets, [startLine + 1, endLine - startLine].concat(addedLineOffsets));
                    }
                    else { // avoid too many arguments for splice
                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
                    }
                }
                var diff = change.text.length - (endOffset - startOffset);
                if (diff !== 0) {
                    for (var i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {
                        lineOffsets[i] = lineOffsets[i] + diff;
                    }
                }
            }
            else if (FullTextDocument.isFull(change)) {
                this._content = change.text;
                this._lineOffsets = undefined;
            }
            else {
                throw new Error('Unknown change event received');
            }
        }
        this._version = version;
    };
    FullTextDocument.prototype.getLineOffsets = function () {
        if (this._lineOffsets === undefined) {
            this._lineOffsets = computeLineOffsets(this._content, true);
        }
        return this._lineOffsets;
    };
    FullTextDocument.prototype.positionAt = function (offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0, high = lineOffsets.length;
        if (high === 0) {
            return { line: 0, character: offset };
        }
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        var line = low - 1;
        return { line: line, character: offset - lineOffsets[line] };
    };
    FullTextDocument.prototype.offsetAt = function (position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument.prototype, "lineCount", {
        get: function () {
            return this.getLineOffsets().length;
        },
        enumerable: true,
        configurable: true
    });
    FullTextDocument.isIncremental = function (event) {
        var candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range !== undefined &&
            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
    };
    FullTextDocument.isFull = function (event) {
        var candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
    };
    return FullTextDocument;
}());
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new text document.
     *
     * @param uri The document's uri.
     * @param languageId  The document's language Id.
     * @param version The document's initial version number.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Updates a TextDocument by modifing its content.
     *
     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.
     * @param changes the changes to apply to the document.
     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.
     *
     */
    function update(document, changes, version) {
        if (document instanceof FullTextDocument) {
            document.update(changes, version);
            return document;
        }
        else {
            throw new Error('TextDocument.update: document must be created by TextDocument.create');
        }
    }
    TextDocument.update = update;
    function applyEdits(document, edits) {
        var text = document.getText();
        var sortedEdits = mergeSort(edits.map(getWellformedEdit), function (a, b) {
            var diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        var lastModifiedOffset = 0;
        var spans = [];
        for (var _i = 0, sortedEdits_1 = sortedEdits; _i < sortedEdits_1.length; _i++) {
            var e = sortedEdits_1[_i];
            var startOffset = document.offsetAt(e.range.start);
            if (startOffset < lastModifiedOffset) {
                throw new Error('Overlapping edit');
            }
            else if (startOffset > lastModifiedOffset) {
                spans.push(text.substring(lastModifiedOffset, startOffset));
            }
            if (e.newText.length) {
                spans.push(e.newText);
            }
            lastModifiedOffset = document.offsetAt(e.range.end);
        }
        spans.push(text.substr(lastModifiedOffset));
        return spans.join('');
    }
    TextDocument.applyEdits = applyEdits;
})(TextDocument || (TextDocument = {}));
function mergeSort(data, compare) {
    if (data.length <= 1) {
        // sorted
        return data;
    }
    var p = (data.length / 2) | 0;
    var left = data.slice(0, p);
    var right = data.slice(p);
    mergeSort(left, compare);
    mergeSort(right, compare);
    var leftIdx = 0;
    var rightIdx = 0;
    var i = 0;
    while (leftIdx < left.length && rightIdx < right.length) {
        var ret = compare(left[leftIdx], right[rightIdx]);
        if (ret <= 0) {
            // smaller_equal -> take left to preserve order
            data[i++] = left[leftIdx++];
        }
        else {
            // greater -> take right
            data[i++] = right[rightIdx++];
        }
    }
    while (leftIdx < left.length) {
        data[i++] = left[leftIdx++];
    }
    while (rightIdx < right.length) {
        data[i++] = right[rightIdx++];
    }
    return data;
}
function computeLineOffsets(text, isAtLineStart, textOffset) {
    if (textOffset === void 0) { textOffset = 0; }
    var result = isAtLineStart ? [textOffset] : [];
    for (var i = 0; i < text.length; i++) {
        var ch = text.charCodeAt(i);
        if (ch === 13 /* CarriageReturn */ || ch === 10 /* LineFeed */) {
            if (ch === 13 /* CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* LineFeed */) {
                i++;
            }
            result.push(textOffset + i + 1);
        }
    }
    return result;
}
function getWellformedRange(range) {
    var start = range.start;
    var end = range.end;
    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {
        return { start: end, end: start };
    }
    return range;
}
function getWellformedEdit(textEdit) {
    var range = getWellformedRange(textEdit.range);
    if (range !== textEdit.range) {
        return { newText: textEdit.newText, range: range };
    }
    return textEdit;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-uri/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-uri/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "URI": () => /* binding */ URI,
/* harmony export */   "uriToFsPath": () => /* binding */ uriToFsPath
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var _a;
var isWindows;
if (typeof process === 'object') {
    isWindows = process.platform === 'win32';
}
else if (typeof navigator === 'object') {
    var userAgent = navigator.userAgent;
    isWindows = userAgent.indexOf('Windows') >= 0;
}
function isHighSurrogate(charCode) {
    return (0xD800 <= charCode && charCode <= 0xDBFF);
}
function isLowSurrogate(charCode) {
    return (0xDC00 <= charCode && charCode <= 0xDFFF);
}
function isLowerAsciiHex(code) {
    return code >= 97 /* a */ && code <= 102 /* f */;
}
function isLowerAsciiLetter(code) {
    return code >= 97 /* a */ && code <= 122 /* z */;
}
function isUpperAsciiLetter(code) {
    return code >= 65 /* A */ && code <= 90 /* Z */;
}
function isAsciiLetter(code) {
    return isLowerAsciiLetter(code) || isUpperAsciiLetter(code);
}
//#endregion
var _schemePattern = /^\w[\w\d+.-]*$/;
var _singleSlashStart = /^\//;
var _doubleSlashStart = /^\/\//;
function _validateUri(ret, _strict) {
    // scheme, must be set
    if (!ret.scheme && _strict) {
        throw new Error("[UriError]: Scheme is missing: {scheme: \"\", authority: \"" + ret.authority + "\", path: \"" + ret.path + "\", query: \"" + ret.query + "\", fragment: \"" + ret.fragment + "\"}");
    }
    // scheme, https://tools.ietf.org/html/rfc3986#section-3.1
    // ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
    if (ret.scheme && !_schemePattern.test(ret.scheme)) {
        throw new Error('[UriError]: Scheme contains illegal characters.');
    }
    // path, http://tools.ietf.org/html/rfc3986#section-3.3
    // If a URI contains an authority component, then the path component
    // must either be empty or begin with a slash ("/") character.  If a URI
    // does not contain an authority component, then the path cannot begin
    // with two slash characters ("//").
    if (ret.path) {
        if (ret.authority) {
            if (!_singleSlashStart.test(ret.path)) {
                throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
            }
        }
        else {
            if (_doubleSlashStart.test(ret.path)) {
                throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
            }
        }
    }
}
// for a while we allowed uris *without* schemes and this is the migration
// for them, e.g. an uri without scheme and without strict-mode warns and falls
// back to the file-scheme. that should cause the least carnage and still be a
// clear warning
function _schemeFix(scheme, _strict) {
    if (!scheme && !_strict) {
        return 'file';
    }
    return scheme;
}
// implements a bit of https://tools.ietf.org/html/rfc3986#section-5
function _referenceResolution(scheme, path) {
    // the slash-character is our 'default base' as we don't
    // support constructing URIs relative to other URIs. This
    // also means that we alter and potentially break paths.
    // see https://tools.ietf.org/html/rfc3986#section-5.1.4
    switch (scheme) {
        case 'https':
        case 'http':
        case 'file':
            if (!path) {
                path = _slash;
            }
            else if (path[0] !== _slash) {
                path = _slash + path;
            }
            break;
    }
    return path;
}
var _empty = '';
var _slash = '/';
var _regexp = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
/**
 * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.
 * This class is a simple parser which creates the basic component parts
 * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation
 * and encoding.
 *
 * ```txt
 *       foo://example.com:8042/over/there?name=ferret#nose
 *       \_/   \______________/\_________/ \_________/ \__/
 *        |           |            |            |        |
 *     scheme     authority       path        query   fragment
 *        |   _____________________|__
 *       / \ /                        \
 *       urn:example:animal:ferret:nose
 * ```
 */
var URI = /** @class */ (function () {
    /**
     * @internal
     */
    function URI(schemeOrData, authority, path, query, fragment, _strict) {
        if (_strict === void 0) { _strict = false; }
        if (typeof schemeOrData === 'object') {
            this.scheme = schemeOrData.scheme || _empty;
            this.authority = schemeOrData.authority || _empty;
            this.path = schemeOrData.path || _empty;
            this.query = schemeOrData.query || _empty;
            this.fragment = schemeOrData.fragment || _empty;
            // no validation because it's this URI
            // that creates uri components.
            // _validateUri(this);
        }
        else {
            this.scheme = _schemeFix(schemeOrData, _strict);
            this.authority = authority || _empty;
            this.path = _referenceResolution(this.scheme, path || _empty);
            this.query = query || _empty;
            this.fragment = fragment || _empty;
            _validateUri(this, _strict);
        }
    }
    URI.isUri = function (thing) {
        if (thing instanceof URI) {
            return true;
        }
        if (!thing) {
            return false;
        }
        return typeof thing.authority === 'string'
            && typeof thing.fragment === 'string'
            && typeof thing.path === 'string'
            && typeof thing.query === 'string'
            && typeof thing.scheme === 'string'
            && typeof thing.fsPath === 'function'
            && typeof thing.with === 'function'
            && typeof thing.toString === 'function';
    };
    Object.defineProperty(URI.prototype, "fsPath", {
        // ---- filesystem path -----------------------
        /**
         * Returns a string representing the corresponding file system path of this URI.
         * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the
         * platform specific path separator.
         *
         * * Will *not* validate the path for invalid characters and semantics.
         * * Will *not* look at the scheme of this URI.
         * * The result shall *not* be used for display purposes but for accessing a file on disk.
         *
         *
         * The *difference* to `URI#path` is the use of the platform specific separator and the handling
         * of UNC paths. See the below sample of a file-uri with an authority (UNC path).
         *
         * ```ts
            const u = URI.parse('file://server/c$/folder/file.txt')
            u.authority === 'server'
            u.path === '/shares/c$/file.txt'
            u.fsPath === '\\server\c$\folder\file.txt'
        ```
         *
         * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,
         * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working
         * with URIs that represent files on disk (`file` scheme).
         */
        get: function () {
            // if (this.scheme !== 'file') {
            // 	console.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);
            // }
            return uriToFsPath(this, false);
        },
        enumerable: true,
        configurable: true
    });
    // ---- modify to new -------------------------
    URI.prototype.with = function (change) {
        if (!change) {
            return this;
        }
        var scheme = change.scheme, authority = change.authority, path = change.path, query = change.query, fragment = change.fragment;
        if (scheme === undefined) {
            scheme = this.scheme;
        }
        else if (scheme === null) {
            scheme = _empty;
        }
        if (authority === undefined) {
            authority = this.authority;
        }
        else if (authority === null) {
            authority = _empty;
        }
        if (path === undefined) {
            path = this.path;
        }
        else if (path === null) {
            path = _empty;
        }
        if (query === undefined) {
            query = this.query;
        }
        else if (query === null) {
            query = _empty;
        }
        if (fragment === undefined) {
            fragment = this.fragment;
        }
        else if (fragment === null) {
            fragment = _empty;
        }
        if (scheme === this.scheme
            && authority === this.authority
            && path === this.path
            && query === this.query
            && fragment === this.fragment) {
            return this;
        }
        return new _URI(scheme, authority, path, query, fragment);
    };
    // ---- parse & validate ------------------------
    /**
     * Creates a new URI from a string, e.g. `http://www.msft.com/some/path`,
     * `file:///usr/home`, or `scheme:with/path`.
     *
     * @param value A string which represents an URI (see `URI#toString`).
     */
    URI.parse = function (value, _strict) {
        if (_strict === void 0) { _strict = false; }
        var match = _regexp.exec(value);
        if (!match) {
            return new _URI(_empty, _empty, _empty, _empty, _empty);
        }
        return new _URI(match[2] || _empty, percentDecode(match[4] || _empty), percentDecode(match[5] || _empty), percentDecode(match[7] || _empty), percentDecode(match[9] || _empty), _strict);
    };
    /**
     * Creates a new URI from a file system path, e.g. `c:\my\files`,
     * `/usr/home`, or `\\server\share\some\path`.
     *
     * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument
     * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**
     * `URI.parse('file://' + path)` because the path might contain characters that are
     * interpreted (# and ?). See the following sample:
     * ```ts
    const good = URI.file('/coding/c#/project1');
    good.scheme === 'file';
    good.path === '/coding/c#/project1';
    good.fragment === '';
    const bad = URI.parse('file://' + '/coding/c#/project1');
    bad.scheme === 'file';
    bad.path === '/coding/c'; // path is now broken
    bad.fragment === '/project1';
    ```
     *
     * @param path A file system path (see `URI#fsPath`)
     */
    URI.file = function (path) {
        var authority = _empty;
        // normalize to fwd-slashes on windows,
        // on other systems bwd-slashes are valid
        // filename character, eg /f\oo/ba\r.txt
        if (isWindows) {
            path = path.replace(/\\/g, _slash);
        }
        // check for authority as used in UNC shares
        // or use the path as given
        if (path[0] === _slash && path[1] === _slash) {
            var idx = path.indexOf(_slash, 2);
            if (idx === -1) {
                authority = path.substring(2);
                path = _slash;
            }
            else {
                authority = path.substring(2, idx);
                path = path.substring(idx) || _slash;
            }
        }
        return new _URI('file', authority, path, _empty, _empty);
    };
    URI.from = function (components) {
        return new _URI(components.scheme, components.authority, components.path, components.query, components.fragment);
    };
    // /**
    //  * Join a URI path with path fragments and normalizes the resulting path.
    //  *
    //  * @param uri The input URI.
    //  * @param pathFragment The path fragment to add to the URI path.
    //  * @returns The resulting URI.
    //  */
    // static joinPath(uri: URI, ...pathFragment: string[]): URI {
    // 	if (!uri.path) {
    // 		throw new Error(`[UriError]: cannot call joinPaths on URI without path`);
    // 	}
    // 	let newPath: string;
    // 	if (isWindows && uri.scheme === 'file') {
    // 		newPath = URI.file(paths.win32.join(uriToFsPath(uri, true), ...pathFragment)).path;
    // 	} else {
    // 		newPath = paths.posix.join(uri.path, ...pathFragment);
    // 	}
    // 	return uri.with({ path: newPath });
    // }
    // ---- printing/externalize ---------------------------
    /**
     * Creates a string representation for this URI. It's guaranteed that calling
     * `URI.parse` with the result of this function creates an URI which is equal
     * to this URI.
     *
     * * The result shall *not* be used for display purposes but for externalization or transport.
     * * The result will be encoded using the percentage encoding and encoding happens mostly
     * ignore the scheme-specific encoding rules.
     *
     * @param skipEncoding Do not encode the result, default is `false`
     */
    URI.prototype.toString = function (skipEncoding) {
        if (skipEncoding === void 0) { skipEncoding = false; }
        return _asFormatted(this, skipEncoding);
    };
    URI.prototype.toJSON = function () {
        return this;
    };
    URI.revive = function (data) {
        if (!data) {
            return data;
        }
        else if (data instanceof URI) {
            return data;
        }
        else {
            var result = new _URI(data);
            result._formatted = data.external;
            result._fsPath = data._sep === _pathSepMarker ? data.fsPath : null;
            return result;
        }
    };
    return URI;
}());

var _pathSepMarker = isWindows ? 1 : undefined;
// eslint-disable-next-line @typescript-eslint/class-name-casing
var _URI = /** @class */ (function (_super) {
    __extends(_URI, _super);
    function _URI() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._formatted = null;
        _this._fsPath = null;
        return _this;
    }
    Object.defineProperty(_URI.prototype, "fsPath", {
        get: function () {
            if (!this._fsPath) {
                this._fsPath = uriToFsPath(this, false);
            }
            return this._fsPath;
        },
        enumerable: true,
        configurable: true
    });
    _URI.prototype.toString = function (skipEncoding) {
        if (skipEncoding === void 0) { skipEncoding = false; }
        if (!skipEncoding) {
            if (!this._formatted) {
                this._formatted = _asFormatted(this, false);
            }
            return this._formatted;
        }
        else {
            // we don't cache that
            return _asFormatted(this, true);
        }
    };
    _URI.prototype.toJSON = function () {
        var res = {
            $mid: 1
        };
        // cached state
        if (this._fsPath) {
            res.fsPath = this._fsPath;
            res._sep = _pathSepMarker;
        }
        if (this._formatted) {
            res.external = this._formatted;
        }
        // uri components
        if (this.path) {
            res.path = this.path;
        }
        if (this.scheme) {
            res.scheme = this.scheme;
        }
        if (this.authority) {
            res.authority = this.authority;
        }
        if (this.query) {
            res.query = this.query;
        }
        if (this.fragment) {
            res.fragment = this.fragment;
        }
        return res;
    };
    return _URI;
}(URI));
// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2
var encodeTable = (_a = {},
    _a[58 /* Colon */] = '%3A',
    _a[47 /* Slash */] = '%2F',
    _a[63 /* QuestionMark */] = '%3F',
    _a[35 /* Hash */] = '%23',
    _a[91 /* OpenSquareBracket */] = '%5B',
    _a[93 /* CloseSquareBracket */] = '%5D',
    _a[64 /* AtSign */] = '%40',
    _a[33 /* ExclamationMark */] = '%21',
    _a[36 /* DollarSign */] = '%24',
    _a[38 /* Ampersand */] = '%26',
    _a[39 /* SingleQuote */] = '%27',
    _a[40 /* OpenParen */] = '%28',
    _a[41 /* CloseParen */] = '%29',
    _a[42 /* Asterisk */] = '%2A',
    _a[43 /* Plus */] = '%2B',
    _a[44 /* Comma */] = '%2C',
    _a[59 /* Semicolon */] = '%3B',
    _a[61 /* Equals */] = '%3D',
    _a[32 /* Space */] = '%20',
    _a);
function encodeURIComponentFast(uriComponent, allowSlash) {
    var res = undefined;
    var nativeEncodePos = -1;
    for (var pos = 0; pos < uriComponent.length; pos++) {
        var code = uriComponent.charCodeAt(pos);
        // unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3
        if ((code >= 97 /* a */ && code <= 122 /* z */)
            || (code >= 65 /* A */ && code <= 90 /* Z */)
            || (code >= 48 /* Digit0 */ && code <= 57 /* Digit9 */)
            || code === 45 /* Dash */
            || code === 46 /* Period */
            || code === 95 /* Underline */
            || code === 126 /* Tilde */
            || (allowSlash && code === 47 /* Slash */)) {
            // check if we are delaying native encode
            if (nativeEncodePos !== -1) {
                res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));
                nativeEncodePos = -1;
            }
            // check if we write into a new string (by default we try to return the param)
            if (res !== undefined) {
                res += uriComponent.charAt(pos);
            }
        }
        else {
            // encoding needed, we need to allocate a new string
            if (res === undefined) {
                res = uriComponent.substr(0, pos);
            }
            // check with default table first
            var escaped = encodeTable[code];
            if (escaped !== undefined) {
                // check if we are delaying native encode
                if (nativeEncodePos !== -1) {
                    res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));
                    nativeEncodePos = -1;
                }
                // append escaped variant to result
                res += escaped;
            }
            else if (nativeEncodePos === -1) {
                // use native encode only when needed
                nativeEncodePos = pos;
            }
        }
    }
    if (nativeEncodePos !== -1) {
        res += encodeURIComponent(uriComponent.substring(nativeEncodePos));
    }
    return res !== undefined ? res : uriComponent;
}
function encodeURIComponentMinimal(path) {
    var res = undefined;
    for (var pos = 0; pos < path.length; pos++) {
        var code = path.charCodeAt(pos);
        if (code === 35 /* Hash */ || code === 63 /* QuestionMark */) {
            if (res === undefined) {
                res = path.substr(0, pos);
            }
            res += encodeTable[code];
        }
        else {
            if (res !== undefined) {
                res += path[pos];
            }
        }
    }
    return res !== undefined ? res : path;
}
/**
 * Compute `fsPath` for the given uri
 */
function uriToFsPath(uri, keepDriveLetterCasing) {
    var value;
    if (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {
        // unc path: file://shares/c$/far/boo
        value = "//" + uri.authority + uri.path;
    }
    else if (uri.path.charCodeAt(0) === 47 /* Slash */
        && (uri.path.charCodeAt(1) >= 65 /* A */ && uri.path.charCodeAt(1) <= 90 /* Z */ || uri.path.charCodeAt(1) >= 97 /* a */ && uri.path.charCodeAt(1) <= 122 /* z */)
        && uri.path.charCodeAt(2) === 58 /* Colon */) {
        if (!keepDriveLetterCasing) {
            // windows drive letter: file:///c:/far/boo
            value = uri.path[1].toLowerCase() + uri.path.substr(2);
        }
        else {
            value = uri.path.substr(1);
        }
    }
    else {
        // other path
        value = uri.path;
    }
    if (isWindows) {
        value = value.replace(/\//g, '\\');
    }
    return value;
}
/**
 * Create the external version of a uri
 */
function _asFormatted(uri, skipEncoding) {
    var encoder = !skipEncoding
        ? encodeURIComponentFast
        : encodeURIComponentMinimal;
    var res = '';
    var scheme = uri.scheme, authority = uri.authority, path = uri.path, query = uri.query, fragment = uri.fragment;
    if (scheme) {
        res += scheme;
        res += ':';
    }
    if (authority || scheme === 'file') {
        res += _slash;
        res += _slash;
    }
    if (authority) {
        var idx = authority.indexOf('@');
        if (idx !== -1) {
            // <user>@<auth>
            var userinfo = authority.substr(0, idx);
            authority = authority.substr(idx + 1);
            idx = userinfo.indexOf(':');
            if (idx === -1) {
                res += encoder(userinfo, false);
            }
            else {
                // <user>:<pass>@<auth>
                res += encoder(userinfo.substr(0, idx), false);
                res += ':';
                res += encoder(userinfo.substr(idx + 1), false);
            }
            res += '@';
        }
        authority = authority.toLowerCase();
        idx = authority.indexOf(':');
        if (idx === -1) {
            res += encoder(authority, false);
        }
        else {
            // <auth>:<port>
            res += encoder(authority.substr(0, idx), false);
            res += authority.substr(idx);
        }
    }
    if (path) {
        // lower-case windows drive letters in /C:/fff or C:/fff
        if (path.length >= 3 && path.charCodeAt(0) === 47 /* Slash */ && path.charCodeAt(2) === 58 /* Colon */) {
            var code = path.charCodeAt(1);
            if (code >= 65 /* A */ && code <= 90 /* Z */) {
                path = "/" + String.fromCharCode(code + 32) + ":" + path.substr(3); // "/c:".length === 3
            }
        }
        else if (path.length >= 2 && path.charCodeAt(1) === 58 /* Colon */) {
            var code = path.charCodeAt(0);
            if (code >= 65 /* A */ && code <= 90 /* Z */) {
                path = String.fromCharCode(code + 32) + ":" + path.substr(2); // "/c:".length === 3
            }
        }
        // encode the rest of the path
        res += encoder(path, true);
    }
    if (query) {
        res += '?';
        res += encoder(query, false);
    }
    if (fragment) {
        res += '#';
        res += !skipEncoding ? encodeURIComponentFast(fragment, false) : fragment;
    }
    return res;
}
// --- decode
function decodeURIComponentGraceful(str) {
    try {
        return decodeURIComponent(str);
    }
    catch (_a) {
        if (str.length > 3) {
            return str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));
        }
        else {
            return str;
        }
    }
}
var _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
function percentDecode(str) {
    if (!str.match(_rEncodedAsHex)) {
        return str;
    }
    return str.replace(_rEncodedAsHex, function (match) { return decodeURIComponentGraceful(match); });
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/cssMode.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/cssMode.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setupMode": () => /* binding */ setupMode
/* harmony export */ });
/* harmony import */ var _workerManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./workerManager.js */ "./node_modules/monaco-editor/esm/vs/language/css/workerManager.js");
/* harmony import */ var _languageFeatures_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageFeatures.js */ "./node_modules/monaco-editor/esm/vs/language/css/languageFeatures.js");
/* harmony import */ var _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fillers/monaco-editor-core.js */ "./node_modules/monaco-editor/esm/vs/language/css/fillers/monaco-editor-core.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



function setupMode(defaults) {
    var disposables = [];
    var providers = [];
    var client = new _workerManager_js__WEBPACK_IMPORTED_MODULE_0__.WorkerManager(defaults);
    disposables.push(client);
    var worker = function () {
        var uris = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            uris[_i] = arguments[_i];
        }
        return client.getLanguageServiceWorker.apply(client, uris);
    };
    function registerProviders() {
        var languageId = defaults.languageId, modeConfiguration = defaults.modeConfiguration;
        disposeAll(providers);
        if (modeConfiguration.completionItems) {
            providers.push(_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_2__.languages.registerCompletionItemProvider(languageId, new _languageFeatures_js__WEBPACK_IMPORTED_MODULE_1__.CompletionAdapter(worker)));
        }
        if (modeConfiguration.hovers) {
            providers.push(_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_2__.languages.registerHoverProvider(languageId, new _languageFeatures_js__WEBPACK_IMPORTED_MODULE_1__.HoverAdapter(worker)));
        }
        if (modeConfiguration.documentHighlights) {
            providers.push(_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_2__.languages.registerDocumentHighlightProvider(languageId, new _languageFeatures_js__WEBPACK_IMPORTED_MODULE_1__.DocumentHighlightAdapter(worker)));
        }
        if (modeConfiguration.definitions) {
            providers.push(_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_2__.languages.registerDefinitionProvider(languageId, new _languageFeatures_js__WEBPACK_IMPORTED_MODULE_1__.DefinitionAdapter(worker)));
        }
        if (modeConfiguration.references) {
            providers.push(_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_2__.languages.registerReferenceProvider(languageId, new _languageFeatures_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceAdapter(worker)));
        }
        if (modeConfiguration.documentSymbols) {
            providers.push(_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_2__.languages.registerDocumentSymbolProvider(languageId, new _languageFeatures_js__WEBPACK_IMPORTED_MODULE_1__.DocumentSymbolAdapter(worker)));
        }
        if (modeConfiguration.rename) {
            providers.push(_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_2__.languages.registerRenameProvider(languageId, new _languageFeatures_js__WEBPACK_IMPORTED_MODULE_1__.RenameAdapter(worker)));
        }
        if (modeConfiguration.colors) {
            providers.push(_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_2__.languages.registerColorProvider(languageId, new _languageFeatures_js__WEBPACK_IMPORTED_MODULE_1__.DocumentColorAdapter(worker)));
        }
        if (modeConfiguration.foldingRanges) {
            providers.push(_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_2__.languages.registerFoldingRangeProvider(languageId, new _languageFeatures_js__WEBPACK_IMPORTED_MODULE_1__.FoldingRangeAdapter(worker)));
        }
        if (modeConfiguration.diagnostics) {
            providers.push(new _languageFeatures_js__WEBPACK_IMPORTED_MODULE_1__.DiagnosticsAdapter(languageId, worker, defaults));
        }
        if (modeConfiguration.selectionRanges) {
            providers.push(_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_2__.languages.registerSelectionRangeProvider(languageId, new _languageFeatures_js__WEBPACK_IMPORTED_MODULE_1__.SelectionRangeAdapter(worker)));
        }
    }
    registerProviders();
    disposables.push(asDisposable(providers));
    return asDisposable(disposables);
}
function asDisposable(disposables) {
    return { dispose: function () { return disposeAll(disposables); } };
}
function disposeAll(disposables) {
    while (disposables.length) {
        disposables.pop().dispose();
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/fillers/vscode-nls.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/fillers/vscode-nls.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "loadMessageBundle": () => /* binding */ loadMessageBundle,
/* harmony export */   "config": () => /* binding */ config
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function format(message, args) {
    var result;
    if (args.length === 0) {
        result = message;
    }
    else {
        result = message.replace(/\{(\d+)\}/g, function (match, rest) {
            var index = rest[0];
            return typeof args[index] !== 'undefined' ? args[index] : match;
        });
    }
    return result;
}
function localize(key, message) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return format(message, args);
}
function loadMessageBundle(file) {
    return localize;
}
function config(opt) {
    return loadMessageBundle;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/languageFeatures.js":
/*!****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/languageFeatures.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DiagnosticsAdapter": () => /* binding */ DiagnosticsAdapter,
/* harmony export */   "CompletionAdapter": () => /* binding */ CompletionAdapter,
/* harmony export */   "HoverAdapter": () => /* binding */ HoverAdapter,
/* harmony export */   "DocumentHighlightAdapter": () => /* binding */ DocumentHighlightAdapter,
/* harmony export */   "DefinitionAdapter": () => /* binding */ DefinitionAdapter,
/* harmony export */   "ReferenceAdapter": () => /* binding */ ReferenceAdapter,
/* harmony export */   "RenameAdapter": () => /* binding */ RenameAdapter,
/* harmony export */   "DocumentSymbolAdapter": () => /* binding */ DocumentSymbolAdapter,
/* harmony export */   "DocumentColorAdapter": () => /* binding */ DocumentColorAdapter,
/* harmony export */   "FoldingRangeAdapter": () => /* binding */ FoldingRangeAdapter,
/* harmony export */   "SelectionRangeAdapter": () => /* binding */ SelectionRangeAdapter
/* harmony export */ });
/* harmony import */ var _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_deps/vscode-css-languageservice/cssLanguageService.js */ "./node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/cssLanguageService.js");
/* harmony import */ var _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fillers/monaco-editor-core.js */ "./node_modules/monaco-editor/esm/vs/language/css/fillers/monaco-editor-core.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


// --- diagnostics --- ---
var DiagnosticsAdapter = /** @class */ (function () {
    function DiagnosticsAdapter(_languageId, _worker, defaults) {
        var _this = this;
        this._languageId = _languageId;
        this._worker = _worker;
        this._disposables = [];
        this._listener = Object.create(null);
        var onModelAdd = function (model) {
            var modeId = model.getModeId();
            if (modeId !== _this._languageId) {
                return;
            }
            var handle;
            _this._listener[model.uri.toString()] = model.onDidChangeContent(function () {
                window.clearTimeout(handle);
                handle = window.setTimeout(function () { return _this._doValidate(model.uri, modeId); }, 500);
            });
            _this._doValidate(model.uri, modeId);
        };
        var onModelRemoved = function (model) {
            _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.editor.setModelMarkers(model, _this._languageId, []);
            var uriStr = model.uri.toString();
            var listener = _this._listener[uriStr];
            if (listener) {
                listener.dispose();
                delete _this._listener[uriStr];
            }
        };
        this._disposables.push(_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.editor.onDidCreateModel(onModelAdd));
        this._disposables.push(_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.editor.onWillDisposeModel(onModelRemoved));
        this._disposables.push(_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.editor.onDidChangeModelLanguage(function (event) {
            onModelRemoved(event.model);
            onModelAdd(event.model);
        }));
        defaults.onDidChange(function (_) {
            _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.editor.getModels().forEach(function (model) {
                if (model.getModeId() === _this._languageId) {
                    onModelRemoved(model);
                    onModelAdd(model);
                }
            });
        });
        this._disposables.push({
            dispose: function () {
                for (var key in _this._listener) {
                    _this._listener[key].dispose();
                }
            }
        });
        _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.editor.getModels().forEach(onModelAdd);
    }
    DiagnosticsAdapter.prototype.dispose = function () {
        this._disposables.forEach(function (d) { return d && d.dispose(); });
        this._disposables = [];
    };
    DiagnosticsAdapter.prototype._doValidate = function (resource, languageId) {
        this._worker(resource)
            .then(function (worker) {
            return worker.doValidation(resource.toString());
        })
            .then(function (diagnostics) {
            var markers = diagnostics.map(function (d) { return toDiagnostics(resource, d); });
            var model = _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.editor.getModel(resource);
            if (model.getModeId() === languageId) {
                _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.editor.setModelMarkers(model, languageId, markers);
            }
        })
            .then(undefined, function (err) {
            console.error(err);
        });
    };
    return DiagnosticsAdapter;
}());

function toSeverity(lsSeverity) {
    switch (lsSeverity) {
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.DiagnosticSeverity.Error:
            return _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.MarkerSeverity.Error;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.DiagnosticSeverity.Warning:
            return _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.MarkerSeverity.Warning;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.DiagnosticSeverity.Information:
            return _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.MarkerSeverity.Info;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.DiagnosticSeverity.Hint:
            return _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.MarkerSeverity.Hint;
        default:
            return _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.MarkerSeverity.Info;
    }
}
function toDiagnostics(resource, diag) {
    var code = typeof diag.code === 'number' ? String(diag.code) : diag.code;
    return {
        severity: toSeverity(diag.severity),
        startLineNumber: diag.range.start.line + 1,
        startColumn: diag.range.start.character + 1,
        endLineNumber: diag.range.end.line + 1,
        endColumn: diag.range.end.character + 1,
        message: diag.message,
        code: code,
        source: diag.source
    };
}
// --- completion ------
function fromPosition(position) {
    if (!position) {
        return void 0;
    }
    return { character: position.column - 1, line: position.lineNumber - 1 };
}
function fromRange(range) {
    if (!range) {
        return void 0;
    }
    return {
        start: {
            line: range.startLineNumber - 1,
            character: range.startColumn - 1
        },
        end: { line: range.endLineNumber - 1, character: range.endColumn - 1 }
    };
}
function toRange(range) {
    if (!range) {
        return void 0;
    }
    return new _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.Range(range.start.line + 1, range.start.character + 1, range.end.line + 1, range.end.character + 1);
}
function isInsertReplaceEdit(edit) {
    return (typeof edit.insert !== 'undefined' &&
        typeof edit.replace !== 'undefined');
}
function toCompletionItemKind(kind) {
    var mItemKind = _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.languages.CompletionItemKind;
    switch (kind) {
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Text:
            return mItemKind.Text;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Method:
            return mItemKind.Method;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Function:
            return mItemKind.Function;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Constructor:
            return mItemKind.Constructor;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Field:
            return mItemKind.Field;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Variable:
            return mItemKind.Variable;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Class:
            return mItemKind.Class;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Interface:
            return mItemKind.Interface;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Module:
            return mItemKind.Module;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Property:
            return mItemKind.Property;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Unit:
            return mItemKind.Unit;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Value:
            return mItemKind.Value;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Enum:
            return mItemKind.Enum;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Keyword:
            return mItemKind.Keyword;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Snippet:
            return mItemKind.Snippet;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Color:
            return mItemKind.Color;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.File:
            return mItemKind.File;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Reference:
            return mItemKind.Reference;
    }
    return mItemKind.Property;
}
function toTextEdit(textEdit) {
    if (!textEdit) {
        return void 0;
    }
    return {
        range: toRange(textEdit.range),
        text: textEdit.newText
    };
}
var CompletionAdapter = /** @class */ (function () {
    function CompletionAdapter(_worker) {
        this._worker = _worker;
    }
    Object.defineProperty(CompletionAdapter.prototype, "triggerCharacters", {
        get: function () {
            return [' ', ':'];
        },
        enumerable: false,
        configurable: true
    });
    CompletionAdapter.prototype.provideCompletionItems = function (model, position, context, token) {
        var resource = model.uri;
        return this._worker(resource)
            .then(function (worker) {
            return worker.doComplete(resource.toString(), fromPosition(position));
        })
            .then(function (info) {
            if (!info) {
                return;
            }
            var wordInfo = model.getWordUntilPosition(position);
            var wordRange = new _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.Range(position.lineNumber, wordInfo.startColumn, position.lineNumber, wordInfo.endColumn);
            var items = info.items.map(function (entry) {
                var item = {
                    label: entry.label,
                    insertText: entry.insertText || entry.label,
                    sortText: entry.sortText,
                    filterText: entry.filterText,
                    documentation: entry.documentation,
                    detail: entry.detail,
                    range: wordRange,
                    kind: toCompletionItemKind(entry.kind)
                };
                if (entry.textEdit) {
                    if (isInsertReplaceEdit(entry.textEdit)) {
                        item.range = {
                            insert: toRange(entry.textEdit.insert),
                            replace: toRange(entry.textEdit.replace)
                        };
                    }
                    else {
                        item.range = toRange(entry.textEdit.range);
                    }
                    item.insertText = entry.textEdit.newText;
                }
                if (entry.additionalTextEdits) {
                    item.additionalTextEdits = entry.additionalTextEdits.map(toTextEdit);
                }
                if (entry.insertTextFormat === _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet) {
                    item.insertTextRules = _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.languages.CompletionItemInsertTextRule.InsertAsSnippet;
                }
                return item;
            });
            return {
                isIncomplete: info.isIncomplete,
                suggestions: items
            };
        });
    };
    return CompletionAdapter;
}());

function isMarkupContent(thing) {
    return (thing && typeof thing === 'object' && typeof thing.kind === 'string');
}
function toMarkdownString(entry) {
    if (typeof entry === 'string') {
        return {
            value: entry
        };
    }
    if (isMarkupContent(entry)) {
        if (entry.kind === 'plaintext') {
            return {
                value: entry.value.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&')
            };
        }
        return {
            value: entry.value
        };
    }
    return { value: '```' + entry.language + '\n' + entry.value + '\n```\n' };
}
function toMarkedStringArray(contents) {
    if (!contents) {
        return void 0;
    }
    if (Array.isArray(contents)) {
        return contents.map(toMarkdownString);
    }
    return [toMarkdownString(contents)];
}
// --- hover ------
var HoverAdapter = /** @class */ (function () {
    function HoverAdapter(_worker) {
        this._worker = _worker;
    }
    HoverAdapter.prototype.provideHover = function (model, position, token) {
        var resource = model.uri;
        return this._worker(resource)
            .then(function (worker) {
            return worker.doHover(resource.toString(), fromPosition(position));
        })
            .then(function (info) {
            if (!info) {
                return;
            }
            return {
                range: toRange(info.range),
                contents: toMarkedStringArray(info.contents)
            };
        });
    };
    return HoverAdapter;
}());

// --- document highlights ------
function toDocumentHighlightKind(kind) {
    switch (kind) {
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Read:
            return _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.languages.DocumentHighlightKind.Read;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Write:
            return _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.languages.DocumentHighlightKind.Write;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Text:
            return _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.languages.DocumentHighlightKind.Text;
    }
    return _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.languages.DocumentHighlightKind.Text;
}
var DocumentHighlightAdapter = /** @class */ (function () {
    function DocumentHighlightAdapter(_worker) {
        this._worker = _worker;
    }
    DocumentHighlightAdapter.prototype.provideDocumentHighlights = function (model, position, token) {
        var resource = model.uri;
        return this._worker(resource)
            .then(function (worker) {
            return worker.findDocumentHighlights(resource.toString(), fromPosition(position));
        })
            .then(function (entries) {
            if (!entries) {
                return;
            }
            return entries.map(function (entry) {
                return {
                    range: toRange(entry.range),
                    kind: toDocumentHighlightKind(entry.kind)
                };
            });
        });
    };
    return DocumentHighlightAdapter;
}());

// --- definition ------
function toLocation(location) {
    return {
        uri: _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.Uri.parse(location.uri),
        range: toRange(location.range)
    };
}
var DefinitionAdapter = /** @class */ (function () {
    function DefinitionAdapter(_worker) {
        this._worker = _worker;
    }
    DefinitionAdapter.prototype.provideDefinition = function (model, position, token) {
        var resource = model.uri;
        return this._worker(resource)
            .then(function (worker) {
            return worker.findDefinition(resource.toString(), fromPosition(position));
        })
            .then(function (definition) {
            if (!definition) {
                return;
            }
            return [toLocation(definition)];
        });
    };
    return DefinitionAdapter;
}());

// --- references ------
var ReferenceAdapter = /** @class */ (function () {
    function ReferenceAdapter(_worker) {
        this._worker = _worker;
    }
    ReferenceAdapter.prototype.provideReferences = function (model, position, context, token) {
        var resource = model.uri;
        return this._worker(resource)
            .then(function (worker) {
            return worker.findReferences(resource.toString(), fromPosition(position));
        })
            .then(function (entries) {
            if (!entries) {
                return;
            }
            return entries.map(toLocation);
        });
    };
    return ReferenceAdapter;
}());

// --- rename ------
function toWorkspaceEdit(edit) {
    if (!edit || !edit.changes) {
        return void 0;
    }
    var resourceEdits = [];
    for (var uri in edit.changes) {
        var _uri = _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.Uri.parse(uri);
        // let edits: languages.TextEdit[] = [];
        for (var _i = 0, _a = edit.changes[uri]; _i < _a.length; _i++) {
            var e = _a[_i];
            resourceEdits.push({
                resource: _uri,
                edit: {
                    range: toRange(e.range),
                    text: e.newText
                }
            });
        }
    }
    return {
        edits: resourceEdits
    };
}
var RenameAdapter = /** @class */ (function () {
    function RenameAdapter(_worker) {
        this._worker = _worker;
    }
    RenameAdapter.prototype.provideRenameEdits = function (model, position, newName, token) {
        var resource = model.uri;
        return this._worker(resource)
            .then(function (worker) {
            return worker.doRename(resource.toString(), fromPosition(position), newName);
        })
            .then(function (edit) {
            return toWorkspaceEdit(edit);
        });
    };
    return RenameAdapter;
}());

// --- document symbols ------
function toSymbolKind(kind) {
    var mKind = _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.languages.SymbolKind;
    switch (kind) {
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.File:
            return mKind.Array;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Module:
            return mKind.Module;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Namespace:
            return mKind.Namespace;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Package:
            return mKind.Package;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class:
            return mKind.Class;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Method:
            return mKind.Method;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Property:
            return mKind.Property;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Field:
            return mKind.Field;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Constructor:
            return mKind.Constructor;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Enum:
            return mKind.Enum;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Interface:
            return mKind.Interface;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Function:
            return mKind.Function;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable:
            return mKind.Variable;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Constant:
            return mKind.Constant;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.String:
            return mKind.String;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Number:
            return mKind.Number;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Boolean:
            return mKind.Boolean;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Array:
            return mKind.Array;
    }
    return mKind.Function;
}
var DocumentSymbolAdapter = /** @class */ (function () {
    function DocumentSymbolAdapter(_worker) {
        this._worker = _worker;
    }
    DocumentSymbolAdapter.prototype.provideDocumentSymbols = function (model, token) {
        var resource = model.uri;
        return this._worker(resource)
            .then(function (worker) { return worker.findDocumentSymbols(resource.toString()); })
            .then(function (items) {
            if (!items) {
                return;
            }
            return items.map(function (item) { return ({
                name: item.name,
                detail: '',
                containerName: item.containerName,
                kind: toSymbolKind(item.kind),
                tags: [],
                range: toRange(item.location.range),
                selectionRange: toRange(item.location.range)
            }); });
        });
    };
    return DocumentSymbolAdapter;
}());

var DocumentColorAdapter = /** @class */ (function () {
    function DocumentColorAdapter(_worker) {
        this._worker = _worker;
    }
    DocumentColorAdapter.prototype.provideDocumentColors = function (model, token) {
        var resource = model.uri;
        return this._worker(resource)
            .then(function (worker) { return worker.findDocumentColors(resource.toString()); })
            .then(function (infos) {
            if (!infos) {
                return;
            }
            return infos.map(function (item) { return ({
                color: item.color,
                range: toRange(item.range)
            }); });
        });
    };
    DocumentColorAdapter.prototype.provideColorPresentations = function (model, info, token) {
        var resource = model.uri;
        return this._worker(resource)
            .then(function (worker) {
            return worker.getColorPresentations(resource.toString(), info.color, fromRange(info.range));
        })
            .then(function (presentations) {
            if (!presentations) {
                return;
            }
            return presentations.map(function (presentation) {
                var item = {
                    label: presentation.label
                };
                if (presentation.textEdit) {
                    item.textEdit = toTextEdit(presentation.textEdit);
                }
                if (presentation.additionalTextEdits) {
                    item.additionalTextEdits = presentation.additionalTextEdits.map(toTextEdit);
                }
                return item;
            });
        });
    };
    return DocumentColorAdapter;
}());

var FoldingRangeAdapter = /** @class */ (function () {
    function FoldingRangeAdapter(_worker) {
        this._worker = _worker;
    }
    FoldingRangeAdapter.prototype.provideFoldingRanges = function (model, context, token) {
        var resource = model.uri;
        return this._worker(resource)
            .then(function (worker) { return worker.getFoldingRanges(resource.toString(), context); })
            .then(function (ranges) {
            if (!ranges) {
                return;
            }
            return ranges.map(function (range) {
                var result = {
                    start: range.startLine + 1,
                    end: range.endLine + 1
                };
                if (typeof range.kind !== 'undefined') {
                    result.kind = toFoldingRangeKind(range.kind);
                }
                return result;
            });
        });
    };
    return FoldingRangeAdapter;
}());

function toFoldingRangeKind(kind) {
    switch (kind) {
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.FoldingRangeKind.Comment:
            return _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.languages.FoldingRangeKind.Comment;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.FoldingRangeKind.Imports:
            return _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.languages.FoldingRangeKind.Imports;
        case _deps_vscode_css_languageservice_cssLanguageService_js__WEBPACK_IMPORTED_MODULE_0__.FoldingRangeKind.Region:
            return _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_1__.languages.FoldingRangeKind.Region;
    }
}
var SelectionRangeAdapter = /** @class */ (function () {
    function SelectionRangeAdapter(_worker) {
        this._worker = _worker;
    }
    SelectionRangeAdapter.prototype.provideSelectionRanges = function (model, positions, token) {
        var resource = model.uri;
        return this._worker(resource)
            .then(function (worker) { return worker.getSelectionRanges(resource.toString(), positions.map(fromPosition)); })
            .then(function (selectionRanges) {
            if (!selectionRanges) {
                return;
            }
            return selectionRanges.map(function (selectionRange) {
                var result = [];
                while (selectionRange) {
                    result.push({ range: toRange(selectionRange.range) });
                    selectionRange = selectionRange.parent;
                }
                return result;
            });
        });
    };
    return SelectionRangeAdapter;
}());



/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/css/workerManager.js":
/*!*************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/css/workerManager.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WorkerManager": () => /* binding */ WorkerManager
/* harmony export */ });
/* harmony import */ var _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fillers/monaco-editor-core.js */ "./node_modules/monaco-editor/esm/vs/language/css/fillers/monaco-editor-core.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min
var WorkerManager = /** @class */ (function () {
    function WorkerManager(defaults) {
        var _this = this;
        this._defaults = defaults;
        this._worker = null;
        this._idleCheckInterval = window.setInterval(function () { return _this._checkIfIdle(); }, 30 * 1000);
        this._lastUsedTime = 0;
        this._configChangeListener = this._defaults.onDidChange(function () { return _this._stopWorker(); });
    }
    WorkerManager.prototype._stopWorker = function () {
        if (this._worker) {
            this._worker.dispose();
            this._worker = null;
        }
        this._client = null;
    };
    WorkerManager.prototype.dispose = function () {
        clearInterval(this._idleCheckInterval);
        this._configChangeListener.dispose();
        this._stopWorker();
    };
    WorkerManager.prototype._checkIfIdle = function () {
        if (!this._worker) {
            return;
        }
        var timePassedSinceLastUsed = Date.now() - this._lastUsedTime;
        if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {
            this._stopWorker();
        }
    };
    WorkerManager.prototype._getClient = function () {
        this._lastUsedTime = Date.now();
        if (!this._client) {
            this._worker = _fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_0__.editor.createWebWorker({
                // module that exports the create() method and returns a `CSSWorker` instance
                moduleId: 'vs/language/css/cssWorker',
                label: this._defaults.languageId,
                // passed in to the create() method
                createData: {
                    languageSettings: this._defaults.diagnosticsOptions,
                    languageId: this._defaults.languageId
                }
            });
            this._client = this._worker.getProxy();
        }
        return this._client;
    };
    WorkerManager.prototype.getLanguageServiceWorker = function () {
        var _this = this;
        var resources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            resources[_i] = arguments[_i];
        }
        var _client;
        return this._getClient()
            .then(function (client) {
            _client = client;
        })
            .then(function (_) {
            return _this._worker.withSyncedResources(resources);
        })
            .then(function (_) { return _client; });
    };
    return WorkerManager;
}());



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,